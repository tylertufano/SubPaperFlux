name: Build and push Docker image to dockerhub

on:
  push:
    tags:
      - 'feature/**'
      - '**-beta'
      - 'v*'

jobs:
  verify:
    name: Verify application
    runs-on: ubuntu-latest
    env:
      PYTHONUNBUFFERED: '1'
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install API dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.api.txt -r requirements.txt pytest

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        working-directory: web
        run: npm ci

      - name: Run API pytest
        run: |
          mkdir -p artifacts/backend
          pytest --junitxml=artifacts/backend/pytest.xml

      - name: Run ESLint
        working-directory: web
        run: npm run lint

      - name: Type check web app
        working-directory: web
        run: npm run typecheck

      - name: Run Vitest unit tests
        working-directory: web
        run: |
          mkdir -p ../artifacts/frontend
          npm run test:unit -- --reporter=default --reporter=junit --outputFile=../artifacts/frontend/vitest-junit.xml

      - name: Install Playwright dependencies
        working-directory: web
        run: npx playwright install --with-deps

      - name: Run Playwright smoke tests
        env:
          DATABASE_URL: sqlite:///./dev.db
          NEXT_PUBLIC_API_BASE: http://127.0.0.1:8000
          API_BASE: http://127.0.0.1:8000
          AUTH_URL: http://localhost:3000
          NEXTAUTH_URL: http://localhost:3000
          PLAYWRIGHT_BASE_URL: http://localhost:3000
          HEADLESS: '1'
          CI: 'true'
          PLAYWRIGHT_JUNIT_OUTPUT_NAME: playwright-results.xml
          NEXTAUTH_SECRET: devsecret
          OIDC_CLIENT_ID: local
          OIDC_CLIENT_SECRET: local
          OIDC_ISSUER: http://127.0.0.1:4455/oidc
        run: |
          set -euo pipefail
          DB_URL="${DATABASE_URL:-sqlite:///./dev.db}"
          USE_SQLMODEL=0
          if [ "${DB_URL%%:*}" != "sqlite" ]; then
            DATABASE_URL="$DB_URL" alembic upgrade head
          else
            USE_SQLMODEL=1
          fi
          API_PID=
          cleanup() {
            if [ -n "${API_PID:-}" ]; then
              kill "$API_PID" 2>/dev/null || true
              wait "$API_PID" 2>/dev/null || true
            fi
          }
          trap cleanup EXIT
          if [ "$USE_SQLMODEL" -eq 1 ]; then
            DATABASE_URL="$DB_URL" SQLMODEL_CREATE_ALL="${SQLMODEL_CREATE_ALL:-1}" uvicorn app.main:app --host 127.0.0.1 --port 8000 --log-level warning &
          else
            DATABASE_URL="$DB_URL" uvicorn app.main:app --host 127.0.0.1 --port 8000 --log-level warning &
          fi
          API_PID=$!
          until curl -sSf http://127.0.0.1:8000/status > /dev/null; do sleep 1; done
          cd web
          npm run test:e2e:ci -- --reporter=junit --reporter=line
          cd ..
          mkdir -p artifacts/playwright
          if [ -f web/test-results/playwright-results.xml ]; then
            cp web/test-results/playwright-results.xml artifacts/playwright/
          fi

      - name: Run bundle analysis
        working-directory: web
        run: |
          rm -rf analyze
          npm run analyze

      - name: Collect bundle analysis artifacts
        run: |
          if [ -d web/analyze ]; then
            mkdir -p artifacts/bundle-analysis
            cp -r web/analyze/. artifacts/bundle-analysis/
          fi

      - name: Upload pytest results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: backend-pytest
          path: artifacts/backend
          if-no-files-found: warn

      - name: Upload Vitest results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: frontend-vitest
          path: artifacts/frontend
          if-no-files-found: warn

      - name: Upload Playwright artifacts
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: playwright-smoke
          path: |
            web/test-results
            web/playwright-report
            artifacts/playwright
          if-no-files-found: warn

      - name: Upload bundle analysis
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: artifacts/bundle-analysis
          if-no-files-found: warn

  build:
    needs: verify
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
        with:
          platforms: linux/amd64

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Docker Login
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      # Generate vendored SDK from OpenAPI, then validate the Next.js web build before Docker
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install API dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.api.txt -r requirements.txt

      - name: Generate OpenAPI and vendored SDK
        shell: bash
        run: |
          make openapi-export
          make sdk-ts-web

      # Validate the Next.js web build before building/pushing Docker images
      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: web/package-lock.json

      - name: Install web dependencies
        working-directory: web
        run: npm ci

      - name: Build web (Next.js)
        working-directory: web
        run: npm run build

      - name: Extract Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: tylertufano/subpaperflux
          flavor: |
            ${{ !contains(github.ref, '-beta') && 'latest=true' || 'latest=false' }}

      - name: Extract Docker metadata (web)
        id: meta_web
        uses: docker/metadata-action@v5
        with:
          images: tylertufano/subpaperflux-web
          flavor: |
            ${{ !contains(github.ref, '-beta') && 'latest=true' || 'latest=false' }}
      # SDK already generated above into web/sdk

      - name: Build and Push Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Build and Push Web Docker image
        uses: docker/build-push-action@v5
        with:
          context: ./web
          file: ./web/Dockerfile
          build-args: |
            NEXT_PUBLIC_API_BASE=${{ vars.NEXT_PUBLIC_API_BASE || env.NEXT_PUBLIC_API_BASE || secrets.NEXT_PUBLIC_API_BASE }}
          push: true
          platforms: linux/amd64
          tags: ${{ steps.meta_web.outputs.tags }}
          labels: ${{ steps.meta_web.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
