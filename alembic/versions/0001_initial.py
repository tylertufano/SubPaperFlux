"""Initial schema for first-time deployments.

Revision ID: 0001_initial
Revises:
Create Date: 2025-09-23 22:40:54.701439

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel

from app.organization_defaults import (
    DEFAULT_ORGANIZATION_DESCRIPTION,
    DEFAULT_ORGANIZATION_ID,
    DEFAULT_ORGANIZATION_NAME,
    DEFAULT_ORGANIZATION_SLUG,
)


# revision identifiers, used by Alembic.
revision = "0001_initial"
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('audit_log',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('entity_type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('entity_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('action', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('actor_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_audit_log_action'), 'audit_log', ['action'], unique=False)
    op.create_index(op.f('ix_audit_log_actor_user_id'), 'audit_log', ['actor_user_id'], unique=False)
    op.create_index(op.f('ix_audit_log_created_at'), 'audit_log', ['created_at'], unique=False)
    op.create_index(op.f('ix_audit_log_entity_id'), 'audit_log', ['entity_id'], unique=False)
    op.create_index(op.f('ix_audit_log_entity_type'), 'audit_log', ['entity_type'], unique=False)
    op.create_index(op.f('ix_audit_log_owner_user_id'), 'audit_log', ['owner_user_id'], unique=False)
    op.create_table('bookmark',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('instapaper_bookmark_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('content_location', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('feed_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('published_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bookmark_feed_id'), 'bookmark', ['feed_id'], unique=False)
    op.create_index(op.f('ix_bookmark_instapaper_bookmark_id'), 'bookmark', ['instapaper_bookmark_id'], unique=False)
    op.create_index(op.f('ix_bookmark_owner_user_id'), 'bookmark', ['owner_user_id'], unique=False)
    op.create_index('ix_bookmark_published_at', 'bookmark', ['published_at'], unique=False)
    op.create_table('cookie',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('cookie_key', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('site_config_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('cookies', sa.JSON(), nullable=True),
    sa.Column('last_refresh', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('expiry_hint', sa.Float(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_cookie_cookie_key'), 'cookie', ['cookie_key'], unique=False)
    op.create_index(op.f('ix_cookie_owner_user_id'), 'cookie', ['owner_user_id'], unique=False)
    op.create_index(op.f('ix_cookie_site_config_id'), 'cookie', ['site_config_id'], unique=False)
    op.create_table('credential',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('kind', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sa.String(length=200), nullable=False),
    sa.Column('data', sa.JSON(), nullable=True),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_credential_owner_user_id'), 'credential', ['owner_user_id'], unique=False)
    op.create_table('feed',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('poll_frequency', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('initial_lookback_period', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_paywalled', sa.Boolean(), nullable=False),
    sa.Column('rss_requires_auth', sa.Boolean(), nullable=False),
    sa.Column('site_config_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_feed_owner_user_id'), 'feed', ['owner_user_id'], unique=False)
    op.create_index(op.f('ix_feed_site_config_id'), 'feed', ['site_config_id'], unique=False)
    op.create_table('job',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('type', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('status', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('last_error', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('available_at', sa.Float(), nullable=True),
    sa.Column('dead_at', sa.Float(), nullable=True),
    sa.Column('details', sa.JSON(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_job_available_at'), 'job', ['available_at'], unique=False)
    op.create_index(op.f('ix_job_dead_at'), 'job', ['dead_at'], unique=False)
    op.create_index(op.f('ix_job_owner_user_id'), 'job', ['owner_user_id'], unique=False)
    op.create_index(op.f('ix_job_status'), 'job', ['status'], unique=False)
    op.create_table('job_schedule',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('job_type', sa.String(length=255), nullable=False),
    sa.Column('owner_user_id', sa.String(), nullable=True),
    sa.Column('payload', sa.JSON(), nullable=False),
    sa.Column('frequency', sa.String(length=255), nullable=False),
    sa.Column('next_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_run_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('last_job_id', sa.String(), nullable=True),
    sa.Column('last_error', sa.Text(), nullable=True),
    sa.Column('last_error_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_job_schedule_is_active'), 'job_schedule', ['is_active'], unique=False)
    op.create_index(op.f('ix_job_schedule_job_type'), 'job_schedule', ['job_type'], unique=False)
    op.create_index(op.f('ix_job_schedule_next_run_at'), 'job_schedule', ['next_run_at'], unique=False)
    op.create_index(op.f('ix_job_schedule_owner_user_id'), 'job_schedule', ['owner_user_id'], unique=False)
    op.create_table('organizations',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('slug', sa.String(length=255), nullable=False),
    sa.Column('name', sa.String(length=255), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.Column('is_default', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_organizations_name'),
    sa.UniqueConstraint('slug', name='uq_organizations_slug')
    )
    op.create_index(op.f('ix_organizations_is_default'), 'organizations', ['is_default'], unique=False)
    op.create_index(op.f('ix_organizations_name'), 'organizations', ['name'], unique=False)
    op.create_index(op.f('ix_organizations_slug'), 'organizations', ['slug'], unique=False)
    op.create_table('roles',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_system', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('name', name='uq_roles_name')
    )
    op.create_index(op.f('ix_roles_is_system'), 'roles', ['is_system'], unique=False)
    op.create_index(op.f('ix_roles_name'), 'roles', ['name'], unique=False)
    op.create_table('siteconfig',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('site_url', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('username_selector', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('password_selector', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('login_button_selector', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('post_login_selector', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('cookies_to_store', sa.JSON(), nullable=True),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_siteconfig_owner_user_id'), 'siteconfig', ['owner_user_id'], unique=False)
    op.create_table('users',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('full_name', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('picture_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('claims', sa.JSON(), nullable=True),
    sa.Column('locale', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('notification_preferences', sa.JSON(), nullable=True),
    sa.Column('quota_credentials', sa.Integer(), nullable=True),
    sa.Column('quota_site_configs', sa.Integer(), nullable=True),
    sa.Column('quota_feeds', sa.Integer(), nullable=True),
    sa.Column('quota_api_tokens', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_login_at', sa.DateTime(timezone=True), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email', name='uq_users_email')
    )
    op.create_index(op.f('ix_users_created_at'), 'users', ['created_at'], unique=False)
    op.create_index(op.f('ix_users_email'), 'users', ['email'], unique=False)
    op.create_index(op.f('ix_users_is_active'), 'users', ['is_active'], unique=False)
    op.create_index(op.f('ix_users_locale'), 'users', ['locale'], unique=False)
    op.create_table('api_tokens',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('token_hash', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('scopes', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('last_used_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('expires_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('revoked_at', sa.DateTime(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('token_hash', name='uq_api_tokens_token_hash'),
    sa.UniqueConstraint('user_id', 'name', name='uq_api_tokens_user_name')
    )
    op.create_index(op.f('ix_api_tokens_name'), 'api_tokens', ['name'], unique=False)
    op.create_index(op.f('ix_api_tokens_user_id'), 'api_tokens', ['user_id'], unique=False)
    op.create_table('folder',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('instapaper_folder_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_user_id', 'name', name='uq_folder_owner_name')
    )
    op.create_index(op.f('ix_folder_instapaper_folder_id'), 'folder', ['instapaper_folder_id'], unique=False)
    op.create_index(op.f('ix_folder_name'), 'folder', ['name'], unique=False)
    op.create_index(op.f('ix_folder_owner_user_id'), 'folder', ['owner_user_id'], unique=False)
    op.create_table('organization_memberships',
    sa.Column('organization_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.ForeignKeyConstraint(['organization_id'], ['organizations.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('organization_id', 'user_id'),
    sa.UniqueConstraint('organization_id', 'user_id', name='uq_organization_memberships_org_user')
    )
    op.create_index(op.f('ix_organization_memberships_user_id'), 'organization_memberships', ['user_id'], unique=False)
    op.execute(
        sa.text(
            """
            INSERT INTO organizations (id, slug, name, description, is_default, created_at, updated_at)
            VALUES (:id, :slug, :name, :description, :is_default, CURRENT_TIMESTAMP, CURRENT_TIMESTAMP)
            """
        ).bindparams(
            sa.bindparam("id", value=DEFAULT_ORGANIZATION_ID),
            sa.bindparam("slug", value=DEFAULT_ORGANIZATION_SLUG),
            sa.bindparam("name", value=DEFAULT_ORGANIZATION_NAME),
            sa.bindparam("description", value=DEFAULT_ORGANIZATION_DESCRIPTION),
            sa.bindparam("is_default", value=True),
        )
    )
    op.execute(
        sa.text(
            """
            INSERT INTO organization_memberships (organization_id, user_id, created_at)
            SELECT :organization_id, id, CURRENT_TIMESTAMP
            FROM users
            """
        ).bindparams(
            sa.bindparam("organization_id", value=DEFAULT_ORGANIZATION_ID)
        )
    )
    op.create_table('site_settings',
    sa.Column('key', sa.String(length=255), nullable=False),
    sa.Column('value', sa.JSON(), nullable=False),
    sa.Column('created_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('updated_by_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['updated_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('key')
    )
    op.create_index(op.f('ix_site_settings_created_at'), 'site_settings', ['created_at'], unique=False)
    op.create_index(op.f('ix_site_settings_updated_at'), 'site_settings', ['updated_at'], unique=False)
    op.create_index(op.f('ix_site_settings_updated_by_user_id'), 'site_settings', ['updated_by_user_id'], unique=False)
    op.create_table('tag',
    sa.Column('id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('owner_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['owner_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('owner_user_id', 'name', name='uq_tag_owner_name')
    )
    op.create_index(op.f('ix_tag_name'), 'tag', ['name'], unique=False)
    op.create_index(op.f('ix_tag_owner_user_id'), 'tag', ['owner_user_id'], unique=False)
    op.create_table('user_roles',
    sa.Column('user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('granted_at', sa.DateTime(timezone=True), nullable=False),
    sa.Column('granted_by_user_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.ForeignKeyConstraint(['granted_by_user_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id'),
    sa.UniqueConstraint('user_id', 'role_id', name='uq_user_roles_user_role')
    )
    op.create_table('bookmark_folder_link',
    sa.Column('bookmark_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('folder_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['bookmark_id'], ['bookmark.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['folder_id'], ['folder.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('bookmark_id', 'folder_id')
    )
    op.create_index(op.f('ix_bookmark_folder_link_folder_id'), 'bookmark_folder_link', ['folder_id'], unique=False)
    op.create_table('bookmark_tag_link',
    sa.Column('bookmark_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('tag_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.ForeignKeyConstraint(['bookmark_id'], ['bookmark.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['tag_id'], ['tag.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('bookmark_id', 'tag_id')
    )
    op.create_index(op.f('ix_bookmark_tag_link_tag_id'), 'bookmark_tag_link', ['tag_id'], unique=False)
    bind = op.get_bind()
    dialect = bind.dialect.name if bind is not None else ""
    if dialect == "postgresql":
        op.execute(
            "ALTER TABLE alembic_version ALTER COLUMN version_num TYPE VARCHAR(128);"
        )
        op.execute("CREATE EXTENSION IF NOT EXISTS pg_trgm;")
        op.execute(
            "CREATE INDEX IF NOT EXISTS ix_bookmark_title_lower ON bookmark (LOWER(title));"
        )
        op.execute(
            "CREATE INDEX IF NOT EXISTS ix_bookmark_url_lower ON bookmark (LOWER(url));"
        )
        op.execute(
            "CREATE INDEX IF NOT EXISTS ix_bookmark_title_trgm ON bookmark USING gin (LOWER(title) gin_trgm_ops);"
        )
        op.execute(
            "CREATE INDEX IF NOT EXISTS ix_bookmark_url_trgm ON bookmark USING gin (LOWER(url) gin_trgm_ops);"
        )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    bind = op.get_bind()
    dialect = bind.dialect.name if bind is not None else ""
    if dialect == "postgresql":
        op.execute("DROP INDEX IF EXISTS ix_bookmark_title_trgm;")
        op.execute("DROP INDEX IF EXISTS ix_bookmark_url_trgm;")
        op.execute("DROP INDEX IF EXISTS ix_bookmark_title_lower;")
        op.execute("DROP INDEX IF EXISTS ix_bookmark_url_lower;")
        op.execute(
            "ALTER TABLE alembic_version ALTER COLUMN version_num TYPE VARCHAR(32);"
        )
    op.drop_index(op.f('ix_bookmark_tag_link_tag_id'), table_name='bookmark_tag_link')
    op.drop_table('bookmark_tag_link')
    op.drop_index(op.f('ix_bookmark_folder_link_folder_id'), table_name='bookmark_folder_link')
    op.drop_table('bookmark_folder_link')
    op.drop_table('user_roles')
    op.drop_index(op.f('ix_tag_owner_user_id'), table_name='tag')
    op.drop_index(op.f('ix_tag_name'), table_name='tag')
    op.drop_table('tag')
    op.drop_index(op.f('ix_site_settings_updated_by_user_id'), table_name='site_settings')
    op.drop_index(op.f('ix_site_settings_updated_at'), table_name='site_settings')
    op.drop_index(op.f('ix_site_settings_created_at'), table_name='site_settings')
    op.drop_table('site_settings')
    op.drop_index(op.f('ix_organization_memberships_user_id'), table_name='organization_memberships')
    op.drop_table('organization_memberships')
    op.drop_index(op.f('ix_folder_owner_user_id'), table_name='folder')
    op.drop_index(op.f('ix_folder_name'), table_name='folder')
    op.drop_index(op.f('ix_folder_instapaper_folder_id'), table_name='folder')
    op.drop_table('folder')
    op.drop_index(op.f('ix_api_tokens_user_id'), table_name='api_tokens')
    op.drop_index(op.f('ix_api_tokens_name'), table_name='api_tokens')
    op.drop_table('api_tokens')
    op.drop_index(op.f('ix_users_locale'), table_name='users')
    op.drop_index(op.f('ix_users_is_active'), table_name='users')
    op.drop_index(op.f('ix_users_email'), table_name='users')
    op.drop_index(op.f('ix_users_created_at'), table_name='users')
    op.drop_table('users')
    op.drop_index(op.f('ix_siteconfig_owner_user_id'), table_name='siteconfig')
    op.drop_table('siteconfig')
    op.drop_index(op.f('ix_roles_name'), table_name='roles')
    op.drop_index(op.f('ix_roles_is_system'), table_name='roles')
    op.drop_table('roles')
    op.drop_index(op.f('ix_organizations_slug'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_name'), table_name='organizations')
    op.drop_index(op.f('ix_organizations_is_default'), table_name='organizations')
    op.drop_table('organizations')
    op.drop_index(op.f('ix_job_schedule_owner_user_id'), table_name='job_schedule')
    op.drop_index(op.f('ix_job_schedule_next_run_at'), table_name='job_schedule')
    op.drop_index(op.f('ix_job_schedule_job_type'), table_name='job_schedule')
    op.drop_index(op.f('ix_job_schedule_is_active'), table_name='job_schedule')
    op.drop_table('job_schedule')
    op.drop_index(op.f('ix_job_status'), table_name='job')
    op.drop_index(op.f('ix_job_owner_user_id'), table_name='job')
    op.drop_index(op.f('ix_job_dead_at'), table_name='job')
    op.drop_index(op.f('ix_job_available_at'), table_name='job')
    op.drop_table('job')
    op.drop_index(op.f('ix_feed_site_config_id'), table_name='feed')
    op.drop_index(op.f('ix_feed_owner_user_id'), table_name='feed')
    op.drop_table('feed')
    op.drop_index(op.f('ix_credential_owner_user_id'), table_name='credential')
    op.drop_table('credential')
    op.drop_index(op.f('ix_cookie_site_config_id'), table_name='cookie')
    op.drop_index(op.f('ix_cookie_owner_user_id'), table_name='cookie')
    op.drop_index(op.f('ix_cookie_cookie_key'), table_name='cookie')
    op.drop_table('cookie')
    op.drop_index(op.f('ix_bookmark_owner_user_id'), table_name='bookmark')
    op.drop_index(op.f('ix_bookmark_instapaper_bookmark_id'), table_name='bookmark')
    op.drop_index('ix_bookmark_published_at', table_name='bookmark')
    op.drop_index(op.f('ix_bookmark_feed_id'), table_name='bookmark')
    op.drop_table('bookmark')
    op.drop_index(op.f('ix_audit_log_owner_user_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_entity_type'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_entity_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_created_at'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_actor_user_id'), table_name='audit_log')
    op.drop_index(op.f('ix_audit_log_action'), table_name='audit_log')
    op.drop_table('audit_log')
    # ### end Alembic commands ###

