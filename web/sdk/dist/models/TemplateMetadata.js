"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.TemplateMetadataToJSON = exports.TemplateMetadataFromJSONTyped = exports.TemplateMetadataFromJSON = exports.instanceOfTemplateMetadata = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the TemplateMetadata interface.
 */
function instanceOfTemplateMetadata(value) {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "filename" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "format" in value;
    isInstance = isInstance && "sizeBytes" in value;
    isInstance = isInstance && "downloadUrl" in value;
    return isInstance;
}
exports.instanceOfTemplateMetadata = instanceOfTemplateMetadata;
function TemplateMetadataFromJSON(json) {
    return TemplateMetadataFromJSONTyped(json, false);
}
exports.TemplateMetadataFromJSON = TemplateMetadataFromJSON;
function TemplateMetadataFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'id': json['id'],
        'filename': json['filename'],
        'title': json['title'],
        'description': json['description'],
        'format': json['format'],
        'sizeBytes': json['size_bytes'],
        'categories': !(0, runtime_1.exists)(json, 'categories') ? undefined : json['categories'],
        'downloadUrl': json['download_url'],
    };
}
exports.TemplateMetadataFromJSONTyped = TemplateMetadataFromJSONTyped;
function TemplateMetadataToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'id': value.id,
        'filename': value.filename,
        'title': value.title,
        'description': value.description,
        'format': value.format,
        'size_bytes': value.sizeBytes,
        'categories': value.categories,
        'download_url': value.downloadUrl,
    };
}
exports.TemplateMetadataToJSON = TemplateMetadataToJSON;
