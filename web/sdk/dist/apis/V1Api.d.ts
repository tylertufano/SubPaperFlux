/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AdminOrganizationCreate, AdminOrganizationDetail, AdminOrganizationMembershipChange, AdminOrganizationUpdate, AdminOrganizationsPage, AdminRoleCreate, AdminRoleDetail, AdminRoleUpdate, AdminRolesPage, AdminUserOut, AdminUserRoleOverridesUpdate, AdminUserUpdate, AdminUsersPage, ApiTokenCreate, ApiTokenOut, ApiTokenWithSecret, ApiTokensPage, AuditLogsPage, BookmarkOut, BookmarksPage, Credential, CredentialsPage, Feed, FeedOut, FeedsPage, FolderCreate, FolderOut, FolderUpdate, InstapaperLoginRequest, JobOut, JobRequest, JobScheduleOut, JobSchedulesPage, JobsPage, MeOut, MeUpdate, SiteConfigsPage, SiteWelcomeSettingOut, StatusResponse, TagCreate, TagOut, TagUpdate, TemplateListResponse } from '../models';
export interface AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest {
    organizationId: any;
    adminOrganizationMembershipChange: AdminOrganizationMembershipChange;
}
export interface BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest {
    requestBody: {
        [key: string]: any;
    } | null;
    xCsrfToken?: any;
}
export interface BulkPublishBookmarksV1BookmarksBulkPublishPostRequest {
    requestBody: {
        [key: string]: any;
    } | null;
    xCsrfToken?: any;
}
export interface ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest {
    userId: any;
}
export interface CopyCredentialV1CredentialsCredIdCopyPostRequest {
    credId: any;
}
export interface CountBookmarksV1BookmarksCountGetRequest {
    feedId?: any;
    since?: any;
    until?: any;
    search?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
    size?: any;
}
export interface CreateCredentialV1V1CredentialsPostRequest {
    credential: Credential;
    xCsrfToken?: any;
}
export interface CreateFeedV1V1FeedsPostRequest {
    feed: Feed;
    xCsrfToken?: any;
}
export interface CreateFolderV1BookmarksFoldersPostRequest {
    folderCreate: FolderCreate;
    xCsrfToken?: any;
}
export interface CreateInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPostRequest {
    instapaperLoginRequest: InstapaperLoginRequest;
    xCsrfToken?: any;
}
export interface CreateJobScheduleV1JobSchedulesPostRequest {
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface CreateJobScheduleV1JobSchedulesPost0Request {
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface CreateOrganizationV1AdminOrgsPostRequest {
    adminOrganizationCreate: AdminOrganizationCreate;
}
export interface CreateRoleV1AdminRolesPostRequest {
    adminRoleCreate: AdminRoleCreate;
}
export interface CreateSiteConfigV1V1SiteConfigsPostRequest {
    body: any | null;
    xCsrfToken?: any;
}
export interface CreateTagV1BookmarksTagsPostRequest {
    tagCreate: TagCreate;
    xCsrfToken?: any;
}
export interface CreateTokenV1MeTokensPostRequest {
    apiTokenCreate: ApiTokenCreate;
}
export interface DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest {
    bookmarkId: any;
    deleteRemote?: any;
    xCsrfToken?: any;
}
export interface DeleteCredentialV1V1CredentialsCredIdDeleteRequest {
    credId: any;
    xCsrfToken?: any;
}
export interface DeleteFeedV1V1FeedsFeedIdDeleteRequest {
    feedId: any;
    xCsrfToken?: any;
}
export interface DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest {
    folderId: any;
    xCsrfToken?: any;
}
export interface DeleteJobScheduleV1JobSchedulesScheduleIdDeleteRequest {
    scheduleId: any;
}
export interface DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest {
    organizationId: any;
}
export interface DeleteRoleV1AdminRolesRoleIdDeleteRequest {
    roleId: any;
}
export interface DeleteSiteConfigV1V1SiteConfigsConfigIdDeleteRequest {
    configId: any;
    xCsrfToken?: any;
}
export interface DeleteTagV1BookmarksTagsTagIdDeleteRequest {
    tagId: any;
    xCsrfToken?: any;
}
export interface DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest {
    templateId: any;
}
export interface EnqueueJobV1JobsPostRequest {
    jobRequest: JobRequest;
}
export interface ExportBookmarksV1BookmarksExportGetRequest {
    format?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}
export interface GetBookmarkV1BookmarksBookmarkIdGetRequest {
    bookmarkId: any;
}
export interface GetCredentialV1V1CredentialsCredIdGetRequest {
    credId: any;
}
export interface GetFeedV1V1FeedsFeedIdGetRequest {
    feedId: any;
}
export interface GetJobScheduleV1JobSchedulesScheduleIdGetRequest {
    scheduleId: any;
}
export interface GetJobV1JobsJobIdGetRequest {
    jobId: any;
}
export interface GetOrganizationV1AdminOrgsOrganizationIdGetRequest {
    organizationId: any;
}
export interface GetRoleV1AdminRolesRoleIdGetRequest {
    roleId: any;
}
export interface GetSiteConfigV1V1SiteConfigsConfigIdGetRequest {
    configId: any;
}
export interface GetTokenV1MeTokensTokenIdGetRequest {
    tokenId: any;
}
export interface GetUserV1AdminUsersUserIdGetRequest {
    userId: any;
}
export interface GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest {
    userId: any;
    roleName: any;
    body?: any | null;
}
export interface HeadBookmarksV1BookmarksHeadRequest {
    search?: any;
    feedId?: any;
    since?: any;
    until?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}
export interface HeadBookmarksV1BookmarksHead0Request {
    search?: any;
    feedId?: any;
    since?: any;
    until?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}
export interface IntegrationsStatusV1StatusIntegrationsGetRequest {
    instapaperCredId?: any;
    minifluxCredId?: any;
}
export interface ListAuditLogsV1AdminAuditGetRequest {
    page?: any;
    size?: any;
    entityType?: any;
    entityId?: any;
    action?: any;
    ownerUserId?: any;
    actorUserId?: any;
    since?: any;
    until?: any;
}
export interface ListAuditLogsV1AdminAuditGet0Request {
    page?: any;
    size?: any;
    entityType?: any;
    entityId?: any;
    action?: any;
    ownerUserId?: any;
    actorUserId?: any;
    since?: any;
    until?: any;
}
export interface ListBookmarksV1BookmarksGetRequest {
    page?: any;
    size?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}
export interface ListBookmarksV1BookmarksGet0Request {
    page?: any;
    size?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}
export interface ListCredentialsV1V1CredentialsGetRequest {
    kind?: any;
    page?: any;
    size?: any;
}
export interface ListFeedsV1V1FeedsGetRequest {
    ownerUserIds?: any;
    page?: any;
    size?: any;
}
export interface ListJobSchedulesV1JobSchedulesGetRequest {
    jobType?: any;
    isActive?: any;
    page?: any;
    size?: any;
}
export interface ListJobSchedulesV1JobSchedulesGet0Request {
    jobType?: any;
    isActive?: any;
    page?: any;
    size?: any;
}
export interface ListJobsV1JobsGetRequest {
    status?: any;
    jobType?: any;
    page?: any;
    size?: any;
    orderBy?: any;
    orderDir?: any;
}
export interface ListJobsV1JobsGet0Request {
    status?: any;
    jobType?: any;
    page?: any;
    size?: any;
    orderBy?: any;
    orderDir?: any;
}
export interface ListOrganizationsV1AdminOrgsGetRequest {
    page?: any;
    size?: any;
    search?: any;
    isDefault?: any;
}
export interface ListRolesV1AdminRolesGetRequest {
    page?: any;
    size?: any;
    search?: any;
}
export interface ListSiteConfigsV1V1SiteConfigsGetRequest {
    search?: any;
    page?: any;
    size?: any;
}
export interface ListTokensV1MeTokensGetRequest {
    page?: any;
    size?: any;
    includeRevoked?: any;
}
export interface ListUsersV1AdminUsersGetRequest {
    page?: any;
    size?: any;
    search?: any;
    isActive?: any;
    role?: any;
    organizationId?: any;
}
export interface PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest {
    bookmarkId: any;
}
export interface RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest {
    organizationId: any;
    userId: any;
}
export interface RetryAllJobsV1JobsRetryAllPostRequest {
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface RetryJobV1JobsJobIdRetryPostRequest {
    jobId: any;
}
export interface RevokeTokenV1MeTokensTokenIdDeleteRequest {
    tokenId: any;
}
export interface RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest {
    userId: any;
    roleName: any;
    confirm?: any;
}
export interface RunJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRequest {
    scheduleId: any;
}
export interface StreamJobsV1JobsStreamGetRequest {
    status?: any;
    jobType?: any;
    page?: any;
    size?: any;
    orderBy?: any;
    orderDir?: any;
}
export interface TestInstapaperV1IntegrationsInstapaperTestPostRequest {
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface TestMinifluxV1IntegrationsMinifluxTestPostRequest {
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface TestSiteConfigV1SiteConfigsConfigIdTestPostRequest {
    configId: any;
}
export interface ToggleJobScheduleV1JobSchedulesScheduleIdTogglePostRequest {
    scheduleId: any;
}
export interface UpdateCredentialV1V1CredentialsCredIdPutRequest {
    credId: any;
    credential: Credential;
    xCsrfToken?: any;
}
export interface UpdateFeedV1V1FeedsFeedIdPutRequest {
    feedId: any;
    feed: Feed;
    xCsrfToken?: any;
}
export interface UpdateFolderV1BookmarksFoldersFolderIdPutRequest {
    folderId: any;
    folderUpdate: FolderUpdate;
    xCsrfToken?: any;
}
export interface UpdateJobScheduleV1JobSchedulesScheduleIdPatchRequest {
    scheduleId: any;
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface UpdateMeV1MePatchRequest {
    meUpdate: MeUpdate;
}
export interface UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest {
    organizationId: any;
    adminOrganizationUpdate: AdminOrganizationUpdate;
}
export interface UpdateRoleV1AdminRolesRoleIdPatchRequest {
    roleId: any;
    adminRoleUpdate: AdminRoleUpdate;
}
export interface UpdateSiteConfigV1V1SiteConfigsConfigIdPutRequest {
    configId: any;
    body: any | null;
    xCsrfToken?: any;
}
export interface UpdateTagV1BookmarksTagsTagIdPutRequest {
    tagId: any;
    tagUpdate: TagUpdate;
    xCsrfToken?: any;
}
export interface UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest {
    userId: any;
    adminUserRoleOverridesUpdate: AdminUserRoleOverridesUpdate;
}
export interface UpdateUserV1AdminUsersUserIdPatchRequest {
    userId: any;
    adminUserUpdate: AdminUserUpdate;
}
export interface UpdateWelcomeSettingV1SiteSettingsWelcomePatchRequest {
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface UpdateWelcomeSettingV1SiteSettingsWelcomePutRequest {
    requestBody: {
        [key: string]: any;
    } | null;
}
export interface ValidateJobPayloadV1JobsValidatePostRequest {
    requestBody: {
        [key: string]: any;
    } | null;
}
/**
 *
 */
export declare class V1Api extends runtime.BaseAPI {
    /**
     * Add a user to an organization
     */
    addOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRaw(requestParameters: AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Add a user to an organization
     */
    addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost(requestParameters: AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Clear user role overrides
     */
    clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRaw(requestParameters: ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Clear user role overrides
     */
    clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDelete(requestParameters: ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Copy Credential
     */
    copyCredentialV1CredentialsCredIdCopyPostRaw(requestParameters: CopyCredentialV1CredentialsCredIdCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>>;
    /**
     * Copy Credential
     */
    copyCredentialV1CredentialsCredIdCopyPost(requestParameters: CopyCredentialV1CredentialsCredIdCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential>;
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGetRaw(requestParameters: CountBookmarksV1BookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGet(requestParameters?: CountBookmarksV1BookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Create credential
     */
    createCredentialV1V1CredentialsPostRaw(requestParameters: CreateCredentialV1V1CredentialsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>>;
    /**
     * Create credential
     */
    createCredentialV1V1CredentialsPost(requestParameters: CreateCredentialV1V1CredentialsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential>;
    /**
     * Create feed
     */
    createFeedV1V1FeedsPostRaw(requestParameters: CreateFeedV1V1FeedsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedOut>>;
    /**
     * Create feed
     */
    createFeedV1V1FeedsPost(requestParameters: CreateFeedV1V1FeedsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedOut>;
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPostRaw(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>>;
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPost(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut>;
    /**
     * Create Instapaper credential via login
     */
    createInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPostRaw(requestParameters: CreateInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>>;
    /**
     * Create Instapaper credential via login
     */
    createInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPost(requestParameters: CreateInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential>;
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPostRaw(requestParameters: CreateJobScheduleV1JobSchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>>;
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPost(requestParameters: CreateJobScheduleV1JobSchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut>;
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPost_1Raw(requestParameters: CreateJobScheduleV1JobSchedulesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>>;
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPost_1(requestParameters: CreateJobScheduleV1JobSchedulesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut>;
    /**
     * Create an organization
     */
    createOrganizationV1AdminOrgsPostRaw(requestParameters: CreateOrganizationV1AdminOrgsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Create an organization
     */
    createOrganizationV1AdminOrgsPost(requestParameters: CreateOrganizationV1AdminOrgsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Create a role
     */
    createRoleV1AdminRolesPostRaw(requestParameters: CreateRoleV1AdminRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>>;
    /**
     * Create a role
     */
    createRoleV1AdminRolesPost(requestParameters: CreateRoleV1AdminRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail>;
    /**
     * Create a site config
     */
    createSiteConfigV1V1SiteConfigsPostRaw(requestParameters: CreateSiteConfigV1V1SiteConfigsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Create a site config
     */
    createSiteConfigV1V1SiteConfigsPost(requestParameters: CreateSiteConfigV1V1SiteConfigsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPostRaw(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>>;
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPost(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut>;
    /**
     * Create an API token
     */
    createTokenV1MeTokensPostRaw(requestParameters: CreateTokenV1MeTokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokenWithSecret>>;
    /**
     * Create an API token
     */
    createTokenV1MeTokensPost(requestParameters: CreateTokenV1MeTokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokenWithSecret>;
    /**
     * Db Status
     */
    dbStatusV1StatusDbGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Db Status
     */
    dbStatusV1StatusDbGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete credential
     */
    deleteCredentialV1V1CredentialsCredIdDeleteRaw(requestParameters: DeleteCredentialV1V1CredentialsCredIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete credential
     */
    deleteCredentialV1V1CredentialsCredIdDelete(requestParameters: DeleteCredentialV1V1CredentialsCredIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete feed
     */
    deleteFeedV1V1FeedsFeedIdDeleteRaw(requestParameters: DeleteFeedV1V1FeedsFeedIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete feed
     */
    deleteFeedV1V1FeedsFeedIdDelete(requestParameters: DeleteFeedV1V1FeedsFeedIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete a job schedule
     */
    deleteJobScheduleV1JobSchedulesScheduleIdDeleteRaw(requestParameters: DeleteJobScheduleV1JobSchedulesScheduleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a job schedule
     */
    deleteJobScheduleV1JobSchedulesScheduleIdDelete(requestParameters: DeleteJobScheduleV1JobSchedulesScheduleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete an organization
     */
    deleteOrganizationV1AdminOrgsOrganizationIdDeleteRaw(requestParameters: DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete an organization
     */
    deleteOrganizationV1AdminOrgsOrganizationIdDelete(requestParameters: DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters: DeleteRoleV1AdminRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDelete(requestParameters: DeleteRoleV1AdminRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete a site config
     */
    deleteSiteConfigV1V1SiteConfigsConfigIdDeleteRaw(requestParameters: DeleteSiteConfigV1V1SiteConfigsConfigIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a site config
     */
    deleteSiteConfigV1V1SiteConfigsConfigIdDelete(requestParameters: DeleteSiteConfigV1V1SiteConfigsConfigIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDelete(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Download template asset
     */
    downloadTemplateV1TemplatesTemplateIdDownloadGetRaw(requestParameters: DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Download template asset
     */
    downloadTemplateV1TemplatesTemplateIdDownloadGet(requestParameters: DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Enqueue Job
     */
    enqueueJobV1JobsPostRaw(requestParameters: EnqueueJobV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Enqueue Job
     */
    enqueueJobV1JobsPost(requestParameters: EnqueueJobV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGetRaw(requestParameters: ExportBookmarksV1BookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGet(requestParameters?: ExportBookmarksV1BookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>>;
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGet(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut>;
    /**
     * Get credential
     */
    getCredentialV1V1CredentialsCredIdGetRaw(requestParameters: GetCredentialV1V1CredentialsCredIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>>;
    /**
     * Get credential
     */
    getCredentialV1V1CredentialsCredIdGet(requestParameters: GetCredentialV1V1CredentialsCredIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential>;
    /**
     * Get feed
     */
    getFeedV1V1FeedsFeedIdGetRaw(requestParameters: GetFeedV1V1FeedsFeedIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedOut>>;
    /**
     * Get feed
     */
    getFeedV1V1FeedsFeedIdGet(requestParameters: GetFeedV1V1FeedsFeedIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedOut>;
    /**
     * Get a job schedule
     */
    getJobScheduleV1JobSchedulesScheduleIdGetRaw(requestParameters: GetJobScheduleV1JobSchedulesScheduleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>>;
    /**
     * Get a job schedule
     */
    getJobScheduleV1JobSchedulesScheduleIdGet(requestParameters: GetJobScheduleV1JobSchedulesScheduleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut>;
    /**
     * Get a single job by id.
     * Get job
     */
    getJobV1JobsJobIdGetRaw(requestParameters: GetJobV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>>;
    /**
     * Get a single job by id.
     * Get job
     */
    getJobV1JobsJobIdGet(requestParameters: GetJobV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut>;
    /**
     * Get current user profile
     */
    getMeV1MeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeOut>>;
    /**
     * Get current user profile
     */
    getMeV1MeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeOut>;
    /**
     * Get organization details
     */
    getOrganizationV1AdminOrgsOrganizationIdGetRaw(requestParameters: GetOrganizationV1AdminOrgsOrganizationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Get organization details
     */
    getOrganizationV1AdminOrgsOrganizationIdGet(requestParameters: GetOrganizationV1AdminOrgsOrganizationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGetRaw(requestParameters: GetRoleV1AdminRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>>;
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGet(requestParameters: GetRoleV1AdminRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail>;
    /**
     * Retrieve a site config
     */
    getSiteConfigV1V1SiteConfigsConfigIdGetRaw(requestParameters: GetSiteConfigV1V1SiteConfigsConfigIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Retrieve a site config
     */
    getSiteConfigV1V1SiteConfigsConfigIdGet(requestParameters: GetSiteConfigV1V1SiteConfigsConfigIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Get Status
     */
    getStatusV1StatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>>;
    /**
     * Get Status
     */
    getStatusV1StatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse>;
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGetRaw(requestParameters: GetTokenV1MeTokensTokenIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokenOut>>;
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGet(requestParameters: GetTokenV1MeTokensTokenIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokenOut>;
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGetRaw(requestParameters: GetUserV1AdminUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGet(requestParameters: GetUserV1AdminUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Retrieve the public welcome message
     */
    getWelcomeSettingV1SiteSettingsWelcomeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteWelcomeSettingOut>>;
    /**
     * Retrieve the public welcome message
     */
    getWelcomeSettingV1SiteSettingsWelcomeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteWelcomeSettingOut>;
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters: GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePost(requestParameters: GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHeadRaw(requestParameters: HeadBookmarksV1BookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead(requestParameters?: HeadBookmarksV1BookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_2Raw(requestParameters: HeadBookmarksV1BookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_2(requestParameters?: HeadBookmarksV1BookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Integrations Status
     */
    integrationsStatusV1StatusIntegrationsGetRaw(requestParameters: IntegrationsStatusV1StatusIntegrationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Integrations Status
     */
    integrationsStatusV1StatusIntegrationsGet(requestParameters?: IntegrationsStatusV1StatusIntegrationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGetRaw(requestParameters: ListAuditLogsV1AdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>>;
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet(requestParameters?: ListAuditLogsV1AdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage>;
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet_3Raw(requestParameters: ListAuditLogsV1AdminAuditGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>>;
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet_3(requestParameters?: ListAuditLogsV1AdminAuditGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage>;
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGetRaw(requestParameters: ListBookmarksV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>>;
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet(requestParameters?: ListBookmarksV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage>;
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_4Raw(requestParameters: ListBookmarksV1BookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>>;
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_4(requestParameters?: ListBookmarksV1BookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage>;
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGetRaw(requestParameters: ListCredentialsV1V1CredentialsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialsPage>>;
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGet(requestParameters?: ListCredentialsV1V1CredentialsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialsPage>;
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGetRaw(requestParameters: ListFeedsV1V1FeedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedsPage>>;
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGet(requestParameters?: ListFeedsV1V1FeedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedsPage>;
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGetRaw(requestParameters: ListJobSchedulesV1JobSchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobSchedulesPage>>;
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGet(requestParameters?: ListJobSchedulesV1JobSchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobSchedulesPage>;
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGet_5Raw(requestParameters: ListJobSchedulesV1JobSchedulesGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobSchedulesPage>>;
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGet_5(requestParameters?: ListJobSchedulesV1JobSchedulesGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobSchedulesPage>;
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGetRaw(requestParameters: ListJobsV1JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsPage>>;
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet(requestParameters?: ListJobsV1JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsPage>;
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet_6Raw(requestParameters: ListJobsV1JobsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsPage>>;
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet_6(requestParameters?: ListJobsV1JobsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsPage>;
    /**
     * List organizations
     */
    listOrganizationsV1AdminOrgsGetRaw(requestParameters: ListOrganizationsV1AdminOrgsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationsPage>>;
    /**
     * List organizations
     */
    listOrganizationsV1AdminOrgsGet(requestParameters?: ListOrganizationsV1AdminOrgsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationsPage>;
    /**
     * List roles
     */
    listRolesV1AdminRolesGetRaw(requestParameters: ListRolesV1AdminRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRolesPage>>;
    /**
     * List roles
     */
    listRolesV1AdminRolesGet(requestParameters?: ListRolesV1AdminRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRolesPage>;
    /**
     * List site configs
     */
    listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters: ListSiteConfigsV1V1SiteConfigsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteConfigsPage>>;
    /**
     * List site configs
     */
    listSiteConfigsV1V1SiteConfigsGet(requestParameters?: ListSiteConfigsV1V1SiteConfigsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteConfigsPage>;
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * List available templates
     */
    listTemplatesV1TemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateListResponse>>;
    /**
     * List available templates
     */
    listTemplatesV1TemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateListResponse>;
    /**
     * List API tokens
     */
    listTokensV1MeTokensGetRaw(requestParameters: ListTokensV1MeTokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokensPage>>;
    /**
     * List API tokens
     */
    listTokensV1MeTokensGet(requestParameters?: ListTokensV1MeTokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokensPage>;
    /**
     * List users
     */
    listUsersV1AdminUsersGetRaw(requestParameters: ListUsersV1AdminUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUsersPage>>;
    /**
     * List users
     */
    listUsersV1AdminUsersGet(requestParameters?: ListUsersV1AdminUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUsersPage>;
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsV1AdminPostgresEnableRlsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsV1AdminPostgresEnableRlsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Postgres Prepare
     */
    postgresPrepareV1AdminPostgresPreparePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Postgres Prepare
     */
    postgresPrepareV1AdminPostgresPreparePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGet(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Remove a user from an organization
     */
    removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRaw(requestParameters: RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Remove a user from an organization
     */
    removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete(requestParameters: RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    retryAllJobsV1JobsRetryAllPostRaw(requestParameters: RetryAllJobsV1JobsRetryAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    retryAllJobsV1JobsRetryAllPost(requestParameters: RetryAllJobsV1JobsRetryAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    retryJobV1JobsJobIdRetryPostRaw(requestParameters: RetryJobV1JobsJobIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>>;
    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    retryJobV1JobsJobIdRetryPost(requestParameters: RetryJobV1JobsJobIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut>;
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters: RevokeTokenV1MeTokensTokenIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDelete(requestParameters: RevokeTokenV1MeTokensTokenIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters: RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete(requestParameters: RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Enqueue a job for immediate execution
     */
    runJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRaw(requestParameters: RunJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>>;
    /**
     * Enqueue a job for immediate execution
     */
    runJobScheduleNowV1JobSchedulesScheduleIdRunNowPost(requestParameters: RunJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut>;
    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    streamJobsV1JobsStreamGetRaw(requestParameters: StreamJobsV1JobsStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    streamJobsV1JobsStreamGet(requestParameters?: StreamJobsV1JobsStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Test Instapaper creds
     */
    testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters: TestInstapaperV1IntegrationsInstapaperTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Test Instapaper creds
     */
    testInstapaperV1IntegrationsInstapaperTestPost(requestParameters: TestInstapaperV1IntegrationsInstapaperTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Test Miniflux creds
     */
    testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters: TestMinifluxV1IntegrationsMinifluxTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Test Miniflux creds
     */
    testMinifluxV1IntegrationsMinifluxTestPost(requestParameters: TestMinifluxV1IntegrationsMinifluxTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Test site config selectors against the login page
     */
    testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters: TestSiteConfigV1SiteConfigsConfigIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Test site config selectors against the login page
     */
    testSiteConfigV1SiteConfigsConfigIdTestPost(requestParameters: TestSiteConfigV1SiteConfigsConfigIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Toggle schedule active state
     */
    toggleJobScheduleV1JobSchedulesScheduleIdTogglePostRaw(requestParameters: ToggleJobScheduleV1JobSchedulesScheduleIdTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>>;
    /**
     * Toggle schedule active state
     */
    toggleJobScheduleV1JobSchedulesScheduleIdTogglePost(requestParameters: ToggleJobScheduleV1JobSchedulesScheduleIdTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut>;
    /**
     * Update credential
     */
    updateCredentialV1V1CredentialsCredIdPutRaw(requestParameters: UpdateCredentialV1V1CredentialsCredIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>>;
    /**
     * Update credential
     */
    updateCredentialV1V1CredentialsCredIdPut(requestParameters: UpdateCredentialV1V1CredentialsCredIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential>;
    /**
     * Update feed
     */
    updateFeedV1V1FeedsFeedIdPutRaw(requestParameters: UpdateFeedV1V1FeedsFeedIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedOut>>;
    /**
     * Update feed
     */
    updateFeedV1V1FeedsFeedIdPut(requestParameters: UpdateFeedV1V1FeedsFeedIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedOut>;
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>>;
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPut(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut>;
    /**
     * Update a job schedule
     */
    updateJobScheduleV1JobSchedulesScheduleIdPatchRaw(requestParameters: UpdateJobScheduleV1JobSchedulesScheduleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>>;
    /**
     * Update a job schedule
     */
    updateJobScheduleV1JobSchedulesScheduleIdPatch(requestParameters: UpdateJobScheduleV1JobSchedulesScheduleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut>;
    /**
     * Update current user profile
     */
    updateMeV1MePatchRaw(requestParameters: UpdateMeV1MePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeOut>>;
    /**
     * Update current user profile
     */
    updateMeV1MePatch(requestParameters: UpdateMeV1MePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeOut>;
    /**
     * Update an organization
     */
    updateOrganizationV1AdminOrgsOrganizationIdPatchRaw(requestParameters: UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Update an organization
     */
    updateOrganizationV1AdminOrgsOrganizationIdPatch(requestParameters: UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters: UpdateRoleV1AdminRolesRoleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>>;
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatch(requestParameters: UpdateRoleV1AdminRolesRoleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail>;
    /**
     * Update a site config
     */
    updateSiteConfigV1V1SiteConfigsConfigIdPutRaw(requestParameters: UpdateSiteConfigV1V1SiteConfigsConfigIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>>;
    /**
     * Update a site config
     */
    updateSiteConfigV1V1SiteConfigsConfigIdPut(requestParameters: UpdateSiteConfigV1V1SiteConfigsConfigIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any>;
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPutRaw(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>>;
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPut(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut>;
    /**
     * Update user role overrides
     */
    updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRaw(requestParameters: UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Update user role overrides
     */
    updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch(requestParameters: UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatchRaw(requestParameters: UpdateUserV1AdminUsersUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatch(requestParameters: UpdateUserV1AdminUsersUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Partially update the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePatchRaw(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteWelcomeSettingOut>>;
    /**
     * Partially update the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePatch(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteWelcomeSettingOut>;
    /**
     * Create or replace the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePutRaw(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteWelcomeSettingOut>>;
    /**
     * Create or replace the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePut(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteWelcomeSettingOut>;
    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    validateJobPayloadV1JobsValidatePostRaw(requestParameters: ValidateJobPayloadV1JobsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    validateJobPayloadV1JobsValidatePost(requestParameters: ValidateJobPayloadV1JobsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
}
