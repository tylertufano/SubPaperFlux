"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeedsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class FeedsApi extends runtime.BaseAPI {
    /**
     * Create Feed
     */
    createFeedFeedsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['feed'] == null) {
                throw new runtime.RequiredError('feed', 'Required parameter "feed" was null or undefined when calling createFeedFeedsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/feeds/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FeedToJSON)(requestParameters['feed']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FeedFromJSON)(jsonValue));
        });
    }
    /**
     * Create Feed
     */
    createFeedFeedsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createFeedFeedsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Feed
     */
    deleteFeedFeedsFeedIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['feedId'] == null) {
                throw new runtime.RequiredError('feedId', 'Required parameter "feedId" was null or undefined when calling deleteFeedFeedsFeedIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/feeds/{feed_id}`;
            urlPath = urlPath.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters['feedId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Feed
     */
    deleteFeedFeedsFeedIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteFeedFeedsFeedIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * List Feeds
     */
    listFeedsFeedsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/feeds/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.FeedFromJSON));
        });
    }
    /**
     * List Feeds
     */
    listFeedsFeedsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFeedsFeedsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Feeds
     */
    listFeedsFeedsGet_1Raw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/feeds`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.FeedFromJSON));
        });
    }
    /**
     * List Feeds
     */
    listFeedsFeedsGet_1(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFeedsFeedsGet_1Raw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Feed
     */
    updateFeedFeedsFeedIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['feedId'] == null) {
                throw new runtime.RequiredError('feedId', 'Required parameter "feedId" was null or undefined when calling updateFeedFeedsFeedIdPut().');
            }
            if (requestParameters['feed'] == null) {
                throw new runtime.RequiredError('feed', 'Required parameter "feed" was null or undefined when calling updateFeedFeedsFeedIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/feeds/{feed_id}`;
            urlPath = urlPath.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters['feedId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FeedToJSON)(requestParameters['feed']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FeedFromJSON)(jsonValue));
        });
    }
    /**
     * Update Feed
     */
    updateFeedFeedsFeedIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateFeedFeedsFeedIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.FeedsApi = FeedsApi;
