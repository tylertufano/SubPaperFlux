"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.BookmarksApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class BookmarksApi extends runtime.BaseAPI {
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksBookmarksBulkDeletePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksBookmarksBulkDeletePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/bulk-delete`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksBookmarksBulkDeletePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.bulkDeleteBookmarksBookmarksBulkDeletePostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-delete`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksBookmarksBulkPublishPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksBookmarksBulkPublishPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/bulk-publish`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksBookmarksBulkPublishPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkPublishBookmarksBookmarksBulkPublishPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-publish`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Update Bookmark Folders
     */
    bulkUpdateBookmarkFoldersBookmarksBulkFoldersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bulkBookmarkFolderUpdate'] == null) {
                throw new runtime.RequiredError('bulkBookmarkFolderUpdate', 'Required parameter "bulkBookmarkFolderUpdate" was null or undefined when calling bulkUpdateBookmarkFoldersBookmarksBulkFoldersPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/bulk-folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BulkBookmarkFolderUpdateToJSON)(requestParameters['bulkBookmarkFolderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.BookmarkFolderSummaryFromJSON));
        });
    }
    /**
     * Bulk Update Bookmark Folders
     */
    bulkUpdateBookmarkFoldersBookmarksBulkFoldersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkUpdateBookmarkFoldersBookmarksBulkFoldersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Update Bookmark Folders
     */
    bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bulkBookmarkFolderUpdate'] == null) {
                throw new runtime.RequiredError('bulkBookmarkFolderUpdate', 'Required parameter "bulkBookmarkFolderUpdate" was null or undefined when calling bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BulkBookmarkFolderUpdateToJSON)(requestParameters['bulkBookmarkFolderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.BookmarkFolderSummaryFromJSON));
        });
    }
    /**
     * Bulk Update Bookmark Folders
     */
    bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Update Bookmark Tags
     */
    bulkUpdateBookmarkTagsBookmarksBulkTagsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bulkBookmarkTagUpdate'] == null) {
                throw new runtime.RequiredError('bulkBookmarkTagUpdate', 'Required parameter "bulkBookmarkTagUpdate" was null or undefined when calling bulkUpdateBookmarkTagsBookmarksBulkTagsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/bulk-tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BulkBookmarkTagUpdateToJSON)(requestParameters['bulkBookmarkTagUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.BookmarkTagSummaryFromJSON));
        });
    }
    /**
     * Bulk Update Bookmark Tags
     */
    bulkUpdateBookmarkTagsBookmarksBulkTagsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkUpdateBookmarkTagsBookmarksBulkTagsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Update Bookmark Tags
     */
    bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bulkBookmarkTagUpdate'] == null) {
                throw new runtime.RequiredError('bulkBookmarkTagUpdate', 'Required parameter "bulkBookmarkTagUpdate" was null or undefined when calling bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BulkBookmarkTagUpdateToJSON)(requestParameters['bulkBookmarkTagUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.BookmarkTagSummaryFromJSON));
        });
    }
    /**
     * Bulk Update Bookmark Tags
     */
    bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksBookmarksCountGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/count`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksBookmarksCountGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.countBookmarksBookmarksCountGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/count`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Folder
     */
    createFolderBookmarksFoldersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderCreate'] == null) {
                throw new runtime.RequiredError('folderCreate', 'Required parameter "folderCreate" was null or undefined when calling createFolderBookmarksFoldersPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolderCreateToJSON)(requestParameters['folderCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Create Folder
     */
    createFolderBookmarksFoldersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createFolderBookmarksFoldersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderCreate'] == null) {
                throw new runtime.RequiredError('folderCreate', 'Required parameter "folderCreate" was null or undefined when calling createFolderV1BookmarksFoldersPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolderCreateToJSON)(requestParameters['folderCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Tag
     */
    createTagBookmarksTagsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagCreate'] == null) {
                throw new runtime.RequiredError('tagCreate', 'Required parameter "tagCreate" was null or undefined when calling createTagBookmarksTagsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TagCreateToJSON)(requestParameters['tagCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TagOutFromJSON)(jsonValue));
        });
    }
    /**
     * Create Tag
     */
    createTagBookmarksTagsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTagBookmarksTagsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagCreate'] == null) {
                throw new runtime.RequiredError('tagCreate', 'Required parameter "tagCreate" was null or undefined when calling createTagV1BookmarksTagsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TagCreateToJSON)(requestParameters['tagCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TagOutFromJSON)(jsonValue));
        });
    }
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkBookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkBookmarksBookmarkIdDelete().');
            }
            const queryParameters = {};
            if (requestParameters['deleteRemote'] != null) {
                queryParameters['delete_remote'] = requestParameters['deleteRemote'];
            }
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkBookmarksBookmarkIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBookmarkBookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Bookmark Folder
     */
    deleteBookmarkFolderBookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkFolderBookmarksBookmarkIdFolderDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Bookmark Folder
     */
    deleteBookmarkFolderBookmarksBookmarkIdFolderDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBookmarkFolderBookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Bookmark Folder
     */
    deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Bookmark Folder
     */
    deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete().');
            }
            const queryParameters = {};
            if (requestParameters['deleteRemote'] != null) {
                queryParameters['delete_remote'] = requestParameters['deleteRemote'];
            }
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderBookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderId'] == null) {
                throw new runtime.RequiredError('folderId', 'Required parameter "folderId" was null or undefined when calling deleteFolderBookmarksFoldersFolderIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/folders/{folder_id}`;
            urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderBookmarksFoldersFolderIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteFolderBookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderId'] == null) {
                throw new runtime.RequiredError('folderId', 'Required parameter "folderId" was null or undefined when calling deleteFolderV1BookmarksFoldersFolderIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders/{folder_id}`;
            urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagBookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagId'] == null) {
                throw new runtime.RequiredError('tagId', 'Required parameter "tagId" was null or undefined when calling deleteTagBookmarksTagsTagIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/tags/{tag_id}`;
            urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagBookmarksTagsTagIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTagBookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagId'] == null) {
                throw new runtime.RequiredError('tagId', 'Required parameter "tagId" was null or undefined when calling deleteTagV1BookmarksTagsTagIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags/{tag_id}`;
            urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksBookmarksExportGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['format'] != null) {
                queryParameters['format'] = requestParameters['format'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/export`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksBookmarksExportGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.exportBookmarksBookmarksExportGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['format'] != null) {
                queryParameters['format'] = requestParameters['format'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/export`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkBookmarksBookmarkIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkBookmarksBookmarkIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarkOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkBookmarksBookmarkIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkBookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark Folder
     */
    getBookmarkFolderBookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkFolderBookmarksBookmarkIdFolderGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get Bookmark Folder
     */
    getBookmarkFolderBookmarksBookmarkIdFolderGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkFolderBookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark Folder
     */
    getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkFolderV1BookmarksBookmarkIdFolderGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get Bookmark Folder
     */
    getBookmarkFolderV1BookmarksBookmarkIdFolderGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark Tags
     */
    getBookmarkTagsBookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkTagsBookmarksBookmarkIdTagsGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}/tags`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * Get Bookmark Tags
     */
    getBookmarkTagsBookmarksBookmarkIdTagsGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkTagsBookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark Tags
     */
    getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkTagsV1BookmarksBookmarkIdTagsGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * Get Bookmark Tags
     */
    getBookmarkTagsV1BookmarksBookmarkIdTagsGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarkOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksBookmarksHeadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/`;
            const response = yield this.request({
                path: urlPath,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksBookmarksHead() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.headBookmarksBookmarksHeadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksBookmarksHead_1Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks`;
            const response = yield this.request({
                path: urlPath,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksBookmarksHead_1() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.headBookmarksBookmarksHead_1Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/`;
            const response = yield this.request({
                path: urlPath,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks`;
            const response = yield this.request({
                path: urlPath,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_2() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.headBookmarksV1BookmarksHead_2Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksBookmarksGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarksPageFromJSON)(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksBookmarksGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listBookmarksBookmarksGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksBookmarksGet_3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarksPageFromJSON)(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksBookmarksGet_3() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listBookmarksBookmarksGet_3Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarksPageFromJSON)(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_4Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarksPageFromJSON)(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_4() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listBookmarksV1BookmarksGet_4Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Folders
     */
    listFoldersBookmarksFoldersGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.FolderOutFromJSON));
        });
    }
    /**
     * List Folders
     */
    listFoldersBookmarksFoldersGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFoldersBookmarksFoldersGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.FolderOutFromJSON));
        });
    }
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFoldersV1BookmarksFoldersGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Tags
     */
    listTagsBookmarksTagsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * List Tags
     */
    listTagsBookmarksTagsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTagsBookmarksTagsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTagsV1BookmarksTagsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkBookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling previewBookmarkBookmarksBookmarkIdPreviewGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}/preview`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkBookmarksBookmarkIdPreviewGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.previewBookmarkBookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling previewBookmarkV1BookmarksBookmarkIdPreviewGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/preview`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Bookmark Folder
     */
    updateBookmarkFolderBookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkFolderBookmarksBookmarkIdFolderPut().');
            }
            if (requestParameters['bookmarkFolderUpdate'] == null) {
                throw new runtime.RequiredError('bookmarkFolderUpdate', 'Required parameter "bookmarkFolderUpdate" was null or undefined when calling updateBookmarkFolderBookmarksBookmarkIdFolderPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BookmarkFolderUpdateToJSON)(requestParameters['bookmarkFolderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Bookmark Folder
     */
    updateBookmarkFolderBookmarksBookmarkIdFolderPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateBookmarkFolderBookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Bookmark Folder
     */
    updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().');
            }
            if (requestParameters['bookmarkFolderUpdate'] == null) {
                throw new runtime.RequiredError('bookmarkFolderUpdate', 'Required parameter "bookmarkFolderUpdate" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BookmarkFolderUpdateToJSON)(requestParameters['bookmarkFolderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Bookmark Folder
     */
    updateBookmarkFolderV1BookmarksBookmarkIdFolderPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Bookmark Tags
     */
    updateBookmarkTagsBookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkTagsBookmarksBookmarkIdTagsPut().');
            }
            if (requestParameters['bookmarkTagsUpdate'] == null) {
                throw new runtime.RequiredError('bookmarkTagsUpdate', 'Required parameter "bookmarkTagsUpdate" was null or undefined when calling updateBookmarkTagsBookmarksBookmarkIdTagsPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/{bookmark_id}/tags`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BookmarkTagsUpdateToJSON)(requestParameters['bookmarkTagsUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * Update Bookmark Tags
     */
    updateBookmarkTagsBookmarksBookmarkIdTagsPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateBookmarkTagsBookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Bookmark Tags
     */
    updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().');
            }
            if (requestParameters['bookmarkTagsUpdate'] == null) {
                throw new runtime.RequiredError('bookmarkTagsUpdate', 'Required parameter "bookmarkTagsUpdate" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BookmarkTagsUpdateToJSON)(requestParameters['bookmarkTagsUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * Update Bookmark Tags
     */
    updateBookmarkTagsV1BookmarksBookmarkIdTagsPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Folder
     */
    updateFolderBookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderId'] == null) {
                throw new runtime.RequiredError('folderId', 'Required parameter "folderId" was null or undefined when calling updateFolderBookmarksFoldersFolderIdPut().');
            }
            if (requestParameters['folderUpdate'] == null) {
                throw new runtime.RequiredError('folderUpdate', 'Required parameter "folderUpdate" was null or undefined when calling updateFolderBookmarksFoldersFolderIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/folders/{folder_id}`;
            urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolderUpdateToJSON)(requestParameters['folderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Folder
     */
    updateFolderBookmarksFoldersFolderIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateFolderBookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderId'] == null) {
                throw new runtime.RequiredError('folderId', 'Required parameter "folderId" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().');
            }
            if (requestParameters['folderUpdate'] == null) {
                throw new runtime.RequiredError('folderUpdate', 'Required parameter "folderUpdate" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders/{folder_id}`;
            urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolderUpdateToJSON)(requestParameters['folderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Tag
     */
    updateTagBookmarksTagsTagIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagId'] == null) {
                throw new runtime.RequiredError('tagId', 'Required parameter "tagId" was null or undefined when calling updateTagBookmarksTagsTagIdPut().');
            }
            if (requestParameters['tagUpdate'] == null) {
                throw new runtime.RequiredError('tagUpdate', 'Required parameter "tagUpdate" was null or undefined when calling updateTagBookmarksTagsTagIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/bookmarks/tags/{tag_id}`;
            urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TagUpdateToJSON)(requestParameters['tagUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TagOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Tag
     */
    updateTagBookmarksTagsTagIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateTagBookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagId'] == null) {
                throw new runtime.RequiredError('tagId', 'Required parameter "tagId" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().');
            }
            if (requestParameters['tagUpdate'] == null) {
                throw new runtime.RequiredError('tagUpdate', 'Required parameter "tagUpdate" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags/{tag_id}`;
            urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TagUpdateToJSON)(requestParameters['tagUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TagOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.BookmarksApi = BookmarksApi;
