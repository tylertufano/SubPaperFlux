/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AdminRoleCreateToJSON, AdminRoleDetailFromJSON, AdminRoleUpdateToJSON, AdminRolesPageFromJSON, AdminUserOutFromJSON, AdminUserUpdateToJSON, AdminUsersPageFromJSON, AuditLogsPageFromJSON, RoleGrantRequestToJSON, } from '../models/index';
/**
 *
 */
export class AdminApi extends runtime.BaseAPI {
    /**
     * Create a role
     */
    createRoleV1AdminRolesPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['adminRoleCreate'] == null) {
                throw new runtime.RequiredError('adminRoleCreate', 'Required parameter "adminRoleCreate" was null or undefined when calling createRoleV1AdminRolesPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AdminRoleCreateToJSON(requestParameters['adminRoleCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
        });
    }
    /**
     * Create a role
     */
    createRoleV1AdminRolesPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRoleV1AdminRolesPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new runtime.RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling deleteRoleV1AdminRolesRoleIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles/{role_id}`;
            urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new runtime.RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling getRoleV1AdminRolesRoleIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles/{role_id}`;
            urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
        });
    }
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoleV1AdminRolesRoleIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling getUserV1AdminUsersUserIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserV1AdminUsersUserIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost().');
            }
            if (requestParameters['roleName'] == null) {
                throw new runtime.RequiredError('roleName', 'Required parameter "roleName" was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}/roles/{role_name}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            urlPath = urlPath.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: RoleGrantRequestToJSON(requestParameters['roleGrantRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['entityType'] != null) {
                queryParameters['entity_type'] = requestParameters['entityType'];
            }
            if (requestParameters['entityId'] != null) {
                queryParameters['entity_id'] = requestParameters['entityId'];
            }
            if (requestParameters['action'] != null) {
                queryParameters['action'] = requestParameters['action'];
            }
            if (requestParameters['ownerUserId'] != null) {
                queryParameters['owner_user_id'] = requestParameters['ownerUserId'];
            }
            if (requestParameters['actorUserId'] != null) {
                queryParameters['actor_user_id'] = requestParameters['actorUserId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'].toISOString();
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'].toISOString();
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/admin/audit/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listAuditLogsAdminAuditGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGet_1Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['entityType'] != null) {
                queryParameters['entity_type'] = requestParameters['entityType'];
            }
            if (requestParameters['entityId'] != null) {
                queryParameters['entity_id'] = requestParameters['entityId'];
            }
            if (requestParameters['action'] != null) {
                queryParameters['action'] = requestParameters['action'];
            }
            if (requestParameters['ownerUserId'] != null) {
                queryParameters['owner_user_id'] = requestParameters['ownerUserId'];
            }
            if (requestParameters['actorUserId'] != null) {
                queryParameters['actor_user_id'] = requestParameters['actorUserId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'].toISOString();
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'].toISOString();
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/admin/audit`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGet_1() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listAuditLogsAdminAuditGet_1Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['entityType'] != null) {
                queryParameters['entity_type'] = requestParameters['entityType'];
            }
            if (requestParameters['entityId'] != null) {
                queryParameters['entity_id'] = requestParameters['entityId'];
            }
            if (requestParameters['action'] != null) {
                queryParameters['action'] = requestParameters['action'];
            }
            if (requestParameters['ownerUserId'] != null) {
                queryParameters['owner_user_id'] = requestParameters['ownerUserId'];
            }
            if (requestParameters['actorUserId'] != null) {
                queryParameters['actor_user_id'] = requestParameters['actorUserId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'].toISOString();
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'].toISOString();
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/audit`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listAuditLogsV1AdminAuditGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List roles
     */
    listRolesV1AdminRolesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRolesPageFromJSON(jsonValue));
        });
    }
    /**
     * List roles
     */
    listRolesV1AdminRolesGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listRolesV1AdminRolesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List users
     */
    listUsersV1AdminUsersGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['isActive'] != null) {
                queryParameters['is_active'] = requestParameters['isActive'];
            }
            if (requestParameters['role'] != null) {
                queryParameters['role'] = requestParameters['role'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUsersPageFromJSON(jsonValue));
        });
    }
    /**
     * List users
     */
    listUsersV1AdminUsersGet() {
        return __awaiter(this, arguments, void 0, function* (requestParameters = {}, initOverrides) {
            const response = yield this.listUsersV1AdminUsersGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsAdminPostgresEnableRlsPostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/admin/postgres/enable-rls`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsAdminPostgresEnableRlsPost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postgresEnableRlsAdminPostgresEnableRlsPostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Postgres Prepare
     */
    postgresPrepareAdminPostgresPreparePostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/admin/postgres/prepare`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Postgres Prepare
     */
    postgresPrepareAdminPostgresPreparePost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postgresPrepareAdminPostgresPreparePostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete().');
            }
            if (requestParameters['roleName'] == null) {
                throw new runtime.RequiredError('roleName', 'Required parameter "roleName" was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete().');
            }
            const queryParameters = {};
            if (requestParameters['confirm'] != null) {
                queryParameters['confirm'] = requestParameters['confirm'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}/roles/{role_name}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            urlPath = urlPath.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new runtime.RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch().');
            }
            if (requestParameters['adminRoleUpdate'] == null) {
                throw new runtime.RequiredError('adminRoleUpdate', 'Required parameter "adminRoleUpdate" was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles/{role_id}`;
            urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: AdminRoleUpdateToJSON(requestParameters['adminRoleUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
        });
    }
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling updateUserV1AdminUsersUserIdPatch().');
            }
            if (requestParameters['adminUserUpdate'] == null) {
                throw new runtime.RequiredError('adminUserUpdate', 'Required parameter "adminUserUpdate" was null or undefined when calling updateUserV1AdminUsersUserIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: AdminUserUpdateToJSON(requestParameters['adminUserUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserV1AdminUsersUserIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
