/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { AdminOrganizationCreateToJSON, AdminOrganizationDetailFromJSON, AdminOrganizationMembershipChangeToJSON, AdminOrganizationUpdateToJSON, AdminOrganizationsPageFromJSON, AdminRoleCreateToJSON, AdminRoleDetailFromJSON, AdminRoleUpdateToJSON, AdminRolesPageFromJSON, AdminUserOutFromJSON, AdminUserRoleOverridesUpdateToJSON, AdminUserUpdateToJSON, AdminUsersPageFromJSON, ApiTokenCreateToJSON, ApiTokenOutFromJSON, ApiTokenWithSecretFromJSON, ApiTokensPageFromJSON, AuditLogsPageFromJSON, BookmarkOutFromJSON, BookmarksPageFromJSON, CredentialFromJSON, CredentialToJSON, CredentialsPageFromJSON, FeedToJSON, FeedOutFromJSON, FeedsPageFromJSON, FolderCreateToJSON, FolderOutFromJSON, FolderUpdateToJSON, InstapaperLoginRequestToJSON, JobOutFromJSON, JobRequestToJSON, JobScheduleCreateToJSON, JobScheduleOutFromJSON, JobScheduleUpdateToJSON, JobSchedulesPageFromJSON, JobsPageFromJSON, MeOutFromJSON, MeUpdateToJSON, SiteConfigsPageFromJSON, SiteWelcomeSettingOutFromJSON, StatusResponseFromJSON, TagCreateToJSON, TagOutFromJSON, TagUpdateToJSON, TemplateListResponseFromJSON, } from '../models';
/**
 *
 */
export class V1Api extends runtime.BaseAPI {
    /**
     * Add a user to an organization
     */
    addOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost.');
            }
            if (requestParameters.adminOrganizationMembershipChange === null || requestParameters.adminOrganizationMembershipChange === undefined) {
                throw new runtime.RequiredError('adminOrganizationMembershipChange', 'Required parameter requestParameters.adminOrganizationMembershipChange was null or undefined when calling addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/orgs/{organization_id}/members`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AdminOrganizationMembershipChangeToJSON(requestParameters.adminOrganizationMembershipChange),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
        });
    }
    /**
     * Add a user to an organization
     */
    addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.addOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/bulk-delete`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/bulk-publish`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Clear user role overrides
     */
    clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/users/{user_id}/role-overrides`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Clear user role overrides
     */
    clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy Credential
     */
    copyCredentialV1CredentialsCredIdCopyPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credId === null || requestParameters.credId === undefined) {
                throw new runtime.RequiredError('credId', 'Required parameter requestParameters.credId was null or undefined when calling copyCredentialV1CredentialsCredIdCopyPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/credentials/{cred_id}/copy`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Copy Credential
     */
    copyCredentialV1CredentialsCredIdCopyPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copyCredentialV1CredentialsCredIdCopyPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Copy Site Config V1
     */
    copySiteConfigV1V1SiteConfigsConfigIdCopyPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.configId === null || requestParameters.configId === undefined) {
                throw new runtime.RequiredError('configId', 'Required parameter requestParameters.configId was null or undefined when calling copySiteConfigV1V1SiteConfigsConfigIdCopyPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-configs/{config_id}/copy`.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters.configId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Copy Site Config V1
     */
    copySiteConfigV1V1SiteConfigsConfigIdCopyPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.copySiteConfigV1V1SiteConfigsConfigIdCopyPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.feedId !== undefined) {
                queryParameters['feed_id'] = requestParameters.feedId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.titleQuery !== undefined) {
                queryParameters['title_query'] = requestParameters.titleQuery;
            }
            if (requestParameters.urlQuery !== undefined) {
                queryParameters['url_query'] = requestParameters.urlQuery;
            }
            if (requestParameters.regex !== undefined) {
                queryParameters['regex'] = requestParameters.regex;
            }
            if (requestParameters.regexTarget !== undefined) {
                queryParameters['regex_target'] = requestParameters.regexTarget;
            }
            if (requestParameters.regexFlags !== undefined) {
                queryParameters['regex_flags'] = requestParameters.regexFlags;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/count`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create credential
     */
    createCredentialV1V1CredentialsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credential === null || requestParameters.credential === undefined) {
                throw new runtime.RequiredError('credential', 'Required parameter requestParameters.credential was null or undefined when calling createCredentialV1V1CredentialsPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/credentials`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CredentialToJSON(requestParameters.credential),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Create credential
     */
    createCredentialV1V1CredentialsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCredentialV1V1CredentialsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create feed
     */
    createFeedV1V1FeedsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.feed === null || requestParameters.feed === undefined) {
                throw new runtime.RequiredError('feed', 'Required parameter requestParameters.feed was null or undefined when calling createFeedV1V1FeedsPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/feeds`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: FeedToJSON(requestParameters.feed),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FeedOutFromJSON(jsonValue));
        });
    }
    /**
     * Create feed
     */
    createFeedV1V1FeedsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createFeedV1V1FeedsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folderCreate === null || requestParameters.folderCreate === undefined) {
                throw new runtime.RequiredError('folderCreate', 'Required parameter requestParameters.folderCreate was null or undefined when calling createFolderV1BookmarksFoldersPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/folders`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: FolderCreateToJSON(requestParameters.folderCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
        });
    }
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Instapaper credential via login
     */
    createInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.instapaperLoginRequest === null || requestParameters.instapaperLoginRequest === undefined) {
                throw new runtime.RequiredError('instapaperLoginRequest', 'Required parameter requestParameters.instapaperLoginRequest was null or undefined when calling createInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/credentials/instapaper/login`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InstapaperLoginRequestToJSON(requestParameters.instapaperLoginRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Create Instapaper credential via login
     */
    createInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createInstapaperCredentialFromLoginV1V1CredentialsInstapaperLoginPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.jobScheduleCreate === null || requestParameters.jobScheduleCreate === undefined) {
                throw new runtime.RequiredError('jobScheduleCreate', 'Required parameter requestParameters.jobScheduleCreate was null or undefined when calling createJobScheduleV1JobSchedulesPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: JobScheduleCreateToJSON(requestParameters.jobScheduleCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
        });
    }
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createJobScheduleV1JobSchedulesPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPost_1Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.jobScheduleCreate === null || requestParameters.jobScheduleCreate === undefined) {
                throw new runtime.RequiredError('jobScheduleCreate', 'Required parameter requestParameters.jobScheduleCreate was null or undefined when calling createJobScheduleV1JobSchedulesPost_1.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: JobScheduleCreateToJSON(requestParameters.jobScheduleCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
        });
    }
    /**
     * Create a job schedule
     */
    createJobScheduleV1JobSchedulesPost_1(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createJobScheduleV1JobSchedulesPost_1Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create an organization
     */
    createOrganizationV1AdminOrgsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.adminOrganizationCreate === null || requestParameters.adminOrganizationCreate === undefined) {
                throw new runtime.RequiredError('adminOrganizationCreate', 'Required parameter requestParameters.adminOrganizationCreate was null or undefined when calling createOrganizationV1AdminOrgsPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/orgs`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AdminOrganizationCreateToJSON(requestParameters.adminOrganizationCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
        });
    }
    /**
     * Create an organization
     */
    createOrganizationV1AdminOrgsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createOrganizationV1AdminOrgsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a role
     */
    createRoleV1AdminRolesPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.adminRoleCreate === null || requestParameters.adminRoleCreate === undefined) {
                throw new runtime.RequiredError('adminRoleCreate', 'Required parameter requestParameters.adminRoleCreate was null or undefined when calling createRoleV1AdminRolesPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/roles`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: AdminRoleCreateToJSON(requestParameters.adminRoleCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
        });
    }
    /**
     * Create a role
     */
    createRoleV1AdminRolesPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRoleV1AdminRolesPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a site config
     */
    createSiteConfigV1V1SiteConfigsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling createSiteConfigV1V1SiteConfigsPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-configs`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Create a site config
     */
    createSiteConfigV1V1SiteConfigsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createSiteConfigV1V1SiteConfigsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tagCreate === null || requestParameters.tagCreate === undefined) {
                throw new runtime.RequiredError('tagCreate', 'Required parameter requestParameters.tagCreate was null or undefined when calling createTagV1BookmarksTagsPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/tags`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: TagCreateToJSON(requestParameters.tagCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
        });
    }
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create an API token
     */
    createTokenV1MeTokensPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.apiTokenCreate === null || requestParameters.apiTokenCreate === undefined) {
                throw new runtime.RequiredError('apiTokenCreate', 'Required parameter requestParameters.apiTokenCreate was null or undefined when calling createTokenV1MeTokensPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ApiTokenCreateToJSON(requestParameters.apiTokenCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokenWithSecretFromJSON(jsonValue));
        });
    }
    /**
     * Create an API token
     */
    createTokenV1MeTokensPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTokenV1MeTokensPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Db Status
     */
    dbStatusV1StatusDbGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/status/db`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Db Status
     */
    dbStatusV1StatusDbGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.dbStatusV1StatusDbGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter requestParameters.bookmarkId was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete.');
            }
            const queryParameters = {};
            if (requestParameters.deleteRemote !== undefined) {
                queryParameters['delete_remote'] = requestParameters.deleteRemote;
            }
            const headerParameters = {};
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/{bookmark_id}`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete credential
     */
    deleteCredentialV1V1CredentialsCredIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credId === null || requestParameters.credId === undefined) {
                throw new runtime.RequiredError('credId', 'Required parameter requestParameters.credId was null or undefined when calling deleteCredentialV1V1CredentialsCredIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/credentials/{cred_id}`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete credential
     */
    deleteCredentialV1V1CredentialsCredIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCredentialV1V1CredentialsCredIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete feed
     */
    deleteFeedV1V1FeedsFeedIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
                throw new runtime.RequiredError('feedId', 'Required parameter requestParameters.feedId was null or undefined when calling deleteFeedV1V1FeedsFeedIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete feed
     */
    deleteFeedV1V1FeedsFeedIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteFeedV1V1FeedsFeedIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
                throw new runtime.RequiredError('folderId', 'Required parameter requestParameters.folderId was null or undefined when calling deleteFolderV1BookmarksFoldersFolderIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/folders/{folder_id}`.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters.folderId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete a job schedule
     */
    deleteJobScheduleV1JobSchedulesScheduleIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
                throw new runtime.RequiredError('scheduleId', 'Required parameter requestParameters.scheduleId was null or undefined when calling deleteJobScheduleV1JobSchedulesScheduleIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a job schedule
     */
    deleteJobScheduleV1JobSchedulesScheduleIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteJobScheduleV1JobSchedulesScheduleIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete an organization
     */
    deleteOrganizationV1AdminOrgsOrganizationIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling deleteOrganizationV1AdminOrgsOrganizationIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/orgs/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete an organization
     */
    deleteOrganizationV1AdminOrgsOrganizationIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteOrganizationV1AdminOrgsOrganizationIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
                throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling deleteRoleV1AdminRolesRoleIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete a site config
     */
    deleteSiteConfigV1V1SiteConfigsConfigIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.configId === null || requestParameters.configId === undefined) {
                throw new runtime.RequiredError('configId', 'Required parameter requestParameters.configId was null or undefined when calling deleteSiteConfigV1V1SiteConfigsConfigIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-configs/{config_id}`.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters.configId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a site config
     */
    deleteSiteConfigV1V1SiteConfigsConfigIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteSiteConfigV1V1SiteConfigsConfigIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
                throw new runtime.RequiredError('tagId', 'Required parameter requestParameters.tagId was null or undefined when calling deleteTagV1BookmarksTagsTagIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters.tagId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Download template asset
     */
    downloadTemplateV1TemplatesTemplateIdDownloadGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
                throw new runtime.RequiredError('templateId', 'Required parameter requestParameters.templateId was null or undefined when calling downloadTemplateV1TemplatesTemplateIdDownloadGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/templates/{template_id}/download`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Download template asset
     */
    downloadTemplateV1TemplatesTemplateIdDownloadGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.downloadTemplateV1TemplatesTemplateIdDownloadGetRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Enqueue Job
     */
    enqueueJobV1JobsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.jobRequest === null || requestParameters.jobRequest === undefined) {
                throw new runtime.RequiredError('jobRequest', 'Required parameter requestParameters.jobRequest was null or undefined when calling enqueueJobV1JobsPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: JobRequestToJSON(requestParameters.jobRequest),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Enqueue Job
     */
    enqueueJobV1JobsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.enqueueJobV1JobsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.format !== undefined) {
                queryParameters['format'] = requestParameters.format;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.fuzzy !== undefined) {
                queryParameters['fuzzy'] = requestParameters.fuzzy;
            }
            if (requestParameters.feedId !== undefined) {
                queryParameters['feed_id'] = requestParameters.feedId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            if (requestParameters.sortBy !== undefined) {
                queryParameters['sort_by'] = requestParameters.sortBy;
            }
            if (requestParameters.sortDir !== undefined) {
                queryParameters['sort_dir'] = requestParameters.sortDir;
            }
            if (requestParameters.titleQuery !== undefined) {
                queryParameters['title_query'] = requestParameters.titleQuery;
            }
            if (requestParameters.urlQuery !== undefined) {
                queryParameters['url_query'] = requestParameters.urlQuery;
            }
            if (requestParameters.regex !== undefined) {
                queryParameters['regex'] = requestParameters.regex;
            }
            if (requestParameters.regexTarget !== undefined) {
                queryParameters['regex_target'] = requestParameters.regexTarget;
            }
            if (requestParameters.regexFlags !== undefined) {
                queryParameters['regex_flags'] = requestParameters.regexFlags;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/export`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter requestParameters.bookmarkId was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/{bookmark_id}`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get credential
     */
    getCredentialV1V1CredentialsCredIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credId === null || requestParameters.credId === undefined) {
                throw new runtime.RequiredError('credId', 'Required parameter requestParameters.credId was null or undefined when calling getCredentialV1V1CredentialsCredIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/credentials/{cred_id}`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Get credential
     */
    getCredentialV1V1CredentialsCredIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCredentialV1V1CredentialsCredIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get feed
     */
    getFeedV1V1FeedsFeedIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
                throw new runtime.RequiredError('feedId', 'Required parameter requestParameters.feedId was null or undefined when calling getFeedV1V1FeedsFeedIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FeedOutFromJSON(jsonValue));
        });
    }
    /**
     * Get feed
     */
    getFeedV1V1FeedsFeedIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getFeedV1V1FeedsFeedIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a job schedule
     */
    getJobScheduleV1JobSchedulesScheduleIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
                throw new runtime.RequiredError('scheduleId', 'Required parameter requestParameters.scheduleId was null or undefined when calling getJobScheduleV1JobSchedulesScheduleIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
        });
    }
    /**
     * Get a job schedule
     */
    getJobScheduleV1JobSchedulesScheduleIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getJobScheduleV1JobSchedulesScheduleIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a single job by id.
     * Get job
     */
    getJobV1JobsJobIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
                throw new runtime.RequiredError('jobId', 'Required parameter requestParameters.jobId was null or undefined when calling getJobV1JobsJobIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs/{job_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
        });
    }
    /**
     * Get a single job by id.
     * Get job
     */
    getJobV1JobsJobIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getJobV1JobsJobIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get current user profile
     */
    getMeV1MeGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => MeOutFromJSON(jsonValue));
        });
    }
    /**
     * Get current user profile
     */
    getMeV1MeGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMeV1MeGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get organization details
     */
    getOrganizationV1AdminOrgsOrganizationIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling getOrganizationV1AdminOrgsOrganizationIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/orgs/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
        });
    }
    /**
     * Get organization details
     */
    getOrganizationV1AdminOrgsOrganizationIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getOrganizationV1AdminOrgsOrganizationIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
                throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling getRoleV1AdminRolesRoleIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
        });
    }
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoleV1AdminRolesRoleIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve a site config
     */
    getSiteConfigV1V1SiteConfigsConfigIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.configId === null || requestParameters.configId === undefined) {
                throw new runtime.RequiredError('configId', 'Required parameter requestParameters.configId was null or undefined when calling getSiteConfigV1V1SiteConfigsConfigIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-configs/{config_id}`.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters.configId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Retrieve a site config
     */
    getSiteConfigV1V1SiteConfigsConfigIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSiteConfigV1V1SiteConfigsConfigIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Status
     */
    getStatusV1StatusGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/status`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
        });
    }
    /**
     * Get Status
     */
    getStatusV1StatusGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStatusV1StatusGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getTokenV1MeTokensTokenIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokenOutFromJSON(jsonValue));
        });
    }
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling getUserV1AdminUsersUserIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserV1AdminUsersUserIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Retrieve the public welcome message
     */
    getWelcomeSettingV1SiteSettingsWelcomeGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/site-settings/welcome`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SiteWelcomeSettingOutFromJSON(jsonValue));
        });
    }
    /**
     * Retrieve the public welcome message
     */
    getWelcomeSettingV1SiteSettingsWelcomeGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getWelcomeSettingV1SiteSettingsWelcomeGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost.');
            }
            if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
                throw new runtime.RequiredError('roleName', 'Required parameter requestParameters.roleName was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/users/{user_id}/roles/{role_name}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters.roleName))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.feedId !== undefined) {
                queryParameters['feed_id'] = requestParameters.feedId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            if (requestParameters.titleQuery !== undefined) {
                queryParameters['title_query'] = requestParameters.titleQuery;
            }
            if (requestParameters.urlQuery !== undefined) {
                queryParameters['url_query'] = requestParameters.urlQuery;
            }
            if (requestParameters.regex !== undefined) {
                queryParameters['regex'] = requestParameters.regex;
            }
            if (requestParameters.regexTarget !== undefined) {
                queryParameters['regex_target'] = requestParameters.regexTarget;
            }
            if (requestParameters.regexFlags !== undefined) {
                queryParameters['regex_flags'] = requestParameters.regexFlags;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/`,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.feedId !== undefined) {
                queryParameters['feed_id'] = requestParameters.feedId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            if (requestParameters.titleQuery !== undefined) {
                queryParameters['title_query'] = requestParameters.titleQuery;
            }
            if (requestParameters.urlQuery !== undefined) {
                queryParameters['url_query'] = requestParameters.urlQuery;
            }
            if (requestParameters.regex !== undefined) {
                queryParameters['regex'] = requestParameters.regex;
            }
            if (requestParameters.regexTarget !== undefined) {
                queryParameters['regex_target'] = requestParameters.regexTarget;
            }
            if (requestParameters.regexFlags !== undefined) {
                queryParameters['regex_flags'] = requestParameters.regexFlags;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks`,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_2(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.headBookmarksV1BookmarksHead_2Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Integrations Status
     */
    integrationsStatusV1StatusIntegrationsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.instapaperCredId !== undefined) {
                queryParameters['instapaper_cred_id'] = requestParameters.instapaperCredId;
            }
            if (requestParameters.minifluxCredId !== undefined) {
                queryParameters['miniflux_cred_id'] = requestParameters.minifluxCredId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/status/integrations`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Integrations Status
     */
    integrationsStatusV1StatusIntegrationsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.integrationsStatusV1StatusIntegrationsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.entityType !== undefined) {
                queryParameters['entity_type'] = requestParameters.entityType;
            }
            if (requestParameters.entityId !== undefined) {
                queryParameters['entity_id'] = requestParameters.entityId;
            }
            if (requestParameters.action !== undefined) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.ownerUserId !== undefined) {
                queryParameters['owner_user_id'] = requestParameters.ownerUserId;
            }
            if (requestParameters.actorUserId !== undefined) {
                queryParameters['actor_user_id'] = requestParameters.actorUserId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/audit/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listAuditLogsV1AdminAuditGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet_3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.entityType !== undefined) {
                queryParameters['entity_type'] = requestParameters.entityType;
            }
            if (requestParameters.entityId !== undefined) {
                queryParameters['entity_id'] = requestParameters.entityId;
            }
            if (requestParameters.action !== undefined) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.ownerUserId !== undefined) {
                queryParameters['owner_user_id'] = requestParameters.ownerUserId;
            }
            if (requestParameters.actorUserId !== undefined) {
                queryParameters['actor_user_id'] = requestParameters.actorUserId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/audit`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet_3(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listAuditLogsV1AdminAuditGet_3Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.fuzzy !== undefined) {
                queryParameters['fuzzy'] = requestParameters.fuzzy;
            }
            if (requestParameters.feedId !== undefined) {
                queryParameters['feed_id'] = requestParameters.feedId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            if (requestParameters.sortBy !== undefined) {
                queryParameters['sort_by'] = requestParameters.sortBy;
            }
            if (requestParameters.sortDir !== undefined) {
                queryParameters['sort_dir'] = requestParameters.sortDir;
            }
            if (requestParameters.titleQuery !== undefined) {
                queryParameters['title_query'] = requestParameters.titleQuery;
            }
            if (requestParameters.urlQuery !== undefined) {
                queryParameters['url_query'] = requestParameters.urlQuery;
            }
            if (requestParameters.regex !== undefined) {
                queryParameters['regex'] = requestParameters.regex;
            }
            if (requestParameters.regexTarget !== undefined) {
                queryParameters['regex_target'] = requestParameters.regexTarget;
            }
            if (requestParameters.regexFlags !== undefined) {
                queryParameters['regex_flags'] = requestParameters.regexFlags;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_4Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.fuzzy !== undefined) {
                queryParameters['fuzzy'] = requestParameters.fuzzy;
            }
            if (requestParameters.feedId !== undefined) {
                queryParameters['feed_id'] = requestParameters.feedId;
            }
            if (requestParameters.since !== undefined) {
                queryParameters['since'] = requestParameters.since;
            }
            if (requestParameters.until !== undefined) {
                queryParameters['until'] = requestParameters.until;
            }
            if (requestParameters.sortBy !== undefined) {
                queryParameters['sort_by'] = requestParameters.sortBy;
            }
            if (requestParameters.sortDir !== undefined) {
                queryParameters['sort_dir'] = requestParameters.sortDir;
            }
            if (requestParameters.titleQuery !== undefined) {
                queryParameters['title_query'] = requestParameters.titleQuery;
            }
            if (requestParameters.urlQuery !== undefined) {
                queryParameters['url_query'] = requestParameters.urlQuery;
            }
            if (requestParameters.regex !== undefined) {
                queryParameters['regex'] = requestParameters.regex;
            }
            if (requestParameters.regexTarget !== undefined) {
                queryParameters['regex_target'] = requestParameters.regexTarget;
            }
            if (requestParameters.regexFlags !== undefined) {
                queryParameters['regex_flags'] = requestParameters.regexFlags;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_4(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listBookmarksV1BookmarksGet_4Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.includeGlobal !== undefined) {
                queryParameters['include_global'] = requestParameters.includeGlobal;
            }
            if (requestParameters.kind !== undefined) {
                queryParameters['kind'] = requestParameters.kind;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/credentials`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialsPageFromJSON(jsonValue));
        });
    }
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listCredentialsV1V1CredentialsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.ownerUserIds !== undefined) {
                queryParameters['owner_user_ids'] = requestParameters.ownerUserIds;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/feeds`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FeedsPageFromJSON(jsonValue));
        });
    }
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFeedsV1V1FeedsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/folders`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFoldersV1BookmarksFoldersGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.ownerUserId !== undefined) {
                queryParameters['owner_user_id'] = requestParameters.ownerUserId;
            }
            if (requestParameters.jobType !== undefined) {
                queryParameters['job_type'] = requestParameters.jobType;
            }
            if (requestParameters.isActive !== undefined) {
                queryParameters['is_active'] = requestParameters.isActive;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobSchedulesPageFromJSON(jsonValue));
        });
    }
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listJobSchedulesV1JobSchedulesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGet_5Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.ownerUserId !== undefined) {
                queryParameters['owner_user_id'] = requestParameters.ownerUserId;
            }
            if (requestParameters.jobType !== undefined) {
                queryParameters['job_type'] = requestParameters.jobType;
            }
            if (requestParameters.isActive !== undefined) {
                queryParameters['is_active'] = requestParameters.isActive;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobSchedulesPageFromJSON(jsonValue));
        });
    }
    /**
     * List job schedules
     */
    listJobSchedulesV1JobSchedulesGet_5(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listJobSchedulesV1JobSchedulesGet_5Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.jobType !== undefined) {
                queryParameters['job_type'] = requestParameters.jobType;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.orderBy !== undefined) {
                queryParameters['order_by'] = requestParameters.orderBy;
            }
            if (requestParameters.orderDir !== undefined) {
                queryParameters['order_dir'] = requestParameters.orderDir;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobsPageFromJSON(jsonValue));
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listJobsV1JobsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet_6Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.jobType !== undefined) {
                queryParameters['job_type'] = requestParameters.jobType;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.orderBy !== undefined) {
                queryParameters['order_by'] = requestParameters.orderBy;
            }
            if (requestParameters.orderDir !== undefined) {
                queryParameters['order_dir'] = requestParameters.orderDir;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobsPageFromJSON(jsonValue));
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet_6(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listJobsV1JobsGet_6Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List organizations
     */
    listOrganizationsV1AdminOrgsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.isDefault !== undefined) {
                queryParameters['is_default'] = requestParameters.isDefault;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/orgs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationsPageFromJSON(jsonValue));
        });
    }
    /**
     * List organizations
     */
    listOrganizationsV1AdminOrgsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listOrganizationsV1AdminOrgsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List roles
     */
    listRolesV1AdminRolesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/roles`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRolesPageFromJSON(jsonValue));
        });
    }
    /**
     * List roles
     */
    listRolesV1AdminRolesGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRolesV1AdminRolesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List site configs
     */
    listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.includeGlobal !== undefined) {
                queryParameters['include_global'] = requestParameters.includeGlobal;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-configs`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SiteConfigsPageFromJSON(jsonValue));
        });
    }
    /**
     * List site configs
     */
    listSiteConfigsV1V1SiteConfigsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/tags`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTagsV1BookmarksTagsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List available templates
     */
    listTemplatesV1TemplatesGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/v1/templates`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TemplateListResponseFromJSON(jsonValue));
        });
    }
    /**
     * List available templates
     */
    listTemplatesV1TemplatesGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTemplatesV1TemplatesGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List API tokens
     */
    listTokensV1MeTokensGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.includeRevoked !== undefined) {
                queryParameters['include_revoked'] = requestParameters.includeRevoked;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokensPageFromJSON(jsonValue));
        });
    }
    /**
     * List API tokens
     */
    listTokensV1MeTokensGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTokensV1MeTokensGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List users
     */
    listUsersV1AdminUsersGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.isActive !== undefined) {
                queryParameters['is_active'] = requestParameters.isActive;
            }
            if (requestParameters.role !== undefined) {
                queryParameters['role'] = requestParameters.role;
            }
            if (requestParameters.organizationId !== undefined) {
                queryParameters['organization_id'] = requestParameters.organizationId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/users`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUsersPageFromJSON(jsonValue));
        });
    }
    /**
     * List users
     */
    listUsersV1AdminUsersGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listUsersV1AdminUsersGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsV1AdminPostgresEnableRlsPostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/postgres/enable-rls`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsV1AdminPostgresEnableRlsPost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postgresEnableRlsV1AdminPostgresEnableRlsPostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Postgres Prepare
     */
    postgresPrepareV1AdminPostgresPreparePostRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/postgres/prepare`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Postgres Prepare
     */
    postgresPrepareV1AdminPostgresPreparePost(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.postgresPrepareV1AdminPostgresPreparePostRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter requestParameters.bookmarkId was null or undefined when calling previewBookmarkV1BookmarksBookmarkIdPreviewGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/{bookmark_id}/preview`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Remove a user from an organization
     */
    removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete.');
            }
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/orgs/{organization_id}/members/{user_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
        });
    }
    /**
     * Remove a user from an organization
     */
    removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    retryAllJobsV1JobsRetryAllPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling retryAllJobsV1JobsRetryAllPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs/retry-all`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    retryAllJobsV1JobsRetryAllPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retryAllJobsV1JobsRetryAllPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    retryJobV1JobsJobIdRetryPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
                throw new runtime.RequiredError('jobId', 'Required parameter requestParameters.jobId was null or undefined when calling retryJobV1JobsJobIdRetryPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs/{job_id}/retry`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
        });
    }
    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    retryJobV1JobsJobIdRetryPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retryJobV1JobsJobIdRetryPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling revokeTokenV1MeTokensTokenIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete.');
            }
            if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
                throw new runtime.RequiredError('roleName', 'Required parameter requestParameters.roleName was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete.');
            }
            const queryParameters = {};
            if (requestParameters.confirm !== undefined) {
                queryParameters['confirm'] = requestParameters.confirm;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/users/{user_id}/roles/{role_name}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters.roleName))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Enqueue a job for immediate execution
     */
    runJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
                throw new runtime.RequiredError('scheduleId', 'Required parameter requestParameters.scheduleId was null or undefined when calling runJobScheduleNowV1JobSchedulesScheduleIdRunNowPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules/{schedule_id}/run-now`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
        });
    }
    /**
     * Enqueue a job for immediate execution
     */
    runJobScheduleNowV1JobSchedulesScheduleIdRunNowPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.runJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    streamJobsV1JobsStreamGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.jobType !== undefined) {
                queryParameters['job_type'] = requestParameters.jobType;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.orderBy !== undefined) {
                queryParameters['order_by'] = requestParameters.orderBy;
            }
            if (requestParameters.orderDir !== undefined) {
                queryParameters['order_dir'] = requestParameters.orderDir;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs/stream`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    streamJobsV1JobsStreamGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.streamJobsV1JobsStreamGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Test Instapaper creds
     */
    testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling testInstapaperV1IntegrationsInstapaperTestPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/integrations/instapaper/test`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Test Instapaper creds
     */
    testInstapaperV1IntegrationsInstapaperTestPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Test Miniflux creds
     */
    testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling testMinifluxV1IntegrationsMinifluxTestPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/integrations/miniflux/test`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Test Miniflux creds
     */
    testMinifluxV1IntegrationsMinifluxTestPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Test site config selectors against the login page
     */
    testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.configId === null || requestParameters.configId === undefined) {
                throw new runtime.RequiredError('configId', 'Required parameter requestParameters.configId was null or undefined when calling testSiteConfigV1SiteConfigsConfigIdTestPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-configs/{config_id}/test`.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters.configId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Test site config selectors against the login page
     */
    testSiteConfigV1SiteConfigsConfigIdTestPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Toggle schedule active state
     */
    toggleJobScheduleV1JobSchedulesScheduleIdTogglePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
                throw new runtime.RequiredError('scheduleId', 'Required parameter requestParameters.scheduleId was null or undefined when calling toggleJobScheduleV1JobSchedulesScheduleIdTogglePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules/{schedule_id}/toggle`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
        });
    }
    /**
     * Toggle schedule active state
     */
    toggleJobScheduleV1JobSchedulesScheduleIdTogglePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.toggleJobScheduleV1JobSchedulesScheduleIdTogglePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update credential
     */
    updateCredentialV1V1CredentialsCredIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credId === null || requestParameters.credId === undefined) {
                throw new runtime.RequiredError('credId', 'Required parameter requestParameters.credId was null or undefined when calling updateCredentialV1V1CredentialsCredIdPut.');
            }
            if (requestParameters.credential === null || requestParameters.credential === undefined) {
                throw new runtime.RequiredError('credential', 'Required parameter requestParameters.credential was null or undefined when calling updateCredentialV1V1CredentialsCredIdPut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/credentials/{cred_id}`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: CredentialToJSON(requestParameters.credential),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Update credential
     */
    updateCredentialV1V1CredentialsCredIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCredentialV1V1CredentialsCredIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update feed
     */
    updateFeedV1V1FeedsFeedIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
                throw new runtime.RequiredError('feedId', 'Required parameter requestParameters.feedId was null or undefined when calling updateFeedV1V1FeedsFeedIdPut.');
            }
            if (requestParameters.feed === null || requestParameters.feed === undefined) {
                throw new runtime.RequiredError('feed', 'Required parameter requestParameters.feed was null or undefined when calling updateFeedV1V1FeedsFeedIdPut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: FeedToJSON(requestParameters.feed),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FeedOutFromJSON(jsonValue));
        });
    }
    /**
     * Update feed
     */
    updateFeedV1V1FeedsFeedIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateFeedV1V1FeedsFeedIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
                throw new runtime.RequiredError('folderId', 'Required parameter requestParameters.folderId was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut.');
            }
            if (requestParameters.folderUpdate === null || requestParameters.folderUpdate === undefined) {
                throw new runtime.RequiredError('folderUpdate', 'Required parameter requestParameters.folderUpdate was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/folders/{folder_id}`.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters.folderId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: FolderUpdateToJSON(requestParameters.folderUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
        });
    }
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a job schedule
     */
    updateJobScheduleV1JobSchedulesScheduleIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
                throw new runtime.RequiredError('scheduleId', 'Required parameter requestParameters.scheduleId was null or undefined when calling updateJobScheduleV1JobSchedulesScheduleIdPatch.');
            }
            if (requestParameters.jobScheduleUpdate === null || requestParameters.jobScheduleUpdate === undefined) {
                throw new runtime.RequiredError('jobScheduleUpdate', 'Required parameter requestParameters.jobScheduleUpdate was null or undefined when calling updateJobScheduleV1JobSchedulesScheduleIdPatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/job-schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: JobScheduleUpdateToJSON(requestParameters.jobScheduleUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
        });
    }
    /**
     * Update a job schedule
     */
    updateJobScheduleV1JobSchedulesScheduleIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateJobScheduleV1JobSchedulesScheduleIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update current user profile
     */
    updateMeV1MePatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.meUpdate === null || requestParameters.meUpdate === undefined) {
                throw new runtime.RequiredError('meUpdate', 'Required parameter requestParameters.meUpdate was null or undefined when calling updateMeV1MePatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: MeUpdateToJSON(requestParameters.meUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => MeOutFromJSON(jsonValue));
        });
    }
    /**
     * Update current user profile
     */
    updateMeV1MePatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateMeV1MePatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update an organization
     */
    updateOrganizationV1AdminOrgsOrganizationIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
                throw new runtime.RequiredError('organizationId', 'Required parameter requestParameters.organizationId was null or undefined when calling updateOrganizationV1AdminOrgsOrganizationIdPatch.');
            }
            if (requestParameters.adminOrganizationUpdate === null || requestParameters.adminOrganizationUpdate === undefined) {
                throw new runtime.RequiredError('adminOrganizationUpdate', 'Required parameter requestParameters.adminOrganizationUpdate was null or undefined when calling updateOrganizationV1AdminOrgsOrganizationIdPatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/orgs/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: AdminOrganizationUpdateToJSON(requestParameters.adminOrganizationUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
        });
    }
    /**
     * Update an organization
     */
    updateOrganizationV1AdminOrgsOrganizationIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateOrganizationV1AdminOrgsOrganizationIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
                throw new runtime.RequiredError('roleId', 'Required parameter requestParameters.roleId was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch.');
            }
            if (requestParameters.adminRoleUpdate === null || requestParameters.adminRoleUpdate === undefined) {
                throw new runtime.RequiredError('adminRoleUpdate', 'Required parameter requestParameters.adminRoleUpdate was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: AdminRoleUpdateToJSON(requestParameters.adminRoleUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
        });
    }
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a site config
     */
    updateSiteConfigV1V1SiteConfigsConfigIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.configId === null || requestParameters.configId === undefined) {
                throw new runtime.RequiredError('configId', 'Required parameter requestParameters.configId was null or undefined when calling updateSiteConfigV1V1SiteConfigsConfigIdPut.');
            }
            if (requestParameters.body === null || requestParameters.body === undefined) {
                throw new runtime.RequiredError('body', 'Required parameter requestParameters.body was null or undefined when calling updateSiteConfigV1V1SiteConfigsConfigIdPut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-configs/{config_id}`.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters.configId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.body,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Update a site config
     */
    updateSiteConfigV1V1SiteConfigsConfigIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateSiteConfigV1V1SiteConfigsConfigIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
                throw new runtime.RequiredError('tagId', 'Required parameter requestParameters.tagId was null or undefined when calling updateTagV1BookmarksTagsTagIdPut.');
            }
            if (requestParameters.tagUpdate === null || requestParameters.tagUpdate === undefined) {
                throw new runtime.RequiredError('tagUpdate', 'Required parameter requestParameters.tagUpdate was null or undefined when calling updateTagV1BookmarksTagsTagIdPut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/bookmarks/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters.tagId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: TagUpdateToJSON(requestParameters.tagUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
        });
    }
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update user role overrides
     */
    updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch.');
            }
            if (requestParameters.adminUserRoleOverridesUpdate === null || requestParameters.adminUserRoleOverridesUpdate === undefined) {
                throw new runtime.RequiredError('adminUserRoleOverridesUpdate', 'Required parameter requestParameters.adminUserRoleOverridesUpdate was null or undefined when calling updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/users/{user_id}/role-overrides`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: AdminUserRoleOverridesUpdateToJSON(requestParameters.adminUserRoleOverridesUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Update user role overrides
     */
    updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling updateUserV1AdminUsersUserIdPatch.');
            }
            if (requestParameters.adminUserUpdate === null || requestParameters.adminUserUpdate === undefined) {
                throw new runtime.RequiredError('adminUserUpdate', 'Required parameter requestParameters.adminUserUpdate was null or undefined when calling updateUserV1AdminUsersUserIdPatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/admin/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: AdminUserUpdateToJSON(requestParameters.adminUserUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
        });
    }
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserV1AdminUsersUserIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Partially update the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling updateWelcomeSettingV1SiteSettingsWelcomePatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-settings/welcome`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SiteWelcomeSettingOutFromJSON(jsonValue));
        });
    }
    /**
     * Partially update the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateWelcomeSettingV1SiteSettingsWelcomePatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create or replace the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling updateWelcomeSettingV1SiteSettingsWelcomePut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/site-settings/welcome`,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SiteWelcomeSettingOutFromJSON(jsonValue));
        });
    }
    /**
     * Create or replace the welcome message
     */
    updateWelcomeSettingV1SiteSettingsWelcomePut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateWelcomeSettingV1SiteSettingsWelcomePutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    validateJobPayloadV1JobsValidatePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
                throw new runtime.RequiredError('requestBody', 'Required parameter requestParameters.requestBody was null or undefined when calling validateJobPayloadV1JobsValidatePost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/jobs/validate`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters.requestBody,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    validateJobPayloadV1JobsValidatePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateJobPayloadV1JobsValidatePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
