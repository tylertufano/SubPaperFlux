/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SiteConfigOut
 */
export interface SiteConfigOut {
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    siteUrl: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    usernameSelector: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    passwordSelector: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    loginButtonSelector: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    postLoginSelector?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof SiteConfigOut
     */
    cookiesToStore?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigOut
     */
    ownerUserId?: string | null;
}

/**
 * Check if a given object implements the SiteConfigOut interface.
 */
export function instanceOfSiteConfigOut(value: object): value is SiteConfigOut {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('siteUrl' in value) || value['siteUrl'] === undefined) return false;
    if (!('usernameSelector' in value) || value['usernameSelector'] === undefined) return false;
    if (!('passwordSelector' in value) || value['passwordSelector'] === undefined) return false;
    if (!('loginButtonSelector' in value) || value['loginButtonSelector'] === undefined) return false;
    return true;
}

export function SiteConfigOutFromJSON(json: any): SiteConfigOut {
    return SiteConfigOutFromJSONTyped(json, false);
}

export function SiteConfigOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteConfigOut {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'siteUrl': json['site_url'],
        'usernameSelector': json['username_selector'],
        'passwordSelector': json['password_selector'],
        'loginButtonSelector': json['login_button_selector'],
        'postLoginSelector': json['post_login_selector'] == null ? undefined : json['post_login_selector'],
        'cookiesToStore': json['cookies_to_store'] == null ? undefined : json['cookies_to_store'],
        'ownerUserId': json['owner_user_id'] == null ? undefined : json['owner_user_id'],
    };
}

export function SiteConfigOutToJSON(json: any): SiteConfigOut {
    return SiteConfigOutToJSONTyped(json, false);
}

export function SiteConfigOutToJSONTyped(value?: SiteConfigOut | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'name': value['name'],
        'site_url': value['siteUrl'],
        'username_selector': value['usernameSelector'],
        'password_selector': value['passwordSelector'],
        'login_button_selector': value['loginButtonSelector'],
        'post_login_selector': value['postLoginSelector'],
        'cookies_to_store': value['cookiesToStore'],
        'owner_user_id': value['ownerUserId'],
    };
}

