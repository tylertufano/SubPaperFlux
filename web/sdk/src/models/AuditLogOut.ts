/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuditLogOut
 */
export interface AuditLogOut {
    /**
     * 
     * @type {any}
     * @memberof AuditLogOut
     */
    id: any | null;
    /**
     * 
     * @type {any}
     * @memberof AuditLogOut
     */
    entityType: any | null;
    /**
     * 
     * @type {any}
     * @memberof AuditLogOut
     */
    entityId: any | null;
    /**
     * 
     * @type {any}
     * @memberof AuditLogOut
     */
    action: any | null;
    /**
     * 
     * @type {any}
     * @memberof AuditLogOut
     */
    ownerUserId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof AuditLogOut
     */
    actorUserId?: any | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof AuditLogOut
     */
    details?: { [key: string]: any; } | null;
    /**
     * 
     * @type {any}
     * @memberof AuditLogOut
     */
    createdAt: any | null;
}

/**
 * Check if a given object implements the AuditLogOut interface.
 */
export function instanceOfAuditLogOut(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "entityType" in value;
    isInstance = isInstance && "entityId" in value;
    isInstance = isInstance && "action" in value;
    isInstance = isInstance && "createdAt" in value;

    return isInstance;
}

export function AuditLogOutFromJSON(json: any): AuditLogOut {
    return AuditLogOutFromJSONTyped(json, false);
}

export function AuditLogOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuditLogOut {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'entityType': json['entity_type'],
        'entityId': json['entity_id'],
        'action': json['action'],
        'ownerUserId': !exists(json, 'owner_user_id') ? undefined : json['owner_user_id'],
        'actorUserId': !exists(json, 'actor_user_id') ? undefined : json['actor_user_id'],
        'details': !exists(json, 'details') ? undefined : json['details'],
        'createdAt': json['created_at'],
    };
}

export function AuditLogOutToJSON(value?: AuditLogOut | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'entity_type': value.entityType,
        'entity_id': value.entityId,
        'action': value.action,
        'owner_user_id': value.ownerUserId,
        'actor_user_id': value.actorUserId,
        'details': value.details,
        'created_at': value.createdAt,
    };
}

