/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TemplateMetadata
 */
export interface TemplateMetadata {
    /**
     * Stable template identifier
     * @type {any}
     * @memberof TemplateMetadata
     */
    id: any | null;
    /**
     * Source filename within the templates directory
     * @type {any}
     * @memberof TemplateMetadata
     */
    filename: any | null;
    /**
     * Display title for the template
     * @type {any}
     * @memberof TemplateMetadata
     */
    title: any | null;
    /**
     * Short description of the template contents
     * @type {any}
     * @memberof TemplateMetadata
     */
    description: any | null;
    /**
     * Primary file format (derived from the extension)
     * @type {any}
     * @memberof TemplateMetadata
     */
    format: any | null;
    /**
     * File size in bytes
     * @type {any}
     * @memberof TemplateMetadata
     */
    sizeBytes: any | null;
    /**
     * List of category identifiers that apply to the template
     * @type {any}
     * @memberof TemplateMetadata
     */
    categories?: any | null;
    /**
     * Relative URL to download the template asset
     * @type {any}
     * @memberof TemplateMetadata
     */
    downloadUrl: any | null;
}

/**
 * Check if a given object implements the TemplateMetadata interface.
 */
export function instanceOfTemplateMetadata(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "id" in value;
    isInstance = isInstance && "filename" in value;
    isInstance = isInstance && "title" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "format" in value;
    isInstance = isInstance && "sizeBytes" in value;
    isInstance = isInstance && "downloadUrl" in value;

    return isInstance;
}

export function TemplateMetadataFromJSON(json: any): TemplateMetadata {
    return TemplateMetadataFromJSONTyped(json, false);
}

export function TemplateMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateMetadata {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'filename': json['filename'],
        'title': json['title'],
        'description': json['description'],
        'format': json['format'],
        'sizeBytes': json['size_bytes'],
        'categories': !exists(json, 'categories') ? undefined : json['categories'],
        'downloadUrl': json['download_url'],
    };
}

export function TemplateMetadataToJSON(value?: TemplateMetadata | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'filename': value.filename,
        'title': value.title,
        'description': value.description,
        'format': value.format,
        'size_bytes': value.sizeBytes,
        'categories': value.categories,
        'download_url': value.downloadUrl,
    };
}

