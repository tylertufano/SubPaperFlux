/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookmarkOut,
  BookmarksPage,
  HTTPValidationError,
} from '../models/index';
import {
    BookmarkOutFromJSON,
    BookmarkOutToJSON,
    BookmarksPageFromJSON,
    BookmarksPageToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface BulkDeleteBookmarksBookmarksBulkDeletePostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkPublishBookmarksBookmarksBulkPublishPostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkPublishBookmarksV1BookmarksBulkPublishPostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface CountBookmarksBookmarksCountGetRequest {
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    search?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
    size?: number;
}

export interface CountBookmarksV1BookmarksCountGetRequest {
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    search?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
    size?: number;
}

export interface DeleteBookmarkBookmarksBookmarkIdDeleteRequest {
    bookmarkId: string;
    deleteRemote?: boolean;
    xCsrfToken?: string | null;
}

export interface DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest {
    bookmarkId: string;
    deleteRemote?: boolean;
    xCsrfToken?: string | null;
}

export interface ExportBookmarksBookmarksExportGetRequest {
    format?: string;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ExportBookmarksV1BookmarksExportGetRequest {
    format?: string;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface GetBookmarkBookmarksBookmarkIdGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkV1BookmarksBookmarkIdGetRequest {
    bookmarkId: string;
}

export interface HeadBookmarksBookmarksHeadRequest {
    search?: string | null;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface HeadBookmarksBookmarksHead0Request {
    search?: string | null;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface HeadBookmarksV1BookmarksHeadRequest {
    search?: string | null;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface HeadBookmarksV1BookmarksHead0Request {
    search?: string | null;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksBookmarksGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksBookmarksGet0Request {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksV1BookmarksGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksV1BookmarksGet0Request {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

/**
 * 
 */
export class BookmarksApi extends runtime.BaseAPI {

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksBookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksBookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksBookmarksBulkDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/bulk-delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksBookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksBookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteBookmarksBookmarksBulkDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/bulk-delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksBookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksBookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksBookmarksBulkPublishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/bulk-publish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksBookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksBookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkPublishBookmarksBookmarksBulkPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/bulk-publish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksBookmarksCountGetRaw(requestParameters: CountBookmarksBookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksBookmarksCountGet(requestParameters: CountBookmarksBookmarksCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.countBookmarksBookmarksCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGetRaw(requestParameters: CountBookmarksV1BookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGet(requestParameters: CountBookmarksV1BookmarksCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkBookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkBookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkBookmarksBookmarkIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteRemote'] != null) {
            queryParameters['delete_remote'] = requestParameters['deleteRemote'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkBookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkBookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkBookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteRemote'] != null) {
            queryParameters['delete_remote'] = requestParameters['deleteRemote'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksBookmarksExportGetRaw(requestParameters: ExportBookmarksBookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksBookmarksExportGet(requestParameters: ExportBookmarksBookmarksExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportBookmarksBookmarksExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGetRaw(requestParameters: ExportBookmarksV1BookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGet(requestParameters: ExportBookmarksV1BookmarksExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark
     */
    async getBookmarkBookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkBookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkBookmarksBookmarkIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark
     */
    async getBookmarkBookmarksBookmarkIdGet(requestParameters: GetBookmarkBookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut> {
        const response = await this.getBookmarkBookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGet(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut> {
        const response = await this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHeadRaw(requestParameters: HeadBookmarksBookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHead(requestParameters: HeadBookmarksBookmarksHeadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksBookmarksHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHead_1Raw(requestParameters: HeadBookmarksBookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHead_1(requestParameters: HeadBookmarksBookmarksHead0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksBookmarksHead_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHeadRaw(requestParameters: HeadBookmarksV1BookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead(requestParameters: HeadBookmarksV1BookmarksHeadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_2Raw(requestParameters: HeadBookmarksV1BookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_2(requestParameters: HeadBookmarksV1BookmarksHead0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHead_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGetRaw(requestParameters: ListBookmarksBookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGet(requestParameters: ListBookmarksBookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksBookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGet_3Raw(requestParameters: ListBookmarksBookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGet_3(requestParameters: ListBookmarksBookmarksGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksBookmarksGet_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGetRaw(requestParameters: ListBookmarksV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet(requestParameters: ListBookmarksV1BookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_4Raw(requestParameters: ListBookmarksV1BookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_4(requestParameters: ListBookmarksV1BookmarksGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGet_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

}
