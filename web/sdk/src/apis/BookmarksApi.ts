/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookmarkOut,
  BookmarksPage,
  FolderCreate,
  FolderOut,
  FolderUpdate,
  HTTPValidationError,
  TagCreate,
  TagOut,
  TagUpdate,
} from '../models';
import {
    BookmarkOutFromJSON,
    BookmarkOutToJSON,
    BookmarksPageFromJSON,
    BookmarksPageToJSON,
    FolderCreateFromJSON,
    FolderCreateToJSON,
    FolderOutFromJSON,
    FolderOutToJSON,
    FolderUpdateFromJSON,
    FolderUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TagCreateFromJSON,
    TagCreateToJSON,
    TagOutFromJSON,
    TagOutToJSON,
    TagUpdateFromJSON,
    TagUpdateToJSON,
} from '../models';

export interface BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest {
    requestBody: { [key: string]: any; } | null;
    xCsrfToken?: any;
}

export interface BulkPublishBookmarksV1BookmarksBulkPublishPostRequest {
    requestBody: { [key: string]: any; } | null;
    xCsrfToken?: any;
}

export interface CountBookmarksV1BookmarksCountGetRequest {
    feedId?: any;
    since?: any;
    until?: any;
    search?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
    size?: any;
}

export interface CreateFolderV1BookmarksFoldersPostRequest {
    folderCreate: FolderCreate;
    xCsrfToken?: any;
}

export interface CreateTagV1BookmarksTagsPostRequest {
    tagCreate: TagCreate;
    xCsrfToken?: any;
}

export interface DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest {
    bookmarkId: any;
    deleteRemote?: any;
    xCsrfToken?: any;
}

export interface DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest {
    folderId: any;
    xCsrfToken?: any;
}

export interface DeleteTagV1BookmarksTagsTagIdDeleteRequest {
    tagId: any;
    xCsrfToken?: any;
}

export interface ExportBookmarksV1BookmarksExportGetRequest {
    format?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface GetBookmarkV1BookmarksBookmarkIdGetRequest {
    bookmarkId: any;
}

export interface HeadBookmarksV1BookmarksHeadRequest {
    search?: any;
    feedId?: any;
    since?: any;
    until?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface HeadBookmarksV1BookmarksHead0Request {
    search?: any;
    feedId?: any;
    since?: any;
    until?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface ListBookmarksV1BookmarksGetRequest {
    page?: any;
    size?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface ListBookmarksV1BookmarksGet0Request {
    page?: any;
    size?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest {
    bookmarkId: any;
}

export interface UpdateFolderV1BookmarksFoldersFolderIdPutRequest {
    folderId: any;
    folderUpdate: FolderUpdate;
    xCsrfToken?: any;
}

export interface UpdateTagV1BookmarksTagsTagIdPutRequest {
    tagId: any;
    tagUpdate: TagUpdate;
    xCsrfToken?: any;
}

/**
 * 
 */
export class BookmarksApi extends runtime.BaseAPI {

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/bulk-delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/bulk-publish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGetRaw(requestParameters: CountBookmarksV1BookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGet(requestParameters: CountBookmarksV1BookmarksCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPostRaw(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters.folderCreate === null || requestParameters.folderCreate === undefined) {
            throw new runtime.RequiredError('folderCreate','Required parameter requestParameters.folderCreate was null or undefined when calling createFolderV1BookmarksFoldersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderCreateToJSON(requestParameters.folderCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPost(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPostRaw(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters.tagCreate === null || requestParameters.tagCreate === undefined) {
            throw new runtime.RequiredError('tagCreate','Required parameter requestParameters.tagCreate was null or undefined when calling createTagV1BookmarksTagsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCreateToJSON(requestParameters.tagCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPost(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteRemote !== undefined) {
            queryParameters['delete_remote'] = requestParameters.deleteRemote;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
            throw new runtime.RequiredError('folderId','Required parameter requestParameters.folderId was null or undefined when calling deleteFolderV1BookmarksFoldersFolderIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders/{folder_id}`.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters.folderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling deleteTagV1BookmarksTagsTagIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters.tagId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDelete(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGetRaw(requestParameters: ExportBookmarksV1BookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.fuzzy !== undefined) {
            queryParameters['fuzzy'] = requestParameters.fuzzy;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGet(requestParameters: ExportBookmarksV1BookmarksExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGet(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut> {
        const response = await this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHeadRaw(requestParameters: HeadBookmarksV1BookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead(requestParameters: HeadBookmarksV1BookmarksHeadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_1Raw(requestParameters: HeadBookmarksV1BookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_1(requestParameters: HeadBookmarksV1BookmarksHead0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHead_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGetRaw(requestParameters: ListBookmarksV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.fuzzy !== undefined) {
            queryParameters['fuzzy'] = requestParameters.fuzzy;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet(requestParameters: ListBookmarksV1BookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_2Raw(requestParameters: ListBookmarksV1BookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.fuzzy !== undefined) {
            queryParameters['fuzzy'] = requestParameters.fuzzy;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_2(requestParameters: ListBookmarksV1BookmarksGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGet_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listFoldersV1BookmarksFoldersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listTagsV1BookmarksTagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling previewBookmarkV1BookmarksBookmarkIdPreviewGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}/preview`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkV1BookmarksBookmarkIdPreviewGet(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
            throw new runtime.RequiredError('folderId','Required parameter requestParameters.folderId was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut.');
        }

        if (requestParameters.folderUpdate === null || requestParameters.folderUpdate === undefined) {
            throw new runtime.RequiredError('folderUpdate','Required parameter requestParameters.folderUpdate was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders/{folder_id}`.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters.folderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderUpdateToJSON(requestParameters.folderUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPut(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPutRaw(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling updateTagV1BookmarksTagsTagIdPut.');
        }

        if (requestParameters.tagUpdate === null || requestParameters.tagUpdate === undefined) {
            throw new runtime.RequiredError('tagUpdate','Required parameter requestParameters.tagUpdate was null or undefined when calling updateTagV1BookmarksTagsTagIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters.tagId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagUpdateToJSON(requestParameters.tagUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPut(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
