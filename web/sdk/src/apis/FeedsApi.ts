/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Feed,
  HTTPValidationError,
} from '../models';
import {
    FeedFromJSON,
    FeedToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface CreateFeedFeedsPostRequest {
    feed: Feed;
}

export interface DeleteFeedFeedsFeedIdDeleteRequest {
    feedId: any;
}

export interface UpdateFeedFeedsFeedIdPutRequest {
    feedId: any;
    feed: Feed;
}

/**
 * 
 */
export class FeedsApi extends runtime.BaseAPI {

    /**
     * Create Feed
     */
    async createFeedFeedsPostRaw(requestParameters: CreateFeedFeedsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feed>> {
        if (requestParameters.feed === null || requestParameters.feed === undefined) {
            throw new runtime.RequiredError('feed','Required parameter requestParameters.feed was null or undefined when calling createFeedFeedsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/feeds/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FeedToJSON(requestParameters.feed),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedFromJSON(jsonValue));
    }

    /**
     * Create Feed
     */
    async createFeedFeedsPost(requestParameters: CreateFeedFeedsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feed> {
        const response = await this.createFeedFeedsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Feed
     */
    async deleteFeedFeedsFeedIdDeleteRaw(requestParameters: DeleteFeedFeedsFeedIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
            throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling deleteFeedFeedsFeedIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Feed
     */
    async deleteFeedFeedsFeedIdDelete(requestParameters: DeleteFeedFeedsFeedIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFeedFeedsFeedIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * List Feeds
     */
    async listFeedsFeedsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/feeds/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Feeds
     */
    async listFeedsFeedsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listFeedsFeedsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Feeds
     */
    async listFeedsFeedsGet_1Raw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/feeds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Feeds
     */
    async listFeedsFeedsGet_1(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listFeedsFeedsGet_1Raw(initOverrides);
        return await response.value();
    }

    /**
     * Update Feed
     */
    async updateFeedFeedsFeedIdPutRaw(requestParameters: UpdateFeedFeedsFeedIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Feed>> {
        if (requestParameters.feedId === null || requestParameters.feedId === undefined) {
            throw new runtime.RequiredError('feedId','Required parameter requestParameters.feedId was null or undefined when calling updateFeedFeedsFeedIdPut.');
        }

        if (requestParameters.feed === null || requestParameters.feed === undefined) {
            throw new runtime.RequiredError('feed','Required parameter requestParameters.feed was null or undefined when calling updateFeedFeedsFeedIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/feeds/{feed_id}`.replace(`{${"feed_id"}}`, encodeURIComponent(String(requestParameters.feedId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FeedToJSON(requestParameters.feed),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedFromJSON(jsonValue));
    }

    /**
     * Update Feed
     */
    async updateFeedFeedsFeedIdPut(requestParameters: UpdateFeedFeedsFeedIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Feed> {
        const response = await this.updateFeedFeedsFeedIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
