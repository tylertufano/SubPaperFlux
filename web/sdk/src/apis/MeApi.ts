/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  ApiTokenCreate,
  ApiTokenOut,
  ApiTokenWithSecret,
  ApiTokensPage,
  HTTPValidationError,
  MeOut,
  MeUpdate,
} from '../models';
import {
    ApiTokenCreateFromJSON,
    ApiTokenCreateToJSON,
    ApiTokenOutFromJSON,
    ApiTokenOutToJSON,
    ApiTokenWithSecretFromJSON,
    ApiTokenWithSecretToJSON,
    ApiTokensPageFromJSON,
    ApiTokensPageToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    MeOutFromJSON,
    MeOutToJSON,
    MeUpdateFromJSON,
    MeUpdateToJSON,
} from '../models';

export interface CreateTokenV1MeTokensPostRequest {
    apiTokenCreate: ApiTokenCreate;
}

export interface GetTokenV1MeTokensTokenIdGetRequest {
    tokenId: any;
}

export interface ListTokensV1MeTokensGetRequest {
    page?: any;
    size?: any;
    includeRevoked?: any;
}

export interface RevokeTokenV1MeTokensTokenIdDeleteRequest {
    tokenId: any;
}

export interface UpdateMeV1MePatchRequest {
    meUpdate: MeUpdate;
}

/**
 * 
 */
export class MeApi extends runtime.BaseAPI {

    /**
     * Create an API token
     */
    async createTokenV1MeTokensPostRaw(requestParameters: CreateTokenV1MeTokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokenWithSecret>> {
        if (requestParameters.apiTokenCreate === null || requestParameters.apiTokenCreate === undefined) {
            throw new runtime.RequiredError('apiTokenCreate','Required parameter requestParameters.apiTokenCreate was null or undefined when calling createTokenV1MeTokensPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiTokenCreateToJSON(requestParameters.apiTokenCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokenWithSecretFromJSON(jsonValue));
    }

    /**
     * Create an API token
     */
    async createTokenV1MeTokensPost(requestParameters: CreateTokenV1MeTokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokenWithSecret> {
        const response = await this.createTokenV1MeTokensPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current user profile
     */
    async getMeV1MeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeOutFromJSON(jsonValue));
    }

    /**
     * Get current user profile
     */
    async getMeV1MeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeOut> {
        const response = await this.getMeV1MeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get API token metadata
     */
    async getTokenV1MeTokensTokenIdGetRaw(requestParameters: GetTokenV1MeTokensTokenIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokenOut>> {
        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling getTokenV1MeTokensTokenIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokenOutFromJSON(jsonValue));
    }

    /**
     * Get API token metadata
     */
    async getTokenV1MeTokensTokenIdGet(requestParameters: GetTokenV1MeTokensTokenIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokenOut> {
        const response = await this.getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List API tokens
     */
    async listTokensV1MeTokensGetRaw(requestParameters: ListTokensV1MeTokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokensPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.includeRevoked !== undefined) {
            queryParameters['include_revoked'] = requestParameters.includeRevoked;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokensPageFromJSON(jsonValue));
    }

    /**
     * List API tokens
     */
    async listTokensV1MeTokensGet(requestParameters: ListTokensV1MeTokensGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokensPage> {
        const response = await this.listTokensV1MeTokensGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke an API token
     */
    async revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters: RevokeTokenV1MeTokensTokenIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling revokeTokenV1MeTokensTokenIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke an API token
     */
    async revokeTokenV1MeTokensTokenIdDelete(requestParameters: RevokeTokenV1MeTokensTokenIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Update current user profile
     */
    async updateMeV1MePatchRaw(requestParameters: UpdateMeV1MePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeOut>> {
        if (requestParameters.meUpdate === null || requestParameters.meUpdate === undefined) {
            throw new runtime.RequiredError('meUpdate','Required parameter requestParameters.meUpdate was null or undefined when calling updateMeV1MePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MeUpdateToJSON(requestParameters.meUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeOutFromJSON(jsonValue));
    }

    /**
     * Update current user profile
     */
    async updateMeV1MePatch(requestParameters: UpdateMeV1MePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeOut> {
        const response = await this.updateMeV1MePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
