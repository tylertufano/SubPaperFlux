/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  TemplateListResponse,
} from '../models/index';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TemplateListResponseFromJSON,
    TemplateListResponseToJSON,
} from '../models/index';

export interface DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest {
    templateId: string;
}

/**
 * 
 */
export class TemplatesApi extends runtime.BaseAPI {

    /**
     * Download template asset
     */
    async downloadTemplateV1TemplatesTemplateIdDownloadGetRaw(requestParameters: DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['templateId'] == null) {
            throw new runtime.RequiredError(
                'templateId',
                'Required parameter "templateId" was null or undefined when calling downloadTemplateV1TemplatesTemplateIdDownloadGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/templates/{template_id}/download`;
        urlPath = urlPath.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters['templateId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download template asset
     */
    async downloadTemplateV1TemplatesTemplateIdDownloadGet(requestParameters: DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadTemplateV1TemplatesTemplateIdDownloadGetRaw(requestParameters, initOverrides);
    }

    /**
     * List available templates
     */
    async listTemplatesV1TemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/templates`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateListResponseFromJSON(jsonValue));
    }

    /**
     * List available templates
     */
    async listTemplatesV1TemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateListResponse> {
        const response = await this.listTemplatesV1TemplatesGetRaw(initOverrides);
        return await response.value();
    }

}
