/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AdminOrganizationCreate,
  AdminOrganizationDetail,
  AdminOrganizationMembershipChange,
  AdminOrganizationUpdate,
  AdminOrganizationsPage,
  AdminRoleCreate,
  AdminRoleDetail,
  AdminRoleUpdate,
  AdminRolesPage,
  AdminUserOut,
  AdminUserRoleOverridesUpdate,
  AdminUserUpdate,
  AdminUsersPage,
  ApiTokenCreate,
  ApiTokenOut,
  ApiTokenWithSecret,
  ApiTokensPage,
  AuditLogsPage,
  BookmarkFolderUpdate,
  BookmarkOut,
  BookmarkTagsUpdate,
  BookmarksPage,
  BulkBookmarkFolderUpdate,
  BulkBookmarkTagUpdate,
  Credential,
  CredentialsPage,
  FeedsPage,
  FolderCreate,
  FolderOut,
  FolderUpdate,
  HTTPValidationError,
  JobOut,
  JobRequest,
  JobScheduleCreate,
  JobScheduleOut,
  JobScheduleUpdate,
  JobSchedulesPage,
  JobsPage,
  MeOut,
  MeUpdate,
  SiteConfigsPage,
  SiteSetupStatusOut,
  SiteSetupStatusUpdate,
  SiteWelcomeSettingOut,
  SiteWelcomeSettingUpdate,
  StatusResponse,
  TagCreate,
  TagOut,
  TagUpdate,
  TemplateListResponse,
} from '../models';
import {
    AdminOrganizationCreateFromJSON,
    AdminOrganizationCreateToJSON,
    AdminOrganizationDetailFromJSON,
    AdminOrganizationDetailToJSON,
    AdminOrganizationMembershipChangeFromJSON,
    AdminOrganizationMembershipChangeToJSON,
    AdminOrganizationUpdateFromJSON,
    AdminOrganizationUpdateToJSON,
    AdminOrganizationsPageFromJSON,
    AdminOrganizationsPageToJSON,
    AdminRoleCreateFromJSON,
    AdminRoleCreateToJSON,
    AdminRoleDetailFromJSON,
    AdminRoleDetailToJSON,
    AdminRoleUpdateFromJSON,
    AdminRoleUpdateToJSON,
    AdminRolesPageFromJSON,
    AdminRolesPageToJSON,
    AdminUserOutFromJSON,
    AdminUserOutToJSON,
    AdminUserRoleOverridesUpdateFromJSON,
    AdminUserRoleOverridesUpdateToJSON,
    AdminUserUpdateFromJSON,
    AdminUserUpdateToJSON,
    AdminUsersPageFromJSON,
    AdminUsersPageToJSON,
    ApiTokenCreateFromJSON,
    ApiTokenCreateToJSON,
    ApiTokenOutFromJSON,
    ApiTokenOutToJSON,
    ApiTokenWithSecretFromJSON,
    ApiTokenWithSecretToJSON,
    ApiTokensPageFromJSON,
    ApiTokensPageToJSON,
    AuditLogsPageFromJSON,
    AuditLogsPageToJSON,
    BookmarkFolderUpdateFromJSON,
    BookmarkFolderUpdateToJSON,
    BookmarkOutFromJSON,
    BookmarkOutToJSON,
    BookmarkTagsUpdateFromJSON,
    BookmarkTagsUpdateToJSON,
    BookmarksPageFromJSON,
    BookmarksPageToJSON,
    BulkBookmarkFolderUpdateFromJSON,
    BulkBookmarkFolderUpdateToJSON,
    BulkBookmarkTagUpdateFromJSON,
    BulkBookmarkTagUpdateToJSON,
    CredentialFromJSON,
    CredentialToJSON,
    CredentialsPageFromJSON,
    CredentialsPageToJSON,
    FeedsPageFromJSON,
    FeedsPageToJSON,
    FolderCreateFromJSON,
    FolderCreateToJSON,
    FolderOutFromJSON,
    FolderOutToJSON,
    FolderUpdateFromJSON,
    FolderUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    JobOutFromJSON,
    JobOutToJSON,
    JobRequestFromJSON,
    JobRequestToJSON,
    JobScheduleCreateFromJSON,
    JobScheduleCreateToJSON,
    JobScheduleOutFromJSON,
    JobScheduleOutToJSON,
    JobScheduleUpdateFromJSON,
    JobScheduleUpdateToJSON,
    JobSchedulesPageFromJSON,
    JobSchedulesPageToJSON,
    JobsPageFromJSON,
    JobsPageToJSON,
    MeOutFromJSON,
    MeOutToJSON,
    MeUpdateFromJSON,
    MeUpdateToJSON,
    SiteConfigsPageFromJSON,
    SiteConfigsPageToJSON,
    SiteSetupStatusOutFromJSON,
    SiteSetupStatusOutToJSON,
    SiteSetupStatusUpdateFromJSON,
    SiteSetupStatusUpdateToJSON,
    SiteWelcomeSettingOutFromJSON,
    SiteWelcomeSettingOutToJSON,
    SiteWelcomeSettingUpdateFromJSON,
    SiteWelcomeSettingUpdateToJSON,
    StatusResponseFromJSON,
    StatusResponseToJSON,
    TagCreateFromJSON,
    TagCreateToJSON,
    TagOutFromJSON,
    TagOutToJSON,
    TagUpdateFromJSON,
    TagUpdateToJSON,
    TemplateListResponseFromJSON,
    TemplateListResponseToJSON,
} from '../models';

export interface AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest {
    organizationId: any;
    adminOrganizationMembershipChange: AdminOrganizationMembershipChange;
}

export interface BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest {
    requestBody: { [key: string]: any; } | null;
    xCsrfToken?: any;
}

export interface BulkPublishBookmarksV1BookmarksBulkPublishPostRequest {
    requestBody: { [key: string]: any; } | null;
    xCsrfToken?: any;
}

export interface BulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRequest {
    bulkBookmarkFolderUpdate: BulkBookmarkFolderUpdate;
    xCsrfToken?: any;
}

export interface BulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRequest {
    bulkBookmarkTagUpdate: BulkBookmarkTagUpdate;
    xCsrfToken?: any;
}

export interface ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest {
    userId: any;
}

export interface CopyCredentialV1CredentialsCredIdCopyPostRequest {
    credId: any;
}

export interface CopySiteConfigV1V1SiteConfigsConfigIdCopyPostRequest {
    configId: any;
}

export interface CountBookmarksV1BookmarksCountGetRequest {
    feedId?: any;
    tagId?: any;
    folderId?: any;
    since?: any;
    until?: any;
    search?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
    size?: any;
}

export interface CreateFolderV1BookmarksFoldersPostRequest {
    folderCreate: FolderCreate;
    xCsrfToken?: any;
}

export interface CreateJobScheduleV1JobSchedulesPostRequest {
    jobScheduleCreate: JobScheduleCreate;
}

export interface CreateJobScheduleV1JobSchedulesPost0Request {
    jobScheduleCreate: JobScheduleCreate;
}

export interface CreateOrganizationV1AdminOrgsPostRequest {
    adminOrganizationCreate: AdminOrganizationCreate;
}

export interface CreateRoleV1AdminRolesPostRequest {
    adminRoleCreate: AdminRoleCreate;
}

export interface CreateTagV1BookmarksTagsPostRequest {
    tagCreate: TagCreate;
    xCsrfToken?: any;
}

export interface CreateTokenV1MeTokensPostRequest {
    apiTokenCreate: ApiTokenCreate;
}

export interface DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest {
    bookmarkId: any;
    xCsrfToken?: any;
}

export interface DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest {
    bookmarkId: any;
    deleteRemote?: any;
    xCsrfToken?: any;
}

export interface DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest {
    folderId: any;
    xCsrfToken?: any;
}

export interface DeleteJobScheduleV1JobSchedulesScheduleIdDeleteRequest {
    scheduleId: any;
}

export interface DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest {
    organizationId: any;
}

export interface DeleteRoleV1AdminRolesRoleIdDeleteRequest {
    roleId: any;
}

export interface DeleteTagV1BookmarksTagsTagIdDeleteRequest {
    tagId: any;
    xCsrfToken?: any;
}

export interface DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest {
    templateId: any;
}

export interface EnqueueJobV1JobsPostRequest {
    jobRequest: JobRequest;
}

export interface ExportBookmarksV1BookmarksExportGetRequest {
    format?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    tagId?: any;
    folderId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest {
    bookmarkId: any;
}

export interface GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest {
    bookmarkId: any;
}

export interface GetBookmarkV1BookmarksBookmarkIdGetRequest {
    bookmarkId: any;
}

export interface GetJobScheduleV1JobSchedulesScheduleIdGetRequest {
    scheduleId: any;
}

export interface GetJobV1JobsJobIdGetRequest {
    jobId: any;
}

export interface GetOrganizationV1AdminOrgsOrganizationIdGetRequest {
    organizationId: any;
}

export interface GetRoleV1AdminRolesRoleIdGetRequest {
    roleId: any;
}

export interface GetTokenV1MeTokensTokenIdGetRequest {
    tokenId: any;
}

export interface GetUserV1AdminUsersUserIdGetRequest {
    userId: any;
}

export interface GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest {
    userId: any;
    roleName: any;
    body?: any | null;
}

export interface HeadBookmarksV1BookmarksHeadRequest {
    search?: any;
    feedId?: any;
    tagId?: any;
    folderId?: any;
    since?: any;
    until?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface HeadBookmarksV1BookmarksHead0Request {
    search?: any;
    feedId?: any;
    tagId?: any;
    folderId?: any;
    since?: any;
    until?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface IntegrationsStatusV1StatusIntegrationsGetRequest {
    instapaperCredId?: any;
    minifluxCredId?: any;
}

export interface ListAuditLogsV1AdminAuditGetRequest {
    page?: any;
    size?: any;
    entityType?: any;
    entityId?: any;
    action?: any;
    ownerUserId?: any;
    actorUserId?: any;
    since?: any;
    until?: any;
}

export interface ListBookmarksV1BookmarksGetRequest {
    page?: any;
    size?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    tagId?: any;
    folderId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface ListBookmarksV1BookmarksGet0Request {
    page?: any;
    size?: any;
    search?: any;
    fuzzy?: any;
    feedId?: any;
    tagId?: any;
    folderId?: any;
    since?: any;
    until?: any;
    sortBy?: any;
    sortDir?: any;
    titleQuery?: any;
    urlQuery?: any;
    regex?: any;
    regexTarget?: any;
    regexFlags?: any;
}

export interface ListCredentialsV1V1CredentialsGetRequest {
    includeGlobal?: any;
    kind?: any;
    page?: any;
    size?: any;
}

export interface ListCredentialsV1V1CredentialsGet0Request {
    includeGlobal?: any;
    kind?: any;
    page?: any;
    size?: any;
}

export interface ListFeedsV1V1FeedsGetRequest {
    ownerUserIds?: any;
    page?: any;
    size?: any;
}

export interface ListFeedsV1V1FeedsGet0Request {
    ownerUserIds?: any;
    page?: any;
    size?: any;
}

export interface ListJobSchedulesV1JobSchedulesGetRequest {
    ownerUserId?: any;
    jobType?: any;
    isActive?: any;
    page?: any;
    size?: any;
}

export interface ListJobSchedulesV1JobSchedulesGet0Request {
    ownerUserId?: any;
    jobType?: any;
    isActive?: any;
    page?: any;
    size?: any;
}

export interface ListJobsV1JobsGetRequest {
    status?: any;
    jobType?: any;
    page?: any;
    size?: any;
    orderBy?: any;
    orderDir?: any;
}

export interface ListJobsV1JobsGet0Request {
    status?: any;
    jobType?: any;
    page?: any;
    size?: any;
    orderBy?: any;
    orderDir?: any;
}

export interface ListOrganizationsV1AdminOrgsGetRequest {
    page?: any;
    size?: any;
    search?: any;
    isDefault?: any;
}

export interface ListRolesV1AdminRolesGetRequest {
    page?: any;
    size?: any;
    search?: any;
}

export interface ListSiteConfigsV1V1SiteConfigsGetRequest {
    includeGlobal?: any;
    search?: any;
    page?: any;
    size?: any;
}

export interface ListTokensV1MeTokensGetRequest {
    page?: any;
    size?: any;
    includeRevoked?: any;
}

export interface ListUsersV1AdminUsersGetRequest {
    page?: any;
    size?: any;
    search?: any;
    isActive?: any;
    role?: any;
    organizationId?: any;
}

export interface PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest {
    bookmarkId: any;
}

export interface RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest {
    organizationId: any;
    userId: any;
}

export interface RetryAllJobsV1JobsRetryAllPostRequest {
    requestBody: { [key: string]: any; } | null;
}

export interface RetryJobV1JobsJobIdRetryPostRequest {
    jobId: any;
}

export interface RevokeTokenV1MeTokensTokenIdDeleteRequest {
    tokenId: any;
}

export interface RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest {
    userId: any;
    roleName: any;
    confirm?: any;
}

export interface RunJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRequest {
    scheduleId: any;
}

export interface StreamJobsV1JobsStreamGetRequest {
    status?: any;
    jobType?: any;
    page?: any;
    size?: any;
    orderBy?: any;
    orderDir?: any;
}

export interface TestInstapaperV1IntegrationsInstapaperTestPostRequest {
    requestBody: { [key: string]: any; } | null;
}

export interface TestMinifluxV1IntegrationsMinifluxTestPostRequest {
    requestBody: { [key: string]: any; } | null;
}

export interface TestSiteConfigV1SiteConfigsConfigIdTestPostRequest {
    configId: any;
}

export interface ToggleJobScheduleV1JobSchedulesScheduleIdTogglePostRequest {
    scheduleId: any;
}

export interface UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest {
    bookmarkId: any;
    bookmarkFolderUpdate: BookmarkFolderUpdate;
    xCsrfToken?: any;
}

export interface UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest {
    bookmarkId: any;
    bookmarkTagsUpdate: BookmarkTagsUpdate;
    xCsrfToken?: any;
}

export interface UpdateFolderV1BookmarksFoldersFolderIdPutRequest {
    folderId: any;
    folderUpdate: FolderUpdate;
    xCsrfToken?: any;
}

export interface UpdateJobScheduleV1JobSchedulesScheduleIdPatchRequest {
    scheduleId: any;
    jobScheduleUpdate: JobScheduleUpdate;
}

export interface UpdateMeV1MePatchRequest {
    meUpdate: MeUpdate;
}

export interface UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest {
    organizationId: any;
    adminOrganizationUpdate: AdminOrganizationUpdate;
}

export interface UpdateRoleV1AdminRolesRoleIdPatchRequest {
    roleId: any;
    adminRoleUpdate: AdminRoleUpdate;
}

export interface UpdateSetupStatusV1SiteSettingsSetupStatusPutRequest {
    requestBody: { [key: string]: any; } | null;
}

export interface UpdateTagV1BookmarksTagsTagIdPutRequest {
    tagId: any;
    tagUpdate: TagUpdate;
    xCsrfToken?: any;
}

export interface UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest {
    userId: any;
    adminUserRoleOverridesUpdate: AdminUserRoleOverridesUpdate;
}

export interface UpdateUserV1AdminUsersUserIdPatchRequest {
    userId: any;
    adminUserUpdate: AdminUserUpdate;
}

export interface UpdateWelcomeSettingV1SiteSettingsWelcomePatchRequest {
    requestBody: { [key: string]: any; } | null;
}

export interface UpdateWelcomeSettingV1SiteSettingsWelcomePutRequest {
    requestBody: { [key: string]: any; } | null;
}

export interface ValidateJobPayloadV1JobsValidatePostRequest {
    requestBody: { [key: string]: any; } | null;
}

/**
 * 
 */
export class V1Api extends runtime.BaseAPI {

    /**
     * Add a user to an organization
     */
    async addOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRaw(requestParameters: AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost.');
        }

        if (requestParameters.adminOrganizationMembershipChange === null || requestParameters.adminOrganizationMembershipChange === undefined) {
            throw new runtime.RequiredError('adminOrganizationMembershipChange','Required parameter requestParameters.adminOrganizationMembershipChange was null or undefined when calling addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/orgs/{organization_id}/members`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminOrganizationMembershipChangeToJSON(requestParameters.adminOrganizationMembershipChange),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
    }

    /**
     * Add a user to an organization
     */
    async addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost(requestParameters: AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail> {
        const response = await this.addOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/bulk-delete`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/bulk-publish`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk Update Bookmark Folders
     */
    async bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRaw(requestParameters: BulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bulkBookmarkFolderUpdate === null || requestParameters.bulkBookmarkFolderUpdate === undefined) {
            throw new runtime.RequiredError('bulkBookmarkFolderUpdate','Required parameter requestParameters.bulkBookmarkFolderUpdate was null or undefined when calling bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/bulk-folders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkBookmarkFolderUpdateToJSON(requestParameters.bulkBookmarkFolderUpdate),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Update Bookmark Folders
     */
    async bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPost(requestParameters: BulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk Update Bookmark Tags
     */
    async bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters: BulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bulkBookmarkTagUpdate === null || requestParameters.bulkBookmarkTagUpdate === undefined) {
            throw new runtime.RequiredError('bulkBookmarkTagUpdate','Required parameter requestParameters.bulkBookmarkTagUpdate was null or undefined when calling bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/bulk-tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkBookmarkTagUpdateToJSON(requestParameters.bulkBookmarkTagUpdate),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Update Bookmark Tags
     */
    async bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost(requestParameters: BulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Clear user role overrides
     */
    async clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRaw(requestParameters: ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/users/{user_id}/role-overrides`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
    }

    /**
     * Clear user role overrides
     */
    async clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDelete(requestParameters: ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut> {
        const response = await this.clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Credential
     */
    async copyCredentialV1CredentialsCredIdCopyPostRaw(requestParameters: CopyCredentialV1CredentialsCredIdCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>> {
        if (requestParameters.credId === null || requestParameters.credId === undefined) {
            throw new runtime.RequiredError('credId','Required parameter requestParameters.credId was null or undefined when calling copyCredentialV1CredentialsCredIdCopyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/credentials/{cred_id}/copy`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
    }

    /**
     * Copy Credential
     */
    async copyCredentialV1CredentialsCredIdCopyPost(requestParameters: CopyCredentialV1CredentialsCredIdCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential> {
        const response = await this.copyCredentialV1CredentialsCredIdCopyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Copy Site Config V1
     */
    async copySiteConfigV1V1SiteConfigsConfigIdCopyPostRaw(requestParameters: CopySiteConfigV1V1SiteConfigsConfigIdCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.configId === null || requestParameters.configId === undefined) {
            throw new runtime.RequiredError('configId','Required parameter requestParameters.configId was null or undefined when calling copySiteConfigV1V1SiteConfigsConfigIdCopyPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/site-configs/{config_id}/copy`.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters.configId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Copy Site Config V1
     */
    async copySiteConfigV1V1SiteConfigsConfigIdCopyPost(requestParameters: CopySiteConfigV1V1SiteConfigsConfigIdCopyPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.copySiteConfigV1V1SiteConfigsConfigIdCopyPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGetRaw(requestParameters: CountBookmarksV1BookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tag_id'] = requestParameters.tagId;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folder_id'] = requestParameters.folderId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/count`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGet(requestParameters: CountBookmarksV1BookmarksCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPostRaw(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters.folderCreate === null || requestParameters.folderCreate === undefined) {
            throw new runtime.RequiredError('folderCreate','Required parameter requestParameters.folderCreate was null or undefined when calling createFolderV1BookmarksFoldersPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderCreateToJSON(requestParameters.folderCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPost(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a job schedule
     */
    async createJobScheduleV1JobSchedulesPostRaw(requestParameters: CreateJobScheduleV1JobSchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>> {
        if (requestParameters.jobScheduleCreate === null || requestParameters.jobScheduleCreate === undefined) {
            throw new runtime.RequiredError('jobScheduleCreate','Required parameter requestParameters.jobScheduleCreate was null or undefined when calling createJobScheduleV1JobSchedulesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobScheduleCreateToJSON(requestParameters.jobScheduleCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
    }

    /**
     * Create a job schedule
     */
    async createJobScheduleV1JobSchedulesPost(requestParameters: CreateJobScheduleV1JobSchedulesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut> {
        const response = await this.createJobScheduleV1JobSchedulesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a job schedule
     */
    async createJobScheduleV1JobSchedulesPost_1Raw(requestParameters: CreateJobScheduleV1JobSchedulesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>> {
        if (requestParameters.jobScheduleCreate === null || requestParameters.jobScheduleCreate === undefined) {
            throw new runtime.RequiredError('jobScheduleCreate','Required parameter requestParameters.jobScheduleCreate was null or undefined when calling createJobScheduleV1JobSchedulesPost_1.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobScheduleCreateToJSON(requestParameters.jobScheduleCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
    }

    /**
     * Create a job schedule
     */
    async createJobScheduleV1JobSchedulesPost_1(requestParameters: CreateJobScheduleV1JobSchedulesPost0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut> {
        const response = await this.createJobScheduleV1JobSchedulesPost_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an organization
     */
    async createOrganizationV1AdminOrgsPostRaw(requestParameters: CreateOrganizationV1AdminOrgsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>> {
        if (requestParameters.adminOrganizationCreate === null || requestParameters.adminOrganizationCreate === undefined) {
            throw new runtime.RequiredError('adminOrganizationCreate','Required parameter requestParameters.adminOrganizationCreate was null or undefined when calling createOrganizationV1AdminOrgsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/orgs`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminOrganizationCreateToJSON(requestParameters.adminOrganizationCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
    }

    /**
     * Create an organization
     */
    async createOrganizationV1AdminOrgsPost(requestParameters: CreateOrganizationV1AdminOrgsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail> {
        const response = await this.createOrganizationV1AdminOrgsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create a role
     */
    async createRoleV1AdminRolesPostRaw(requestParameters: CreateRoleV1AdminRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>> {
        if (requestParameters.adminRoleCreate === null || requestParameters.adminRoleCreate === undefined) {
            throw new runtime.RequiredError('adminRoleCreate','Required parameter requestParameters.adminRoleCreate was null or undefined when calling createRoleV1AdminRolesPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/roles`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AdminRoleCreateToJSON(requestParameters.adminRoleCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
    }

    /**
     * Create a role
     */
    async createRoleV1AdminRolesPost(requestParameters: CreateRoleV1AdminRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail> {
        const response = await this.createRoleV1AdminRolesPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPostRaw(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters.tagCreate === null || requestParameters.tagCreate === undefined) {
            throw new runtime.RequiredError('tagCreate','Required parameter requestParameters.tagCreate was null or undefined when calling createTagV1BookmarksTagsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCreateToJSON(requestParameters.tagCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPost(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create an API token
     */
    async createTokenV1MeTokensPostRaw(requestParameters: CreateTokenV1MeTokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokenWithSecret>> {
        if (requestParameters.apiTokenCreate === null || requestParameters.apiTokenCreate === undefined) {
            throw new runtime.RequiredError('apiTokenCreate','Required parameter requestParameters.apiTokenCreate was null or undefined when calling createTokenV1MeTokensPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ApiTokenCreateToJSON(requestParameters.apiTokenCreate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokenWithSecretFromJSON(jsonValue));
    }

    /**
     * Create an API token
     */
    async createTokenV1MeTokensPost(requestParameters: CreateTokenV1MeTokensPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokenWithSecret> {
        const response = await this.createTokenV1MeTokensPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Db Status
     */
    async dbStatusV1StatusDbGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/status/db`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Db Status
     */
    async dbStatusV1StatusDbGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.dbStatusV1StatusDbGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters: DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}/folder`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete(requestParameters: DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.deleteRemote !== undefined) {
            queryParameters['delete_remote'] = requestParameters.deleteRemote;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
            throw new runtime.RequiredError('folderId','Required parameter requestParameters.folderId was null or undefined when calling deleteFolderV1BookmarksFoldersFolderIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders/{folder_id}`.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters.folderId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a job schedule
     */
    async deleteJobScheduleV1JobSchedulesScheduleIdDeleteRaw(requestParameters: DeleteJobScheduleV1JobSchedulesScheduleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling deleteJobScheduleV1JobSchedulesScheduleIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a job schedule
     */
    async deleteJobScheduleV1JobSchedulesScheduleIdDelete(requestParameters: DeleteJobScheduleV1JobSchedulesScheduleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteJobScheduleV1JobSchedulesScheduleIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete an organization
     */
    async deleteOrganizationV1AdminOrgsOrganizationIdDeleteRaw(requestParameters: DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling deleteOrganizationV1AdminOrgsOrganizationIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/orgs/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete an organization
     */
    async deleteOrganizationV1AdminOrgsOrganizationIdDelete(requestParameters: DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteOrganizationV1AdminOrgsOrganizationIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete a role
     */
    async deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters: DeleteRoleV1AdminRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling deleteRoleV1AdminRolesRoleIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete a role
     */
    async deleteRoleV1AdminRolesRoleIdDelete(requestParameters: DeleteRoleV1AdminRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling deleteTagV1BookmarksTagsTagIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters.tagId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDelete(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Download template asset
     */
    async downloadTemplateV1TemplatesTemplateIdDownloadGetRaw(requestParameters: DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.templateId === null || requestParameters.templateId === undefined) {
            throw new runtime.RequiredError('templateId','Required parameter requestParameters.templateId was null or undefined when calling downloadTemplateV1TemplatesTemplateIdDownloadGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/templates/{template_id}/download`.replace(`{${"template_id"}}`, encodeURIComponent(String(requestParameters.templateId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Download template asset
     */
    async downloadTemplateV1TemplatesTemplateIdDownloadGet(requestParameters: DownloadTemplateV1TemplatesTemplateIdDownloadGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadTemplateV1TemplatesTemplateIdDownloadGetRaw(requestParameters, initOverrides);
    }

    /**
     * Enqueue Job
     */
    async enqueueJobV1JobsPostRaw(requestParameters: EnqueueJobV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.jobRequest === null || requestParameters.jobRequest === undefined) {
            throw new runtime.RequiredError('jobRequest','Required parameter requestParameters.jobRequest was null or undefined when calling enqueueJobV1JobsPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobRequestToJSON(requestParameters.jobRequest),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Enqueue Job
     */
    async enqueueJobV1JobsPost(requestParameters: EnqueueJobV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.enqueueJobV1JobsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGetRaw(requestParameters: ExportBookmarksV1BookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.format !== undefined) {
            queryParameters['format'] = requestParameters.format;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.fuzzy !== undefined) {
            queryParameters['fuzzy'] = requestParameters.fuzzy;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tag_id'] = requestParameters.tagId;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folder_id'] = requestParameters.folderId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/export`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGet(requestParameters: ExportBookmarksV1BookmarksExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters: GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling getBookmarkFolderV1BookmarksBookmarkIdFolderGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}/folder`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderV1BookmarksBookmarkIdFolderGet(requestParameters: GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters: GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling getBookmarkTagsV1BookmarksBookmarkIdTagsGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}/tags`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsV1BookmarksBookmarkIdTagsGet(requestParameters: GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGet(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut> {
        const response = await this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a job schedule
     */
    async getJobScheduleV1JobSchedulesScheduleIdGetRaw(requestParameters: GetJobScheduleV1JobSchedulesScheduleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling getJobScheduleV1JobSchedulesScheduleIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
    }

    /**
     * Get a job schedule
     */
    async getJobScheduleV1JobSchedulesScheduleIdGet(requestParameters: GetJobScheduleV1JobSchedulesScheduleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut> {
        const response = await this.getJobScheduleV1JobSchedulesScheduleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single job by id.
     * Get job
     */
    async getJobV1JobsJobIdGetRaw(requestParameters: GetJobV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling getJobV1JobsJobIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs/{job_id}`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
    }

    /**
     * Get a single job by id.
     * Get job
     */
    async getJobV1JobsJobIdGet(requestParameters: GetJobV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut> {
        const response = await this.getJobV1JobsJobIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get current user profile
     */
    async getMeV1MeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeOutFromJSON(jsonValue));
    }

    /**
     * Get current user profile
     */
    async getMeV1MeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeOut> {
        const response = await this.getMeV1MeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get organization details
     */
    async getOrganizationV1AdminOrgsOrganizationIdGetRaw(requestParameters: GetOrganizationV1AdminOrgsOrganizationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling getOrganizationV1AdminOrgsOrganizationIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/orgs/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
    }

    /**
     * Get organization details
     */
    async getOrganizationV1AdminOrgsOrganizationIdGet(requestParameters: GetOrganizationV1AdminOrgsOrganizationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail> {
        const response = await this.getOrganizationV1AdminOrgsOrganizationIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get role details
     */
    async getRoleV1AdminRolesRoleIdGetRaw(requestParameters: GetRoleV1AdminRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling getRoleV1AdminRolesRoleIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
    }

    /**
     * Get role details
     */
    async getRoleV1AdminRolesRoleIdGet(requestParameters: GetRoleV1AdminRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail> {
        const response = await this.getRoleV1AdminRolesRoleIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve setup progress
     */
    async getSetupStatusV1SiteSettingsSetupStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSetupStatusOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/site-settings/setup-status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteSetupStatusOutFromJSON(jsonValue));
    }

    /**
     * Retrieve setup progress
     */
    async getSetupStatusV1SiteSettingsSetupStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSetupStatusOut> {
        const response = await this.getSetupStatusV1SiteSettingsSetupStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Status
     */
    async getStatusV1StatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
    }

    /**
     * Get Status
     */
    async getStatusV1StatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.getStatusV1StatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get API token metadata
     */
    async getTokenV1MeTokensTokenIdGetRaw(requestParameters: GetTokenV1MeTokensTokenIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokenOut>> {
        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling getTokenV1MeTokensTokenIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokenOutFromJSON(jsonValue));
    }

    /**
     * Get API token metadata
     */
    async getTokenV1MeTokensTokenIdGet(requestParameters: GetTokenV1MeTokensTokenIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokenOut> {
        const response = await this.getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a user
     */
    async getUserV1AdminUsersUserIdGetRaw(requestParameters: GetUserV1AdminUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling getUserV1AdminUsersUserIdGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
    }

    /**
     * Get a user
     */
    async getUserV1AdminUsersUserIdGet(requestParameters: GetUserV1AdminUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut> {
        const response = await this.getUserV1AdminUsersUserIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Retrieve the public welcome message
     */
    async getWelcomeSettingV1SiteSettingsWelcomeGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteWelcomeSettingOut>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/site-settings/welcome`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteWelcomeSettingOutFromJSON(jsonValue));
    }

    /**
     * Retrieve the public welcome message
     */
    async getWelcomeSettingV1SiteSettingsWelcomeGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteWelcomeSettingOut> {
        const response = await this.getWelcomeSettingV1SiteSettingsWelcomeGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Grant a role to a user
     */
    async grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters: GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost.');
        }

        if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
            throw new runtime.RequiredError('roleName','Required parameter requestParameters.roleName was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/users/{user_id}/roles/{role_name}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters.roleName))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.body as any,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
    }

    /**
     * Grant a role to a user
     */
    async grantUserRoleV1AdminUsersUserIdRolesRoleNamePost(requestParameters: GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut> {
        const response = await this.grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHeadRaw(requestParameters: HeadBookmarksV1BookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tag_id'] = requestParameters.tagId;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folder_id'] = requestParameters.folderId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead(requestParameters: HeadBookmarksV1BookmarksHeadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_2Raw(requestParameters: HeadBookmarksV1BookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tag_id'] = requestParameters.tagId;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folder_id'] = requestParameters.folderId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks`,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_2(requestParameters: HeadBookmarksV1BookmarksHead0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHead_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations Status
     */
    async integrationsStatusV1StatusIntegrationsGetRaw(requestParameters: IntegrationsStatusV1StatusIntegrationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.instapaperCredId !== undefined) {
            queryParameters['instapaper_cred_id'] = requestParameters.instapaperCredId;
        }

        if (requestParameters.minifluxCredId !== undefined) {
            queryParameters['miniflux_cred_id'] = requestParameters.minifluxCredId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/status/integrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Integrations Status
     */
    async integrationsStatusV1StatusIntegrationsGet(requestParameters: IntegrationsStatusV1StatusIntegrationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.integrationsStatusV1StatusIntegrationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List audit log entries
     */
    async listAuditLogsV1AdminAuditGetRaw(requestParameters: ListAuditLogsV1AdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.entityType !== undefined) {
            queryParameters['entity_type'] = requestParameters.entityType;
        }

        if (requestParameters.entityId !== undefined) {
            queryParameters['entity_id'] = requestParameters.entityId;
        }

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.ownerUserId !== undefined) {
            queryParameters['owner_user_id'] = requestParameters.ownerUserId;
        }

        if (requestParameters.actorUserId !== undefined) {
            queryParameters['actor_user_id'] = requestParameters.actorUserId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/audit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
    }

    /**
     * List audit log entries
     */
    async listAuditLogsV1AdminAuditGet(requestParameters: ListAuditLogsV1AdminAuditGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage> {
        const response = await this.listAuditLogsV1AdminAuditGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGetRaw(requestParameters: ListBookmarksV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.fuzzy !== undefined) {
            queryParameters['fuzzy'] = requestParameters.fuzzy;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tag_id'] = requestParameters.tagId;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folder_id'] = requestParameters.folderId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet(requestParameters: ListBookmarksV1BookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_3Raw(requestParameters: ListBookmarksV1BookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.fuzzy !== undefined) {
            queryParameters['fuzzy'] = requestParameters.fuzzy;
        }

        if (requestParameters.feedId !== undefined) {
            queryParameters['feed_id'] = requestParameters.feedId;
        }

        if (requestParameters.tagId !== undefined) {
            queryParameters['tag_id'] = requestParameters.tagId;
        }

        if (requestParameters.folderId !== undefined) {
            queryParameters['folder_id'] = requestParameters.folderId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        if (requestParameters.sortBy !== undefined) {
            queryParameters['sort_by'] = requestParameters.sortBy;
        }

        if (requestParameters.sortDir !== undefined) {
            queryParameters['sort_dir'] = requestParameters.sortDir;
        }

        if (requestParameters.titleQuery !== undefined) {
            queryParameters['title_query'] = requestParameters.titleQuery;
        }

        if (requestParameters.urlQuery !== undefined) {
            queryParameters['url_query'] = requestParameters.urlQuery;
        }

        if (requestParameters.regex !== undefined) {
            queryParameters['regex'] = requestParameters.regex;
        }

        if (requestParameters.regexTarget !== undefined) {
            queryParameters['regex_target'] = requestParameters.regexTarget;
        }

        if (requestParameters.regexFlags !== undefined) {
            queryParameters['regex_flags'] = requestParameters.regexFlags;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_3(requestParameters: ListBookmarksV1BookmarksGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGet_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGetRaw(requestParameters: ListCredentialsV1V1CredentialsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialsPage>> {
        const queryParameters: any = {};

        if (requestParameters.includeGlobal !== undefined) {
            queryParameters['include_global'] = requestParameters.includeGlobal;
        }

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/credentials/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialsPageFromJSON(jsonValue));
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGet(requestParameters: ListCredentialsV1V1CredentialsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialsPage> {
        const response = await this.listCredentialsV1V1CredentialsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGet_4Raw(requestParameters: ListCredentialsV1V1CredentialsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialsPage>> {
        const queryParameters: any = {};

        if (requestParameters.includeGlobal !== undefined) {
            queryParameters['include_global'] = requestParameters.includeGlobal;
        }

        if (requestParameters.kind !== undefined) {
            queryParameters['kind'] = requestParameters.kind;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/credentials`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialsPageFromJSON(jsonValue));
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGet_4(requestParameters: ListCredentialsV1V1CredentialsGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialsPage> {
        const response = await this.listCredentialsV1V1CredentialsGet_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGetRaw(requestParameters: ListFeedsV1V1FeedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedsPage>> {
        const queryParameters: any = {};

        if (requestParameters.ownerUserIds !== undefined) {
            queryParameters['owner_user_ids'] = requestParameters.ownerUserIds;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/feeds/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedsPageFromJSON(jsonValue));
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGet(requestParameters: ListFeedsV1V1FeedsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedsPage> {
        const response = await this.listFeedsV1V1FeedsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGet_5Raw(requestParameters: ListFeedsV1V1FeedsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedsPage>> {
        const queryParameters: any = {};

        if (requestParameters.ownerUserIds !== undefined) {
            queryParameters['owner_user_ids'] = requestParameters.ownerUserIds;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/feeds`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedsPageFromJSON(jsonValue));
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGet_5(requestParameters: ListFeedsV1V1FeedsGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedsPage> {
        const response = await this.listFeedsV1V1FeedsGet_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listFoldersV1BookmarksFoldersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List job schedules
     */
    async listJobSchedulesV1JobSchedulesGetRaw(requestParameters: ListJobSchedulesV1JobSchedulesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobSchedulesPage>> {
        const queryParameters: any = {};

        if (requestParameters.ownerUserId !== undefined) {
            queryParameters['owner_user_id'] = requestParameters.ownerUserId;
        }

        if (requestParameters.jobType !== undefined) {
            queryParameters['job_type'] = requestParameters.jobType;
        }

        if (requestParameters.isActive !== undefined) {
            queryParameters['is_active'] = requestParameters.isActive;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobSchedulesPageFromJSON(jsonValue));
    }

    /**
     * List job schedules
     */
    async listJobSchedulesV1JobSchedulesGet(requestParameters: ListJobSchedulesV1JobSchedulesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobSchedulesPage> {
        const response = await this.listJobSchedulesV1JobSchedulesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List job schedules
     */
    async listJobSchedulesV1JobSchedulesGet_6Raw(requestParameters: ListJobSchedulesV1JobSchedulesGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobSchedulesPage>> {
        const queryParameters: any = {};

        if (requestParameters.ownerUserId !== undefined) {
            queryParameters['owner_user_id'] = requestParameters.ownerUserId;
        }

        if (requestParameters.jobType !== undefined) {
            queryParameters['job_type'] = requestParameters.jobType;
        }

        if (requestParameters.isActive !== undefined) {
            queryParameters['is_active'] = requestParameters.isActive;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobSchedulesPageFromJSON(jsonValue));
    }

    /**
     * List job schedules
     */
    async listJobSchedulesV1JobSchedulesGet_6(requestParameters: ListJobSchedulesV1JobSchedulesGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobSchedulesPage> {
        const response = await this.listJobSchedulesV1JobSchedulesGet_6Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGetRaw(requestParameters: ListJobsV1JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsPage>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.jobType !== undefined) {
            queryParameters['job_type'] = requestParameters.jobType;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.orderDir !== undefined) {
            queryParameters['order_dir'] = requestParameters.orderDir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobsPageFromJSON(jsonValue));
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGet(requestParameters: ListJobsV1JobsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsPage> {
        const response = await this.listJobsV1JobsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGet_7Raw(requestParameters: ListJobsV1JobsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsPage>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.jobType !== undefined) {
            queryParameters['job_type'] = requestParameters.jobType;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.orderDir !== undefined) {
            queryParameters['order_dir'] = requestParameters.orderDir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobsPageFromJSON(jsonValue));
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGet_7(requestParameters: ListJobsV1JobsGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsPage> {
        const response = await this.listJobsV1JobsGet_7Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List organizations
     */
    async listOrganizationsV1AdminOrgsGetRaw(requestParameters: ListOrganizationsV1AdminOrgsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationsPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.isDefault !== undefined) {
            queryParameters['is_default'] = requestParameters.isDefault;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/orgs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationsPageFromJSON(jsonValue));
    }

    /**
     * List organizations
     */
    async listOrganizationsV1AdminOrgsGet(requestParameters: ListOrganizationsV1AdminOrgsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationsPage> {
        const response = await this.listOrganizationsV1AdminOrgsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List roles
     */
    async listRolesV1AdminRolesGetRaw(requestParameters: ListRolesV1AdminRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRolesPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/roles`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminRolesPageFromJSON(jsonValue));
    }

    /**
     * List roles
     */
    async listRolesV1AdminRolesGet(requestParameters: ListRolesV1AdminRolesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRolesPage> {
        const response = await this.listRolesV1AdminRolesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List site configs
     */
    async listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters: ListSiteConfigsV1V1SiteConfigsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteConfigsPage>> {
        const queryParameters: any = {};

        if (requestParameters.includeGlobal !== undefined) {
            queryParameters['include_global'] = requestParameters.includeGlobal;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/site-configs/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteConfigsPageFromJSON(jsonValue));
    }

    /**
     * List site configs
     */
    async listSiteConfigsV1V1SiteConfigsGet(requestParameters: ListSiteConfigsV1V1SiteConfigsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteConfigsPage> {
        const response = await this.listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.listTagsV1BookmarksTagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List available templates
     */
    async listTemplatesV1TemplatesGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TemplateListResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/templates`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TemplateListResponseFromJSON(jsonValue));
    }

    /**
     * List available templates
     */
    async listTemplatesV1TemplatesGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TemplateListResponse> {
        const response = await this.listTemplatesV1TemplatesGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List API tokens
     */
    async listTokensV1MeTokensGetRaw(requestParameters: ListTokensV1MeTokensGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ApiTokensPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.includeRevoked !== undefined) {
            queryParameters['include_revoked'] = requestParameters.includeRevoked;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ApiTokensPageFromJSON(jsonValue));
    }

    /**
     * List API tokens
     */
    async listTokensV1MeTokensGet(requestParameters: ListTokensV1MeTokensGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ApiTokensPage> {
        const response = await this.listTokensV1MeTokensGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List users
     */
    async listUsersV1AdminUsersGetRaw(requestParameters: ListUsersV1AdminUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUsersPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.isActive !== undefined) {
            queryParameters['is_active'] = requestParameters.isActive;
        }

        if (requestParameters.role !== undefined) {
            queryParameters['role'] = requestParameters.role;
        }

        if (requestParameters.organizationId !== undefined) {
            queryParameters['organization_id'] = requestParameters.organizationId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/users`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUsersPageFromJSON(jsonValue));
    }

    /**
     * List users
     */
    async listUsersV1AdminUsersGet(requestParameters: ListUsersV1AdminUsersGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUsersPage> {
        const response = await this.listUsersV1AdminUsersGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling previewBookmarkV1BookmarksBookmarkIdPreviewGet.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}/preview`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkV1BookmarksBookmarkIdPreviewGet(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Remove a user from an organization
     */
    async removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRaw(requestParameters: RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete.');
        }

        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/orgs/{organization_id}/members/{user_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))).replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
    }

    /**
     * Remove a user from an organization
     */
    async removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete(requestParameters: RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail> {
        const response = await this.removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    async retryAllJobsV1JobsRetryAllPostRaw(requestParameters: RetryAllJobsV1JobsRetryAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling retryAllJobsV1JobsRetryAllPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs/retry-all`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    async retryAllJobsV1JobsRetryAllPost(requestParameters: RetryAllJobsV1JobsRetryAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.retryAllJobsV1JobsRetryAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    async retryJobV1JobsJobIdRetryPostRaw(requestParameters: RetryJobV1JobsJobIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>> {
        if (requestParameters.jobId === null || requestParameters.jobId === undefined) {
            throw new runtime.RequiredError('jobId','Required parameter requestParameters.jobId was null or undefined when calling retryJobV1JobsJobIdRetryPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs/{job_id}/retry`.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters.jobId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
    }

    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    async retryJobV1JobsJobIdRetryPost(requestParameters: RetryJobV1JobsJobIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut> {
        const response = await this.retryJobV1JobsJobIdRetryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Revoke an API token
     */
    async revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters: RevokeTokenV1MeTokensTokenIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
            throw new runtime.RequiredError('tokenId','Required parameter requestParameters.tokenId was null or undefined when calling revokeTokenV1MeTokensTokenIdDelete.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke an API token
     */
    async revokeTokenV1MeTokensTokenIdDelete(requestParameters: RevokeTokenV1MeTokensTokenIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Revoke a role from a user
     */
    async revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters: RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete.');
        }

        if (requestParameters.roleName === null || requestParameters.roleName === undefined) {
            throw new runtime.RequiredError('roleName','Required parameter requestParameters.roleName was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete.');
        }

        const queryParameters: any = {};

        if (requestParameters.confirm !== undefined) {
            queryParameters['confirm'] = requestParameters.confirm;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/users/{user_id}/roles/{role_name}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))).replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters.roleName))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Revoke a role from a user
     */
    async revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete(requestParameters: RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Enqueue a job for immediate execution
     */
    async runJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRaw(requestParameters: RunJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling runJobScheduleNowV1JobSchedulesScheduleIdRunNowPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules/{schedule_id}/run-now`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
    }

    /**
     * Enqueue a job for immediate execution
     */
    async runJobScheduleNowV1JobSchedulesScheduleIdRunNowPost(requestParameters: RunJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut> {
        const response = await this.runJobScheduleNowV1JobSchedulesScheduleIdRunNowPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    async streamJobsV1JobsStreamGetRaw(requestParameters: StreamJobsV1JobsStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters.status !== undefined) {
            queryParameters['status'] = requestParameters.status;
        }

        if (requestParameters.jobType !== undefined) {
            queryParameters['job_type'] = requestParameters.jobType;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.orderBy !== undefined) {
            queryParameters['order_by'] = requestParameters.orderBy;
        }

        if (requestParameters.orderDir !== undefined) {
            queryParameters['order_dir'] = requestParameters.orderDir;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs/stream`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    async streamJobsV1JobsStreamGet(requestParameters: StreamJobsV1JobsStreamGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.streamJobsV1JobsStreamGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test Instapaper creds
     */
    async testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters: TestInstapaperV1IntegrationsInstapaperTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling testInstapaperV1IntegrationsInstapaperTestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/integrations/instapaper/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test Instapaper creds
     */
    async testInstapaperV1IntegrationsInstapaperTestPost(requestParameters: TestInstapaperV1IntegrationsInstapaperTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test Miniflux creds
     */
    async testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters: TestMinifluxV1IntegrationsMinifluxTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling testMinifluxV1IntegrationsMinifluxTestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/integrations/miniflux/test`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test Miniflux creds
     */
    async testMinifluxV1IntegrationsMinifluxTestPost(requestParameters: TestMinifluxV1IntegrationsMinifluxTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test site config selectors against the login page
     */
    async testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters: TestSiteConfigV1SiteConfigsConfigIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.configId === null || requestParameters.configId === undefined) {
            throw new runtime.RequiredError('configId','Required parameter requestParameters.configId was null or undefined when calling testSiteConfigV1SiteConfigsConfigIdTestPost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/site-configs/{config_id}/test`.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters.configId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test site config selectors against the login page
     */
    async testSiteConfigV1SiteConfigsConfigIdTestPost(requestParameters: TestSiteConfigV1SiteConfigsConfigIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Toggle schedule active state
     */
    async toggleJobScheduleV1JobSchedulesScheduleIdTogglePostRaw(requestParameters: ToggleJobScheduleV1JobSchedulesScheduleIdTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling toggleJobScheduleV1JobSchedulesScheduleIdTogglePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules/{schedule_id}/toggle`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
    }

    /**
     * Toggle schedule active state
     */
    async toggleJobScheduleV1JobSchedulesScheduleIdTogglePost(requestParameters: ToggleJobScheduleV1JobSchedulesScheduleIdTogglePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut> {
        const response = await this.toggleJobScheduleV1JobSchedulesScheduleIdTogglePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters: UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut.');
        }

        if (requestParameters.bookmarkFolderUpdate === null || requestParameters.bookmarkFolderUpdate === undefined) {
            throw new runtime.RequiredError('bookmarkFolderUpdate','Required parameter requestParameters.bookmarkFolderUpdate was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}/folder`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkFolderUpdateToJSON(requestParameters.bookmarkFolderUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderV1BookmarksBookmarkIdFolderPut(requestParameters: UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters: UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters.bookmarkId === null || requestParameters.bookmarkId === undefined) {
            throw new runtime.RequiredError('bookmarkId','Required parameter requestParameters.bookmarkId was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut.');
        }

        if (requestParameters.bookmarkTagsUpdate === null || requestParameters.bookmarkTagsUpdate === undefined) {
            throw new runtime.RequiredError('bookmarkTagsUpdate','Required parameter requestParameters.bookmarkTagsUpdate was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/{bookmark_id}/tags`.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters.bookmarkId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkTagsUpdateToJSON(requestParameters.bookmarkTagsUpdate),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsV1BookmarksBookmarkIdTagsPut(requestParameters: UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters.folderId === null || requestParameters.folderId === undefined) {
            throw new runtime.RequiredError('folderId','Required parameter requestParameters.folderId was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut.');
        }

        if (requestParameters.folderUpdate === null || requestParameters.folderUpdate === undefined) {
            throw new runtime.RequiredError('folderUpdate','Required parameter requestParameters.folderUpdate was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/folders/{folder_id}`.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters.folderId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderUpdateToJSON(requestParameters.folderUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPut(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a job schedule
     */
    async updateJobScheduleV1JobSchedulesScheduleIdPatchRaw(requestParameters: UpdateJobScheduleV1JobSchedulesScheduleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobScheduleOut>> {
        if (requestParameters.scheduleId === null || requestParameters.scheduleId === undefined) {
            throw new runtime.RequiredError('scheduleId','Required parameter requestParameters.scheduleId was null or undefined when calling updateJobScheduleV1JobSchedulesScheduleIdPatch.');
        }

        if (requestParameters.jobScheduleUpdate === null || requestParameters.jobScheduleUpdate === undefined) {
            throw new runtime.RequiredError('jobScheduleUpdate','Required parameter requestParameters.jobScheduleUpdate was null or undefined when calling updateJobScheduleV1JobSchedulesScheduleIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/job-schedules/{schedule_id}`.replace(`{${"schedule_id"}}`, encodeURIComponent(String(requestParameters.scheduleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: JobScheduleUpdateToJSON(requestParameters.jobScheduleUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobScheduleOutFromJSON(jsonValue));
    }

    /**
     * Update a job schedule
     */
    async updateJobScheduleV1JobSchedulesScheduleIdPatch(requestParameters: UpdateJobScheduleV1JobSchedulesScheduleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobScheduleOut> {
        const response = await this.updateJobScheduleV1JobSchedulesScheduleIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update current user profile
     */
    async updateMeV1MePatchRaw(requestParameters: UpdateMeV1MePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MeOut>> {
        if (requestParameters.meUpdate === null || requestParameters.meUpdate === undefined) {
            throw new runtime.RequiredError('meUpdate','Required parameter requestParameters.meUpdate was null or undefined when calling updateMeV1MePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/me`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: MeUpdateToJSON(requestParameters.meUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MeOutFromJSON(jsonValue));
    }

    /**
     * Update current user profile
     */
    async updateMeV1MePatch(requestParameters: UpdateMeV1MePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MeOut> {
        const response = await this.updateMeV1MePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update an organization
     */
    async updateOrganizationV1AdminOrgsOrganizationIdPatchRaw(requestParameters: UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>> {
        if (requestParameters.organizationId === null || requestParameters.organizationId === undefined) {
            throw new runtime.RequiredError('organizationId','Required parameter requestParameters.organizationId was null or undefined when calling updateOrganizationV1AdminOrgsOrganizationIdPatch.');
        }

        if (requestParameters.adminOrganizationUpdate === null || requestParameters.adminOrganizationUpdate === undefined) {
            throw new runtime.RequiredError('adminOrganizationUpdate','Required parameter requestParameters.adminOrganizationUpdate was null or undefined when calling updateOrganizationV1AdminOrgsOrganizationIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/orgs/{organization_id}`.replace(`{${"organization_id"}}`, encodeURIComponent(String(requestParameters.organizationId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AdminOrganizationUpdateToJSON(requestParameters.adminOrganizationUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminOrganizationDetailFromJSON(jsonValue));
    }

    /**
     * Update an organization
     */
    async updateOrganizationV1AdminOrgsOrganizationIdPatch(requestParameters: UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail> {
        const response = await this.updateOrganizationV1AdminOrgsOrganizationIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a role
     */
    async updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters: UpdateRoleV1AdminRolesRoleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>> {
        if (requestParameters.roleId === null || requestParameters.roleId === undefined) {
            throw new runtime.RequiredError('roleId','Required parameter requestParameters.roleId was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch.');
        }

        if (requestParameters.adminRoleUpdate === null || requestParameters.adminRoleUpdate === undefined) {
            throw new runtime.RequiredError('adminRoleUpdate','Required parameter requestParameters.adminRoleUpdate was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/roles/{role_id}`.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters.roleId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AdminRoleUpdateToJSON(requestParameters.adminRoleUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminRoleDetailFromJSON(jsonValue));
    }

    /**
     * Update a role
     */
    async updateRoleV1AdminRolesRoleIdPatch(requestParameters: UpdateRoleV1AdminRolesRoleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail> {
        const response = await this.updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or replace setup progress
     */
    async updateSetupStatusV1SiteSettingsSetupStatusPutRaw(requestParameters: UpdateSetupStatusV1SiteSettingsSetupStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteSetupStatusOut>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateSetupStatusV1SiteSettingsSetupStatusPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/site-settings/setup-status`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteSetupStatusOutFromJSON(jsonValue));
    }

    /**
     * Create or replace setup progress
     */
    async updateSetupStatusV1SiteSettingsSetupStatusPut(requestParameters: UpdateSetupStatusV1SiteSettingsSetupStatusPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteSetupStatusOut> {
        const response = await this.updateSetupStatusV1SiteSettingsSetupStatusPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPutRaw(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters.tagId === null || requestParameters.tagId === undefined) {
            throw new runtime.RequiredError('tagId','Required parameter requestParameters.tagId was null or undefined when calling updateTagV1BookmarksTagsTagIdPut.');
        }

        if (requestParameters.tagUpdate === null || requestParameters.tagUpdate === undefined) {
            throw new runtime.RequiredError('tagUpdate','Required parameter requestParameters.tagUpdate was null or undefined when calling updateTagV1BookmarksTagsTagIdPut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
            headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/bookmarks/tags/{tag_id}`.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters.tagId))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagUpdateToJSON(requestParameters.tagUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPut(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update user role overrides
     */
    async updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRaw(requestParameters: UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch.');
        }

        if (requestParameters.adminUserRoleOverridesUpdate === null || requestParameters.adminUserRoleOverridesUpdate === undefined) {
            throw new runtime.RequiredError('adminUserRoleOverridesUpdate','Required parameter requestParameters.adminUserRoleOverridesUpdate was null or undefined when calling updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/users/{user_id}/role-overrides`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AdminUserRoleOverridesUpdateToJSON(requestParameters.adminUserRoleOverridesUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
    }

    /**
     * Update user role overrides
     */
    async updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch(requestParameters: UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut> {
        const response = await this.updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update a user
     */
    async updateUserV1AdminUsersUserIdPatchRaw(requestParameters: UpdateUserV1AdminUsersUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>> {
        if (requestParameters.userId === null || requestParameters.userId === undefined) {
            throw new runtime.RequiredError('userId','Required parameter requestParameters.userId was null or undefined when calling updateUserV1AdminUsersUserIdPatch.');
        }

        if (requestParameters.adminUserUpdate === null || requestParameters.adminUserUpdate === undefined) {
            throw new runtime.RequiredError('adminUserUpdate','Required parameter requestParameters.adminUserUpdate was null or undefined when calling updateUserV1AdminUsersUserIdPatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/admin/users/{user_id}`.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters.userId))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: AdminUserUpdateToJSON(requestParameters.adminUserUpdate),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AdminUserOutFromJSON(jsonValue));
    }

    /**
     * Update a user
     */
    async updateUserV1AdminUsersUserIdPatch(requestParameters: UpdateUserV1AdminUsersUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut> {
        const response = await this.updateUserV1AdminUsersUserIdPatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Partially update the welcome message
     */
    async updateWelcomeSettingV1SiteSettingsWelcomePatchRaw(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteWelcomeSettingOut>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateWelcomeSettingV1SiteSettingsWelcomePatch.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/site-settings/welcome`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteWelcomeSettingOutFromJSON(jsonValue));
    }

    /**
     * Partially update the welcome message
     */
    async updateWelcomeSettingV1SiteSettingsWelcomePatch(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteWelcomeSettingOut> {
        const response = await this.updateWelcomeSettingV1SiteSettingsWelcomePatchRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create or replace the welcome message
     */
    async updateWelcomeSettingV1SiteSettingsWelcomePutRaw(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteWelcomeSettingOut>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling updateWelcomeSettingV1SiteSettingsWelcomePut.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/site-settings/welcome`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteWelcomeSettingOutFromJSON(jsonValue));
    }

    /**
     * Create or replace the welcome message
     */
    async updateWelcomeSettingV1SiteSettingsWelcomePut(requestParameters: UpdateWelcomeSettingV1SiteSettingsWelcomePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteWelcomeSettingOut> {
        const response = await this.updateWelcomeSettingV1SiteSettingsWelcomePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    async validateJobPayloadV1JobsValidatePostRaw(requestParameters: ValidateJobPayloadV1JobsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters.requestBody === null || requestParameters.requestBody === undefined) {
            throw new runtime.RequiredError('requestBody','Required parameter requestParameters.requestBody was null or undefined when calling validateJobPayloadV1JobsValidatePost.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/jobs/validate`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters.requestBody,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    async validateJobPayloadV1JobsValidatePost(requestParameters: ValidateJobPayloadV1JobsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.validateJobPayloadV1JobsValidatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
