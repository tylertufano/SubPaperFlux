/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookmarkFolderUpdate,
  BookmarkOut,
  BookmarkTagsUpdate,
  BookmarksPage,
  CredentialsPage,
  FeedsPage,
  FolderCreate,
  FolderOut,
  FolderUpdate,
  HTTPValidationError,
  JobOut,
  JobRequest,
  JobsPage,
  SiteConfigsPage,
  StatusResponse,
  TagCreate,
  TagOut,
  TagUpdate,
} from '../models/index';
import {
    BookmarkFolderUpdateFromJSON,
    BookmarkFolderUpdateToJSON,
    BookmarkOutFromJSON,
    BookmarkOutToJSON,
    BookmarkTagsUpdateFromJSON,
    BookmarkTagsUpdateToJSON,
    BookmarksPageFromJSON,
    BookmarksPageToJSON,
    CredentialsPageFromJSON,
    CredentialsPageToJSON,
    FeedsPageFromJSON,
    FeedsPageToJSON,
    FolderCreateFromJSON,
    FolderCreateToJSON,
    FolderOutFromJSON,
    FolderOutToJSON,
    FolderUpdateFromJSON,
    FolderUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    JobOutFromJSON,
    JobOutToJSON,
    JobRequestFromJSON,
    JobRequestToJSON,
    JobsPageFromJSON,
    JobsPageToJSON,
    SiteConfigsPageFromJSON,
    SiteConfigsPageToJSON,
    StatusResponseFromJSON,
    StatusResponseToJSON,
    TagCreateFromJSON,
    TagCreateToJSON,
    TagOutFromJSON,
    TagOutToJSON,
    TagUpdateFromJSON,
    TagUpdateToJSON,
} from '../models/index';

export interface BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkPublishBookmarksV1BookmarksBulkPublishPostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface CountBookmarksV1BookmarksCountGetRequest {
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    search?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
    size?: number;
}

export interface CreateFolderV1BookmarksFoldersPostRequest {
    folderCreate: FolderCreate;
    xCsrfToken?: string | null;
}

export interface CreateTagV1BookmarksTagsPostRequest {
    tagCreate: TagCreate;
    xCsrfToken?: string | null;
}

export interface DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest {
    bookmarkId: string;
    xCsrfToken?: string | null;
}

export interface DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest {
    bookmarkId: string;
    deleteRemote?: boolean;
    xCsrfToken?: string | null;
}

export interface DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest {
    folderId: string;
    xCsrfToken?: string | null;
}

export interface DeleteTagV1BookmarksTagsTagIdDeleteRequest {
    tagId: string;
    xCsrfToken?: string | null;
}

export interface EnqueueJobV1JobsPostRequest {
    jobRequest: JobRequest;
}

export interface ExportBookmarksV1BookmarksExportGetRequest {
    format?: string;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkV1BookmarksBookmarkIdGetRequest {
    bookmarkId: string;
}

export interface GetJobV1JobsJobIdGetRequest {
    jobId: string;
}

export interface HeadBookmarksV1BookmarksHeadRequest {
    search?: string | null;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface HeadBookmarksV1BookmarksHead0Request {
    search?: string | null;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface IntegrationsStatusV1StatusIntegrationsGetRequest {
    instapaperCredId?: string | null;
    minifluxCredId?: string | null;
}

export interface ListBookmarksV1BookmarksGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksV1BookmarksGet0Request {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListCredentialsV1V1CredentialsGetRequest {
    includeGlobal?: boolean;
    kind?: string | null;
    page?: number;
    size?: number;
}

export interface ListCredentialsV1V1CredentialsGet0Request {
    includeGlobal?: boolean;
    kind?: string | null;
    page?: number;
    size?: number;
}

export interface ListFeedsV1V1FeedsGetRequest {
    page?: number;
    size?: number;
}

export interface ListFeedsV1V1FeedsGet0Request {
    page?: number;
    size?: number;
}

export interface ListJobsV1JobsGetRequest {
    status?: string | null;
    jobType?: string | null;
    page?: number;
    size?: number;
    orderBy?: string;
    orderDir?: string;
}

export interface ListJobsV1JobsGet0Request {
    status?: string | null;
    jobType?: string | null;
    page?: number;
    size?: number;
    orderBy?: string;
    orderDir?: string;
}

export interface ListSiteConfigsV1V1SiteConfigsGetRequest {
    includeGlobal?: boolean;
    search?: string | null;
    page?: number;
    size?: number;
}

export interface RetryAllJobsV1JobsRetryAllPostRequest {
    requestBody: { [key: string]: any; };
}

export interface RetryJobV1JobsJobIdRetryPostRequest {
    jobId: string;
}

export interface StreamJobsV1JobsStreamGetRequest {
    status?: string | null;
    jobType?: string | null;
    page?: number;
    size?: number;
    orderBy?: string;
    orderDir?: string;
}

export interface TestInstapaperV1IntegrationsInstapaperTestPostRequest {
    requestBody: { [key: string]: any; };
}

export interface TestMinifluxV1IntegrationsMinifluxTestPostRequest {
    requestBody: { [key: string]: any; };
}

export interface TestSiteConfigV1SiteConfigsConfigIdTestPostRequest {
    configId: string;
}

export interface UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest {
    bookmarkId: string;
    bookmarkFolderUpdate: BookmarkFolderUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest {
    bookmarkId: string;
    bookmarkTagsUpdate: BookmarkTagsUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateFolderV1BookmarksFoldersFolderIdPutRequest {
    folderId: string;
    folderUpdate: FolderUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateTagV1BookmarksTagsTagIdPutRequest {
    tagId: string;
    tagUpdate: TagUpdate;
    xCsrfToken?: string | null;
}

export interface ValidateJobPayloadV1JobsValidatePostRequest {
    requestBody: { [key: string]: any; };
}

/**
 * 
 */
export class V1Api extends runtime.BaseAPI {

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/bulk-delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/bulk-publish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGetRaw(requestParameters: CountBookmarksV1BookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGet(requestParameters: CountBookmarksV1BookmarksCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPostRaw(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['folderCreate'] == null) {
            throw new runtime.RequiredError(
                'folderCreate',
                'Required parameter "folderCreate" was null or undefined when calling createFolderV1BookmarksFoldersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderCreateToJSON(requestParameters['folderCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPost(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPostRaw(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters['tagCreate'] == null) {
            throw new runtime.RequiredError(
                'tagCreate',
                'Required parameter "tagCreate" was null or undefined when calling createTagV1BookmarksTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCreateToJSON(requestParameters['tagCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPost(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Db Status
     */
    async dbStatusV1StatusDbGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/status/db`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Db Status
     */
    async dbStatusV1StatusDbGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.dbStatusV1StatusDbGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters: DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete(requestParameters: DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteRemote'] != null) {
            queryParameters['delete_remote'] = requestParameters['deleteRemote'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['folderId'] == null) {
            throw new runtime.RequiredError(
                'folderId',
                'Required parameter "folderId" was null or undefined when calling deleteFolderV1BookmarksFoldersFolderIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders/{folder_id}`;
        urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling deleteTagV1BookmarksTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags/{tag_id}`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDelete(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Enqueue Job
     */
    async enqueueJobV1JobsPostRaw(requestParameters: EnqueueJobV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['jobRequest'] == null) {
            throw new runtime.RequiredError(
                'jobRequest',
                'Required parameter "jobRequest" was null or undefined when calling enqueueJobV1JobsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: JobRequestToJSON(requestParameters['jobRequest']),
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Enqueue Job
     */
    async enqueueJobV1JobsPost(requestParameters: EnqueueJobV1JobsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.enqueueJobV1JobsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGetRaw(requestParameters: ExportBookmarksV1BookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGet(requestParameters: ExportBookmarksV1BookmarksExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters: GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkFolderV1BookmarksBookmarkIdFolderGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderV1BookmarksBookmarkIdFolderGet(requestParameters: GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters: GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkTagsV1BookmarksBookmarkIdTagsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsV1BookmarksBookmarkIdTagsGet(requestParameters: GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGet(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut> {
        const response = await this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a single job by id.
     * Get job
     */
    async getJobV1JobsJobIdGetRaw(requestParameters: GetJobV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling getJobV1JobsJobIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs/{job_id}`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
    }

    /**
     * Get a single job by id.
     * Get job
     */
    async getJobV1JobsJobIdGet(requestParameters: GetJobV1JobsJobIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut> {
        const response = await this.getJobV1JobsJobIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Status
     */
    async getStatusV1StatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};


        let urlPath = `/v1/status`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
    }

    /**
     * Get Status
     */
    async getStatusV1StatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.getStatusV1StatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHeadRaw(requestParameters: HeadBookmarksV1BookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead(requestParameters: HeadBookmarksV1BookmarksHeadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_1Raw(requestParameters: HeadBookmarksV1BookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_1(requestParameters: HeadBookmarksV1BookmarksHead0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHead_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations Status
     */
    async integrationsStatusV1StatusIntegrationsGetRaw(requestParameters: IntegrationsStatusV1StatusIntegrationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['instapaperCredId'] != null) {
            queryParameters['instapaper_cred_id'] = requestParameters['instapaperCredId'];
        }

        if (requestParameters['minifluxCredId'] != null) {
            queryParameters['miniflux_cred_id'] = requestParameters['minifluxCredId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/status/integrations`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Integrations Status
     */
    async integrationsStatusV1StatusIntegrationsGet(requestParameters: IntegrationsStatusV1StatusIntegrationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.integrationsStatusV1StatusIntegrationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGetRaw(requestParameters: ListBookmarksV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet(requestParameters: ListBookmarksV1BookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_2Raw(requestParameters: ListBookmarksV1BookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_2(requestParameters: ListBookmarksV1BookmarksGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGet_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGetRaw(requestParameters: ListCredentialsV1V1CredentialsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialsPage>> {
        const queryParameters: any = {};

        if (requestParameters['includeGlobal'] != null) {
            queryParameters['include_global'] = requestParameters['includeGlobal'];
        }

        if (requestParameters['kind'] != null) {
            queryParameters['kind'] = requestParameters['kind'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/credentials/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialsPageFromJSON(jsonValue));
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGet(requestParameters: ListCredentialsV1V1CredentialsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialsPage> {
        const response = await this.listCredentialsV1V1CredentialsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGet_3Raw(requestParameters: ListCredentialsV1V1CredentialsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CredentialsPage>> {
        const queryParameters: any = {};

        if (requestParameters['includeGlobal'] != null) {
            queryParameters['include_global'] = requestParameters['includeGlobal'];
        }

        if (requestParameters['kind'] != null) {
            queryParameters['kind'] = requestParameters['kind'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/credentials`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialsPageFromJSON(jsonValue));
    }

    /**
     * List credentials
     */
    async listCredentialsV1V1CredentialsGet_3(requestParameters: ListCredentialsV1V1CredentialsGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CredentialsPage> {
        const response = await this.listCredentialsV1V1CredentialsGet_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGetRaw(requestParameters: ListFeedsV1V1FeedsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedsPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/feeds/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedsPageFromJSON(jsonValue));
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGet(requestParameters: ListFeedsV1V1FeedsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedsPage> {
        const response = await this.listFeedsV1V1FeedsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGet_4Raw(requestParameters: ListFeedsV1V1FeedsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FeedsPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/feeds`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FeedsPageFromJSON(jsonValue));
    }

    /**
     * List feeds
     */
    async listFeedsV1V1FeedsGet_4(requestParameters: ListFeedsV1V1FeedsGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FeedsPage> {
        const response = await this.listFeedsV1V1FeedsGet_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FolderOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FolderOutFromJSON));
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FolderOut>> {
        const response = await this.listFoldersV1BookmarksFoldersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGetRaw(requestParameters: ListJobsV1JobsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsPage>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['jobType'] != null) {
            queryParameters['job_type'] = requestParameters['jobType'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDir'] != null) {
            queryParameters['order_dir'] = requestParameters['orderDir'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobsPageFromJSON(jsonValue));
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGet(requestParameters: ListJobsV1JobsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsPage> {
        const response = await this.listJobsV1JobsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGet_5Raw(requestParameters: ListJobsV1JobsGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobsPage>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['jobType'] != null) {
            queryParameters['job_type'] = requestParameters['jobType'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDir'] != null) {
            queryParameters['order_dir'] = requestParameters['orderDir'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobsPageFromJSON(jsonValue));
    }

    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    async listJobsV1JobsGet_5(requestParameters: ListJobsV1JobsGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobsPage> {
        const response = await this.listJobsV1JobsGet_5Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List site configs
     */
    async listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters: ListSiteConfigsV1V1SiteConfigsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SiteConfigsPage>> {
        const queryParameters: any = {};

        if (requestParameters['includeGlobal'] != null) {
            queryParameters['include_global'] = requestParameters['includeGlobal'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/site-configs/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SiteConfigsPageFromJSON(jsonValue));
    }

    /**
     * List site configs
     */
    async listSiteConfigsV1V1SiteConfigsGet(requestParameters: ListSiteConfigsV1V1SiteConfigsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SiteConfigsPage> {
        const response = await this.listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.listTagsV1BookmarksTagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Postgres Enable Rls
     */
    async postgresEnableRlsV1AdminPostgresEnableRlsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/admin/postgres/enable-rls`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Postgres Enable Rls
     */
    async postgresEnableRlsV1AdminPostgresEnableRlsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.postgresEnableRlsV1AdminPostgresEnableRlsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Postgres Prepare
     */
    async postgresPrepareV1AdminPostgresPreparePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/admin/postgres/prepare`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Postgres Prepare
     */
    async postgresPrepareV1AdminPostgresPreparePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.postgresPrepareV1AdminPostgresPreparePostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    async retryAllJobsV1JobsRetryAllPostRaw(requestParameters: RetryAllJobsV1JobsRetryAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling retryAllJobsV1JobsRetryAllPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs/retry-all`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    async retryAllJobsV1JobsRetryAllPost(requestParameters: RetryAllJobsV1JobsRetryAllPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.retryAllJobsV1JobsRetryAllPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    async retryJobV1JobsJobIdRetryPostRaw(requestParameters: RetryJobV1JobsJobIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<JobOut>> {
        if (requestParameters['jobId'] == null) {
            throw new runtime.RequiredError(
                'jobId',
                'Required parameter "jobId" was null or undefined when calling retryJobV1JobsJobIdRetryPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs/{job_id}/retry`;
        urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => JobOutFromJSON(jsonValue));
    }

    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    async retryJobV1JobsJobIdRetryPost(requestParameters: RetryJobV1JobsJobIdRetryPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<JobOut> {
        const response = await this.retryJobV1JobsJobIdRetryPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    async streamJobsV1JobsStreamGetRaw(requestParameters: StreamJobsV1JobsStreamGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['jobType'] != null) {
            queryParameters['job_type'] = requestParameters['jobType'];
        }

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['orderBy'] != null) {
            queryParameters['order_by'] = requestParameters['orderBy'];
        }

        if (requestParameters['orderDir'] != null) {
            queryParameters['order_dir'] = requestParameters['orderDir'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs/stream`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    async streamJobsV1JobsStreamGet(requestParameters: StreamJobsV1JobsStreamGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.streamJobsV1JobsStreamGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test Instapaper creds
     */
    async testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters: TestInstapaperV1IntegrationsInstapaperTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling testInstapaperV1IntegrationsInstapaperTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/integrations/instapaper/test`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test Instapaper creds
     */
    async testInstapaperV1IntegrationsInstapaperTestPost(requestParameters: TestInstapaperV1IntegrationsInstapaperTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test Miniflux creds
     */
    async testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters: TestMinifluxV1IntegrationsMinifluxTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling testMinifluxV1IntegrationsMinifluxTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/integrations/miniflux/test`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test Miniflux creds
     */
    async testMinifluxV1IntegrationsMinifluxTestPost(requestParameters: TestMinifluxV1IntegrationsMinifluxTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test site config selectors against the login page
     */
    async testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters: TestSiteConfigV1SiteConfigsConfigIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['configId'] == null) {
            throw new runtime.RequiredError(
                'configId',
                'Required parameter "configId" was null or undefined when calling testSiteConfigV1SiteConfigsConfigIdTestPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/site-configs/{config_id}/test`;
        urlPath = urlPath.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters['configId'])));

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Test site config selectors against the login page
     */
    async testSiteConfigV1SiteConfigsConfigIdTestPost(requestParameters: TestSiteConfigV1SiteConfigsConfigIdTestPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters: UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().'
            );
        }

        if (requestParameters['bookmarkFolderUpdate'] == null) {
            throw new runtime.RequiredError(
                'bookmarkFolderUpdate',
                'Required parameter "bookmarkFolderUpdate" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkFolderUpdateToJSON(requestParameters['bookmarkFolderUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderV1BookmarksBookmarkIdFolderPut(requestParameters: UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters: UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().'
            );
        }

        if (requestParameters['bookmarkTagsUpdate'] == null) {
            throw new runtime.RequiredError(
                'bookmarkTagsUpdate',
                'Required parameter "bookmarkTagsUpdate" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkTagsUpdateToJSON(requestParameters['bookmarkTagsUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsV1BookmarksBookmarkIdTagsPut(requestParameters: UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['folderId'] == null) {
            throw new runtime.RequiredError(
                'folderId',
                'Required parameter "folderId" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().'
            );
        }

        if (requestParameters['folderUpdate'] == null) {
            throw new runtime.RequiredError(
                'folderUpdate',
                'Required parameter "folderUpdate" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders/{folder_id}`;
        urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderUpdateToJSON(requestParameters['folderUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPut(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPutRaw(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().'
            );
        }

        if (requestParameters['tagUpdate'] == null) {
            throw new runtime.RequiredError(
                'tagUpdate',
                'Required parameter "tagUpdate" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags/{tag_id}`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagUpdateToJSON(requestParameters['tagUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPut(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    async validateJobPayloadV1JobsValidatePostRaw(requestParameters: ValidateJobPayloadV1JobsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling validateJobPayloadV1JobsValidatePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/jobs/validate`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    async validateJobPayloadV1JobsValidatePost(requestParameters: ValidateJobPayloadV1JobsValidatePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.validateJobPayloadV1JobsValidatePostRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
