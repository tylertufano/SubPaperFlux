/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  StatusResponse,
} from '../models';
import {
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    StatusResponseFromJSON,
    StatusResponseToJSON,
} from '../models';

export interface IntegrationsStatusStatusIntegrationsGetRequest {
    instapaperCredId?: any;
    minifluxCredId?: any;
}

export interface IntegrationsStatusV1StatusIntegrationsGetRequest {
    instapaperCredId?: any;
    minifluxCredId?: any;
}

/**
 * 
 */
export class StatusApi extends runtime.BaseAPI {

    /**
     * Db Status
     */
    async dbStatusStatusDbGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status/db`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Db Status
     */
    async dbStatusStatusDbGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.dbStatusStatusDbGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Db Status
     */
    async dbStatusV1StatusDbGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/status/db`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Db Status
     */
    async dbStatusV1StatusDbGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.dbStatusV1StatusDbGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Status
     */
    async getStatusStatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
    }

    /**
     * Get Status
     */
    async getStatusStatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.getStatusStatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get Status
     */
    async getStatusV1StatusGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StatusResponse>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/v1/status`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StatusResponseFromJSON(jsonValue));
    }

    /**
     * Get Status
     */
    async getStatusV1StatusGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StatusResponse> {
        const response = await this.getStatusV1StatusGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Integrations Status
     */
    async integrationsStatusStatusIntegrationsGetRaw(requestParameters: IntegrationsStatusStatusIntegrationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.instapaperCredId !== undefined) {
            queryParameters['instapaper_cred_id'] = requestParameters.instapaperCredId;
        }

        if (requestParameters.minifluxCredId !== undefined) {
            queryParameters['miniflux_cred_id'] = requestParameters.minifluxCredId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/status/integrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Integrations Status
     */
    async integrationsStatusStatusIntegrationsGet(requestParameters: IntegrationsStatusStatusIntegrationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.integrationsStatusStatusIntegrationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Integrations Status
     */
    async integrationsStatusV1StatusIntegrationsGetRaw(requestParameters: IntegrationsStatusV1StatusIntegrationsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters.instapaperCredId !== undefined) {
            queryParameters['instapaper_cred_id'] = requestParameters.instapaperCredId;
        }

        if (requestParameters.minifluxCredId !== undefined) {
            queryParameters['miniflux_cred_id'] = requestParameters.minifluxCredId;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/v1/status/integrations`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Integrations Status
     */
    async integrationsStatusV1StatusIntegrationsGet(requestParameters: IntegrationsStatusV1StatusIntegrationsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.integrationsStatusV1StatusIntegrationsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
