/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditLogsPage,
  HTTPValidationError,
} from '../models';
import {
    AuditLogsPageFromJSON,
    AuditLogsPageToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models';

export interface ListAuditLogsAdminAuditGetRequest {
    page?: any;
    size?: any;
    entityType?: any;
    entityId?: any;
    action?: any;
    ownerUserId?: any;
    actorUserId?: any;
    since?: any;
    until?: any;
}

export interface ListAuditLogsAdminAuditGet0Request {
    page?: any;
    size?: any;
    entityType?: any;
    entityId?: any;
    action?: any;
    ownerUserId?: any;
    actorUserId?: any;
    since?: any;
    until?: any;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGetRaw(requestParameters: ListAuditLogsAdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.entityType !== undefined) {
            queryParameters['entity_type'] = requestParameters.entityType;
        }

        if (requestParameters.entityId !== undefined) {
            queryParameters['entity_id'] = requestParameters.entityId;
        }

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.ownerUserId !== undefined) {
            queryParameters['owner_user_id'] = requestParameters.ownerUserId;
        }

        if (requestParameters.actorUserId !== undefined) {
            queryParameters['actor_user_id'] = requestParameters.actorUserId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/audit/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
    }

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGet(requestParameters: ListAuditLogsAdminAuditGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage> {
        const response = await this.listAuditLogsAdminAuditGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGet_1Raw(requestParameters: ListAuditLogsAdminAuditGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>> {
        const queryParameters: any = {};

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.size !== undefined) {
            queryParameters['size'] = requestParameters.size;
        }

        if (requestParameters.entityType !== undefined) {
            queryParameters['entity_type'] = requestParameters.entityType;
        }

        if (requestParameters.entityId !== undefined) {
            queryParameters['entity_id'] = requestParameters.entityId;
        }

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.ownerUserId !== undefined) {
            queryParameters['owner_user_id'] = requestParameters.ownerUserId;
        }

        if (requestParameters.actorUserId !== undefined) {
            queryParameters['actor_user_id'] = requestParameters.actorUserId;
        }

        if (requestParameters.since !== undefined) {
            queryParameters['since'] = requestParameters.since;
        }

        if (requestParameters.until !== undefined) {
            queryParameters['until'] = requestParameters.until;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/audit`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
    }

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGet_1(requestParameters: ListAuditLogsAdminAuditGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage> {
        const response = await this.listAuditLogsAdminAuditGet_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Postgres Enable Rls
     */
    async postgresEnableRlsAdminPostgresEnableRlsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/postgres/enable-rls`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Postgres Enable Rls
     */
    async postgresEnableRlsAdminPostgresEnableRlsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.postgresEnableRlsAdminPostgresEnableRlsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Postgres Prepare
     */
    async postgresPrepareAdminPostgresPreparePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/admin/postgres/prepare`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Postgres Prepare
     */
    async postgresPrepareAdminPostgresPreparePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.postgresPrepareAdminPostgresPreparePostRaw(initOverrides);
        return await response.value();
    }

}
