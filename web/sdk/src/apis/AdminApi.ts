/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuditLogsPage,
  HTTPValidationError,
} from '../models/index';
import {
    AuditLogsPageFromJSON,
    AuditLogsPageToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface ListAuditLogsAdminAuditGetRequest {
    page?: number;
    size?: number;
    entityType?: string | null;
    entityId?: string | null;
    action?: string | null;
    ownerUserId?: string | null;
    actorUserId?: string | null;
    since?: Date | null;
    until?: Date | null;
}

export interface ListAuditLogsAdminAuditGet0Request {
    page?: number;
    size?: number;
    entityType?: string | null;
    entityId?: string | null;
    action?: string | null;
    ownerUserId?: string | null;
    actorUserId?: string | null;
    since?: Date | null;
    until?: Date | null;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGetRaw(requestParameters: ListAuditLogsAdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['entityType'] != null) {
            queryParameters['entity_type'] = requestParameters['entityType'];
        }

        if (requestParameters['entityId'] != null) {
            queryParameters['entity_id'] = requestParameters['entityId'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['ownerUserId'] != null) {
            queryParameters['owner_user_id'] = requestParameters['ownerUserId'];
        }

        if (requestParameters['actorUserId'] != null) {
            queryParameters['actor_user_id'] = requestParameters['actorUserId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = (requestParameters['until'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/audit/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
    }

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGet(requestParameters: ListAuditLogsAdminAuditGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage> {
        const response = await this.listAuditLogsAdminAuditGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGet_1Raw(requestParameters: ListAuditLogsAdminAuditGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['entityType'] != null) {
            queryParameters['entity_type'] = requestParameters['entityType'];
        }

        if (requestParameters['entityId'] != null) {
            queryParameters['entity_id'] = requestParameters['entityId'];
        }

        if (requestParameters['action'] != null) {
            queryParameters['action'] = requestParameters['action'];
        }

        if (requestParameters['ownerUserId'] != null) {
            queryParameters['owner_user_id'] = requestParameters['ownerUserId'];
        }

        if (requestParameters['actorUserId'] != null) {
            queryParameters['actor_user_id'] = requestParameters['actorUserId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = (requestParameters['since'] as any).toISOString();
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = (requestParameters['until'] as any).toISOString();
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/audit`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuditLogsPageFromJSON(jsonValue));
    }

    /**
     * List audit log entries
     */
    async listAuditLogsAdminAuditGet_1(requestParameters: ListAuditLogsAdminAuditGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage> {
        const response = await this.listAuditLogsAdminAuditGet_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Postgres Enable Rls
     */
    async postgresEnableRlsAdminPostgresEnableRlsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/postgres/enable-rls`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Postgres Enable Rls
     */
    async postgresEnableRlsAdminPostgresEnableRlsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.postgresEnableRlsAdminPostgresEnableRlsPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Postgres Prepare
     */
    async postgresPrepareAdminPostgresPreparePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/admin/postgres/prepare`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Postgres Prepare
     */
    async postgresPrepareAdminPostgresPreparePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.postgresPrepareAdminPostgresPreparePostRaw(initOverrides);
        return await response.value();
    }

}
