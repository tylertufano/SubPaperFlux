"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.V1Api = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class V1Api extends runtime.BaseAPI {
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-delete`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Bulk Delete Bookmarks
     */
    bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-publish`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Bulk Publish Bookmarks
     */
    bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Update Bookmark Folders
     */
    bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bulkBookmarkFolderUpdate'] == null) {
                throw new runtime.RequiredError('bulkBookmarkFolderUpdate', 'Required parameter "bulkBookmarkFolderUpdate" was null or undefined when calling bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BulkBookmarkFolderUpdateToJSON)(requestParameters['bulkBookmarkFolderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.BookmarkFolderSummaryFromJSON));
        });
    }
    /**
     * Bulk Update Bookmark Folders
     */
    bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkUpdateBookmarkFoldersV1BookmarksBulkFoldersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Bulk Update Bookmark Tags
     */
    bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bulkBookmarkTagUpdate'] == null) {
                throw new runtime.RequiredError('bulkBookmarkTagUpdate', 'Required parameter "bulkBookmarkTagUpdate" was null or undefined when calling bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/bulk-tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BulkBookmarkTagUpdateToJSON)(requestParameters['bulkBookmarkTagUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.BookmarkTagSummaryFromJSON));
        });
    }
    /**
     * Bulk Update Bookmark Tags
     */
    bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/count`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Count Bookmarks
     */
    countBookmarksV1BookmarksCountGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderCreate'] == null) {
                throw new runtime.RequiredError('folderCreate', 'Required parameter "folderCreate" was null or undefined when calling createFolderV1BookmarksFoldersPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolderCreateToJSON)(requestParameters['folderCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Create Folder
     */
    createFolderV1BookmarksFoldersPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create a role
     */
    createRoleV1AdminRolesPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['adminRoleCreate'] == null) {
                throw new runtime.RequiredError('adminRoleCreate', 'Required parameter "adminRoleCreate" was null or undefined when calling createRoleV1AdminRolesPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AdminRoleCreateToJSON)(requestParameters['adminRoleCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminRoleDetailFromJSON)(jsonValue));
        });
    }
    /**
     * Create a role
     */
    createRoleV1AdminRolesPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createRoleV1AdminRolesPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagCreate'] == null) {
                throw new runtime.RequiredError('tagCreate', 'Required parameter "tagCreate" was null or undefined when calling createTagV1BookmarksTagsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TagCreateToJSON)(requestParameters['tagCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TagOutFromJSON)(jsonValue));
        });
    }
    /**
     * Create Tag
     */
    createTagV1BookmarksTagsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create an API token
     */
    createTokenV1MeTokensPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['apiTokenCreate'] == null) {
                throw new runtime.RequiredError('apiTokenCreate', 'Required parameter "apiTokenCreate" was null or undefined when calling createTokenV1MeTokensPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/me/tokens`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.ApiTokenCreateToJSON)(requestParameters['apiTokenCreate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiTokenWithSecretFromJSON)(jsonValue));
        });
    }
    /**
     * Create an API token
     */
    createTokenV1MeTokensPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTokenV1MeTokensPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Db Status
     */
    dbStatusV1StatusDbGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            let urlPath = `/v1/status/db`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Db Status
     */
    dbStatusV1StatusDbGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.dbStatusV1StatusDbGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Bookmark Folder
     */
    deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Bookmark Folder
     */
    deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete().');
            }
            const queryParameters = {};
            if (requestParameters['deleteRemote'] != null) {
                queryParameters['delete_remote'] = requestParameters['deleteRemote'];
            }
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Bookmark
     */
    deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderId'] == null) {
                throw new runtime.RequiredError('folderId', 'Required parameter "folderId" was null or undefined when calling deleteFolderV1BookmarksFoldersFolderIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders/{folder_id}`;
            urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Folder
     */
    deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new runtime.RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling deleteRoleV1AdminRolesRoleIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles/{role_id}`;
            urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagId'] == null) {
                throw new runtime.RequiredError('tagId', 'Required parameter "tagId" was null or undefined when calling deleteTagV1BookmarksTagsTagIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags/{tag_id}`;
            urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Tag
     */
    deleteTagV1BookmarksTagsTagIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Enqueue Job
     */
    enqueueJobV1JobsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['jobRequest'] == null) {
                throw new runtime.RequiredError('jobRequest', 'Required parameter "jobRequest" was null or undefined when calling enqueueJobV1JobsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.JobRequestToJSON)(requestParameters['jobRequest']),
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Enqueue Job
     */
    enqueueJobV1JobsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.enqueueJobV1JobsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['format'] != null) {
                queryParameters['format'] = requestParameters['format'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/export`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Export Bookmarks
     */
    exportBookmarksV1BookmarksExportGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark Folder
     */
    getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkFolderV1BookmarksBookmarkIdFolderGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get Bookmark Folder
     */
    getBookmarkFolderV1BookmarksBookmarkIdFolderGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark Tags
     */
    getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkTagsV1BookmarksBookmarkIdTagsGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * Get Bookmark Tags
     */
    getBookmarkTagsV1BookmarksBookmarkIdTagsGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarkOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get Bookmark
     */
    getBookmarkV1BookmarksBookmarkIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a single job by id.
     * Get job
     */
    getJobV1JobsJobIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['jobId'] == null) {
                throw new runtime.RequiredError('jobId', 'Required parameter "jobId" was null or undefined when calling getJobV1JobsJobIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs/{job_id}`;
            urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JobOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get a single job by id.
     * Get job
     */
    getJobV1JobsJobIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getJobV1JobsJobIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get current user profile
     */
    getMeV1MeGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/me`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MeOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get current user profile
     */
    getMeV1MeGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMeV1MeGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new runtime.RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling getRoleV1AdminRolesRoleIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles/{role_id}`;
            urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminRoleDetailFromJSON)(jsonValue));
        });
    }
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getRoleV1AdminRolesRoleIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Status
     */
    getStatusV1StatusGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            let urlPath = `/v1/status`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.StatusResponseFromJSON)(jsonValue));
        });
    }
    /**
     * Get Status
     */
    getStatusV1StatusGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getStatusV1StatusGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tokenId'] == null) {
                throw new runtime.RequiredError('tokenId', 'Required parameter "tokenId" was null or undefined when calling getTokenV1MeTokensTokenIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/me/tokens/{token_id}`;
            urlPath = urlPath.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters['tokenId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiTokenOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling getUserV1AdminUsersUserIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminUserOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getUserV1AdminUsersUserIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost().');
            }
            if (requestParameters['roleName'] == null) {
                throw new runtime.RequiredError('roleName', 'Required parameter "roleName" was null or undefined when calling grantUserRoleV1AdminUsersUserIdRolesRoleNamePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}/roles/{role_name}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            urlPath = urlPath.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.RoleGrantRequestToJSON)(requestParameters['roleGrantRequest']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminUserOutFromJSON)(jsonValue));
        });
    }
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/`;
            const response = yield this.request({
                path: urlPath,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_1Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks`;
            const response = yield this.request({
                path: urlPath,
                method: 'HEAD',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Head Bookmarks
     */
    headBookmarksV1BookmarksHead_1(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.headBookmarksV1BookmarksHead_1Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Integrations Status
     */
    integrationsStatusV1StatusIntegrationsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['instapaperCredId'] != null) {
                queryParameters['instapaper_cred_id'] = requestParameters['instapaperCredId'];
            }
            if (requestParameters['minifluxCredId'] != null) {
                queryParameters['miniflux_cred_id'] = requestParameters['minifluxCredId'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/status/integrations`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Integrations Status
     */
    integrationsStatusV1StatusIntegrationsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.integrationsStatusV1StatusIntegrationsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['entityType'] != null) {
                queryParameters['entity_type'] = requestParameters['entityType'];
            }
            if (requestParameters['entityId'] != null) {
                queryParameters['entity_id'] = requestParameters['entityId'];
            }
            if (requestParameters['action'] != null) {
                queryParameters['action'] = requestParameters['action'];
            }
            if (requestParameters['ownerUserId'] != null) {
                queryParameters['owner_user_id'] = requestParameters['ownerUserId'];
            }
            if (requestParameters['actorUserId'] != null) {
                queryParameters['actor_user_id'] = requestParameters['actorUserId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'].toISOString();
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'].toISOString();
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/audit`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AuditLogsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listAuditLogsV1AdminAuditGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarksPageFromJSON)(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_2Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['fuzzy'] != null) {
                queryParameters['fuzzy'] = requestParameters['fuzzy'];
            }
            if (requestParameters['feedId'] != null) {
                queryParameters['feed_id'] = requestParameters['feedId'];
            }
            if (requestParameters['tagId'] != null) {
                queryParameters['tag_id'] = requestParameters['tagId'];
            }
            if (requestParameters['folderId'] != null) {
                queryParameters['folder_id'] = requestParameters['folderId'];
            }
            if (requestParameters['since'] != null) {
                queryParameters['since'] = requestParameters['since'];
            }
            if (requestParameters['until'] != null) {
                queryParameters['until'] = requestParameters['until'];
            }
            if (requestParameters['sortBy'] != null) {
                queryParameters['sort_by'] = requestParameters['sortBy'];
            }
            if (requestParameters['sortDir'] != null) {
                queryParameters['sort_dir'] = requestParameters['sortDir'];
            }
            if (requestParameters['titleQuery'] != null) {
                queryParameters['title_query'] = requestParameters['titleQuery'];
            }
            if (requestParameters['urlQuery'] != null) {
                queryParameters['url_query'] = requestParameters['urlQuery'];
            }
            if (requestParameters['regex'] != null) {
                queryParameters['regex'] = requestParameters['regex'];
            }
            if (requestParameters['regexTarget'] != null) {
                queryParameters['regex_target'] = requestParameters['regexTarget'];
            }
            if (requestParameters['regexFlags'] != null) {
                queryParameters['regex_flags'] = requestParameters['regexFlags'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.BookmarksPageFromJSON)(jsonValue));
        });
    }
    /**
     * List Bookmarks
     */
    listBookmarksV1BookmarksGet_2(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listBookmarksV1BookmarksGet_2Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['includeGlobal'] != null) {
                queryParameters['include_global'] = requestParameters['includeGlobal'];
            }
            if (requestParameters['kind'] != null) {
                queryParameters['kind'] = requestParameters['kind'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/credentials/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CredentialsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listCredentialsV1V1CredentialsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGet_3Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['includeGlobal'] != null) {
                queryParameters['include_global'] = requestParameters['includeGlobal'];
            }
            if (requestParameters['kind'] != null) {
                queryParameters['kind'] = requestParameters['kind'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/credentials`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.CredentialsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List credentials
     */
    listCredentialsV1V1CredentialsGet_3(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listCredentialsV1V1CredentialsGet_3Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ownerUserIds'] != null) {
                queryParameters['owner_user_ids'] = requestParameters['ownerUserIds'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/feeds/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FeedsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFeedsV1V1FeedsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGet_4Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['ownerUserIds'] != null) {
                queryParameters['owner_user_ids'] = requestParameters['ownerUserIds'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/feeds`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FeedsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List feeds
     */
    listFeedsV1V1FeedsGet_4(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFeedsV1V1FeedsGet_4Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.FolderOutFromJSON));
        });
    }
    /**
     * List Folders
     */
    listFoldersV1BookmarksFoldersGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listFoldersV1BookmarksFoldersGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['status'] != null) {
                queryParameters['status'] = requestParameters['status'];
            }
            if (requestParameters['jobType'] != null) {
                queryParameters['job_type'] = requestParameters['jobType'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['orderBy'] != null) {
                queryParameters['order_by'] = requestParameters['orderBy'];
            }
            if (requestParameters['orderDir'] != null) {
                queryParameters['order_dir'] = requestParameters['orderDir'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JobsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listJobsV1JobsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet_5Raw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['status'] != null) {
                queryParameters['status'] = requestParameters['status'];
            }
            if (requestParameters['jobType'] != null) {
                queryParameters['job_type'] = requestParameters['jobType'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['orderBy'] != null) {
                queryParameters['order_by'] = requestParameters['orderBy'];
            }
            if (requestParameters['orderDir'] != null) {
                queryParameters['order_dir'] = requestParameters['orderDir'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JobsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List jobs with filters, pagination, and sorting.
     * List jobs
     */
    listJobsV1JobsGet_5(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listJobsV1JobsGet_5Raw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List roles
     */
    listRolesV1AdminRolesGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminRolesPageFromJSON)(jsonValue));
        });
    }
    /**
     * List roles
     */
    listRolesV1AdminRolesGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listRolesV1AdminRolesGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List site configs
     */
    listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['includeGlobal'] != null) {
                queryParameters['include_global'] = requestParameters['includeGlobal'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/site-configs/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SiteConfigsPageFromJSON)(jsonValue));
        });
    }
    /**
     * List site configs
     */
    listSiteConfigsV1V1SiteConfigsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listSiteConfigsV1V1SiteConfigsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * List Tags
     */
    listTagsV1BookmarksTagsGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTagsV1BookmarksTagsGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * List API tokens
     */
    listTokensV1MeTokensGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['includeRevoked'] != null) {
                queryParameters['include_revoked'] = requestParameters['includeRevoked'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/me/tokens`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.ApiTokensPageFromJSON)(jsonValue));
        });
    }
    /**
     * List API tokens
     */
    listTokensV1MeTokensGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTokensV1MeTokensGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List users
     */
    listUsersV1AdminUsersGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['search'] != null) {
                queryParameters['search'] = requestParameters['search'];
            }
            if (requestParameters['isActive'] != null) {
                queryParameters['is_active'] = requestParameters['isActive'];
            }
            if (requestParameters['role'] != null) {
                queryParameters['role'] = requestParameters['role'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminUsersPageFromJSON)(jsonValue));
        });
    }
    /**
     * List users
     */
    listUsersV1AdminUsersGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listUsersV1AdminUsersGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling previewBookmarkV1BookmarksBookmarkIdPreviewGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/preview`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Preview Bookmark
     */
    previewBookmarkV1BookmarksBookmarkIdPreviewGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    retryAllJobsV1JobsRetryAllPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling retryAllJobsV1JobsRetryAllPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs/retry-all`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Requeue all failed/dead jobs optionally filtered by type.
     * Retry all jobs
     */
    retryAllJobsV1JobsRetryAllPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retryAllJobsV1JobsRetryAllPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    retryJobV1JobsJobIdRetryPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['jobId'] == null) {
                throw new runtime.RequiredError('jobId', 'Required parameter "jobId" was null or undefined when calling retryJobV1JobsJobIdRetryPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs/{job_id}/retry`;
            urlPath = urlPath.replace(`{${"job_id"}}`, encodeURIComponent(String(requestParameters['jobId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.JobOutFromJSON)(jsonValue));
        });
    }
    /**
     * Reset attempts and requeue a failed/dead job
     * Retry a job
     */
    retryJobV1JobsJobIdRetryPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.retryJobV1JobsJobIdRetryPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tokenId'] == null) {
                throw new runtime.RequiredError('tokenId', 'Required parameter "tokenId" was null or undefined when calling revokeTokenV1MeTokensTokenIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/me/tokens/{token_id}`;
            urlPath = urlPath.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters['tokenId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete().');
            }
            if (requestParameters['roleName'] == null) {
                throw new runtime.RequiredError('roleName', 'Required parameter "roleName" was null or undefined when calling revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete().');
            }
            const queryParameters = {};
            if (requestParameters['confirm'] != null) {
                queryParameters['confirm'] = requestParameters['confirm'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}/roles/{role_name}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            urlPath = urlPath.replace(`{${"role_name"}}`, encodeURIComponent(String(requestParameters['roleName'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    streamJobsV1JobsStreamGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['status'] != null) {
                queryParameters['status'] = requestParameters['status'];
            }
            if (requestParameters['jobType'] != null) {
                queryParameters['job_type'] = requestParameters['jobType'];
            }
            if (requestParameters['page'] != null) {
                queryParameters['page'] = requestParameters['page'];
            }
            if (requestParameters['size'] != null) {
                queryParameters['size'] = requestParameters['size'];
            }
            if (requestParameters['orderBy'] != null) {
                queryParameters['order_by'] = requestParameters['orderBy'];
            }
            if (requestParameters['orderDir'] != null) {
                queryParameters['order_dir'] = requestParameters['orderDir'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs/stream`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * Server-sent events stream of jobs list.
     * Stream jobs
     */
    streamJobsV1JobsStreamGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.streamJobsV1JobsStreamGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Test Instapaper creds
     */
    testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling testInstapaperV1IntegrationsInstapaperTestPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/integrations/instapaper/test`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Test Instapaper creds
     */
    testInstapaperV1IntegrationsInstapaperTestPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.testInstapaperV1IntegrationsInstapaperTestPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Test Miniflux creds
     */
    testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling testMinifluxV1IntegrationsMinifluxTestPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/integrations/miniflux/test`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Test Miniflux creds
     */
    testMinifluxV1IntegrationsMinifluxTestPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.testMinifluxV1IntegrationsMinifluxTestPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Test site config selectors against the login page
     */
    testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['configId'] == null) {
                throw new runtime.RequiredError('configId', 'Required parameter "configId" was null or undefined when calling testSiteConfigV1SiteConfigsConfigIdTestPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/site-configs/{config_id}/test`;
            urlPath = urlPath.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters['configId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Test site config selectors against the login page
     */
    testSiteConfigV1SiteConfigsConfigIdTestPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.testSiteConfigV1SiteConfigsConfigIdTestPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Bookmark Folder
     */
    updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().');
            }
            if (requestParameters['bookmarkFolderUpdate'] == null) {
                throw new runtime.RequiredError('bookmarkFolderUpdate', 'Required parameter "bookmarkFolderUpdate" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BookmarkFolderUpdateToJSON)(requestParameters['bookmarkFolderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Bookmark Folder
     */
    updateBookmarkFolderV1BookmarksBookmarkIdFolderPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Bookmark Tags
     */
    updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['bookmarkId'] == null) {
                throw new runtime.RequiredError('bookmarkId', 'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().');
            }
            if (requestParameters['bookmarkTagsUpdate'] == null) {
                throw new runtime.RequiredError('bookmarkTagsUpdate', 'Required parameter "bookmarkTagsUpdate" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
            urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.BookmarkTagsUpdateToJSON)(requestParameters['bookmarkTagsUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.TagOutFromJSON));
        });
    }
    /**
     * Update Bookmark Tags
     */
    updateBookmarkTagsV1BookmarksBookmarkIdTagsPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['folderId'] == null) {
                throw new runtime.RequiredError('folderId', 'Required parameter "folderId" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().');
            }
            if (requestParameters['folderUpdate'] == null) {
                throw new runtime.RequiredError('folderUpdate', 'Required parameter "folderUpdate" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/folders/{folder_id}`;
            urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.FolderUpdateToJSON)(requestParameters['folderUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.FolderOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Folder
     */
    updateFolderV1BookmarksFoldersFolderIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update current user profile
     */
    updateMeV1MePatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['meUpdate'] == null) {
                throw new runtime.RequiredError('meUpdate', 'Required parameter "meUpdate" was null or undefined when calling updateMeV1MePatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/me`;
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.MeUpdateToJSON)(requestParameters['meUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.MeOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update current user profile
     */
    updateMeV1MePatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateMeV1MePatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['roleId'] == null) {
                throw new runtime.RequiredError('roleId', 'Required parameter "roleId" was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch().');
            }
            if (requestParameters['adminRoleUpdate'] == null) {
                throw new runtime.RequiredError('adminRoleUpdate', 'Required parameter "adminRoleUpdate" was null or undefined when calling updateRoleV1AdminRolesRoleIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/roles/{role_id}`;
            urlPath = urlPath.replace(`{${"role_id"}}`, encodeURIComponent(String(requestParameters['roleId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AdminRoleUpdateToJSON)(requestParameters['adminRoleUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminRoleDetailFromJSON)(jsonValue));
        });
    }
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['tagId'] == null) {
                throw new runtime.RequiredError('tagId', 'Required parameter "tagId" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().');
            }
            if (requestParameters['tagUpdate'] == null) {
                throw new runtime.RequiredError('tagUpdate', 'Required parameter "tagUpdate" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/bookmarks/tags/{tag_id}`;
            urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.TagUpdateToJSON)(requestParameters['tagUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.TagOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update Tag
     */
    updateTagV1BookmarksTagsTagIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['userId'] == null) {
                throw new runtime.RequiredError('userId', 'Required parameter "userId" was null or undefined when calling updateUserV1AdminUsersUserIdPatch().');
            }
            if (requestParameters['adminUserUpdate'] == null) {
                throw new runtime.RequiredError('adminUserUpdate', 'Required parameter "adminUserUpdate" was null or undefined when calling updateUserV1AdminUsersUserIdPatch().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/admin/users/{user_id}`;
            urlPath = urlPath.replace(`{${"user_id"}}`, encodeURIComponent(String(requestParameters['userId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.AdminUserUpdateToJSON)(requestParameters['adminUserUpdate']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.AdminUserOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateUserV1AdminUsersUserIdPatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    validateJobPayloadV1JobsValidatePostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['requestBody'] == null) {
                throw new runtime.RequiredError('requestBody', 'Required parameter "requestBody" was null or undefined when calling validateJobPayloadV1JobsValidatePost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/v1/jobs/validate`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: requestParameters['requestBody'],
            }, initOverrides);
            return new runtime.JSONApiResponse(response);
        });
    }
    /**
     * Dry-run validation per job type
     * Validate a job payload
     */
    validateJobPayloadV1JobsValidatePost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.validateJobPayloadV1JobsValidatePostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.V1Api = V1Api;
