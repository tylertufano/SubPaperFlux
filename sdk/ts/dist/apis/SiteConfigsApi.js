"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteConfigsApi = void 0;
const runtime = require("../runtime");
const index_1 = require("../models/index");
/**
 *
 */
class SiteConfigsApi extends runtime.BaseAPI {
    /**
     * Create Site Config
     */
    createSiteConfigSiteConfigsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['siteConfig'] == null) {
                throw new runtime.RequiredError('siteConfig', 'Required parameter "siteConfig" was null or undefined when calling createSiteConfigSiteConfigsPost().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/site-configs/`;
            const response = yield this.request({
                path: urlPath,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SiteConfigToJSON)(requestParameters['siteConfig']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SiteConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Create Site Config
     */
    createSiteConfigSiteConfigsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createSiteConfigSiteConfigsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Site Config
     */
    deleteSiteConfigSiteConfigsConfigIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['configId'] == null) {
                throw new runtime.RequiredError('configId', 'Required parameter "configId" was null or undefined when calling deleteSiteConfigSiteConfigsConfigIdDelete().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/site-configs/{config_id}`;
            urlPath = urlPath.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters['configId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Site Config
     */
    deleteSiteConfigSiteConfigsConfigIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteSiteConfigSiteConfigsConfigIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get Site Config
     */
    getSiteConfigSiteConfigsConfigIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['configId'] == null) {
                throw new runtime.RequiredError('configId', 'Required parameter "configId" was null or undefined when calling getSiteConfigSiteConfigsConfigIdGet().');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/site-configs/{config_id}`;
            urlPath = urlPath.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters['configId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SiteConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Get Site Config
     */
    getSiteConfigSiteConfigsConfigIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getSiteConfigSiteConfigsConfigIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Site Configs
     */
    listSiteConfigsSiteConfigsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters['includeGlobal'] != null) {
                queryParameters['include_global'] = requestParameters['includeGlobal'];
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/site-configs/`;
            const response = yield this.request({
                path: urlPath,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(index_1.SiteConfigFromJSON));
        });
    }
    /**
     * List Site Configs
     */
    listSiteConfigsSiteConfigsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listSiteConfigsSiteConfigsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Site Config
     */
    updateSiteConfigSiteConfigsConfigIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters['configId'] == null) {
                throw new runtime.RequiredError('configId', 'Required parameter "configId" was null or undefined when calling updateSiteConfigSiteConfigsConfigIdPut().');
            }
            if (requestParameters['siteConfig'] == null) {
                throw new runtime.RequiredError('siteConfig', 'Required parameter "siteConfig" was null or undefined when calling updateSiteConfigSiteConfigsConfigIdPut().');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters['xCsrfToken'] != null) {
                headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            let urlPath = `/site-configs/{config_id}`;
            urlPath = urlPath.replace(`{${"config_id"}}`, encodeURIComponent(String(requestParameters['configId'])));
            const response = yield this.request({
                path: urlPath,
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, index_1.SiteConfigToJSON)(requestParameters['siteConfig']),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, index_1.SiteConfigFromJSON)(jsonValue));
        });
    }
    /**
     * Update Site Config
     */
    updateSiteConfigSiteConfigsConfigIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateSiteConfigSiteConfigsConfigIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.SiteConfigsApi = SiteConfigsApi;
