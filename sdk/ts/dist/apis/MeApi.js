"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.MeApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class MeApi extends runtime.BaseAPI {
    /**
     * Create an API token
     */
    createTokenV1MeTokensPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.apiTokenCreate === null || requestParameters.apiTokenCreate === undefined) {
                throw new runtime.RequiredError('apiTokenCreate', 'Required parameter requestParameters.apiTokenCreate was null or undefined when calling createTokenV1MeTokensPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.ApiTokenCreateToJSON)(requestParameters.apiTokenCreate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApiTokenWithSecretFromJSON)(jsonValue));
        });
    }
    /**
     * Create an API token
     */
    createTokenV1MeTokensPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createTokenV1MeTokensPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get current user profile
     */
    getMeV1MeGetRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MeOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get current user profile
     */
    getMeV1MeGet(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getMeV1MeGetRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling getTokenV1MeTokensTokenIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApiTokenOutFromJSON)(jsonValue));
        });
    }
    /**
     * Get API token metadata
     */
    getTokenV1MeTokensTokenIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getTokenV1MeTokensTokenIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List API tokens
     */
    listTokensV1MeTokensGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.size !== undefined) {
                queryParameters['size'] = requestParameters.size;
            }
            if (requestParameters.includeRevoked !== undefined) {
                queryParameters['include_revoked'] = requestParameters.includeRevoked;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.ApiTokensPageFromJSON)(jsonValue));
        });
    }
    /**
     * List API tokens
     */
    listTokensV1MeTokensGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listTokensV1MeTokensGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tokenId === null || requestParameters.tokenId === undefined) {
                throw new runtime.RequiredError('tokenId', 'Required parameter requestParameters.tokenId was null or undefined when calling revokeTokenV1MeTokensTokenIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me/tokens/{token_id}`.replace(`{${"token_id"}}`, encodeURIComponent(String(requestParameters.tokenId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Revoke an API token
     */
    revokeTokenV1MeTokensTokenIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.revokeTokenV1MeTokensTokenIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Update current user profile
     */
    updateMeV1MePatchRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.meUpdate === null || requestParameters.meUpdate === undefined) {
                throw new runtime.RequiredError('meUpdate', 'Required parameter requestParameters.meUpdate was null or undefined when calling updateMeV1MePatch.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/v1/me`,
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.MeUpdateToJSON)(requestParameters.meUpdate),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.MeOutFromJSON)(jsonValue));
        });
    }
    /**
     * Update current user profile
     */
    updateMeV1MePatch(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateMeV1MePatchRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.MeApi = MeApi;
