/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import * as runtime from '../runtime';
import type { AdminOrganizationCreate, AdminOrganizationDetail, AdminOrganizationMembershipChange, AdminOrganizationUpdate, AdminOrganizationsPage, AdminRoleCreate, AdminRoleDetail, AdminRoleUpdate, AdminRolesPage, AdminUserOut, AdminUserRoleOverridesUpdate, AdminUserUpdate, AdminUsersPage, AuditLogsPage, RoleGrantRequest } from '../models/index';
export interface AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest {
    organizationId: string;
    adminOrganizationMembershipChange: AdminOrganizationMembershipChange;
}
export interface ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest {
    userId: string;
}
export interface CreateOrganizationV1AdminOrgsPostRequest {
    adminOrganizationCreate: AdminOrganizationCreate;
}
export interface CreateRoleV1AdminRolesPostRequest {
    adminRoleCreate: AdminRoleCreate;
}
export interface DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest {
    organizationId: string;
}
export interface DeleteRoleV1AdminRolesRoleIdDeleteRequest {
    roleId: string;
}
export interface GetOrganizationV1AdminOrgsOrganizationIdGetRequest {
    organizationId: string;
}
export interface GetRoleV1AdminRolesRoleIdGetRequest {
    roleId: string;
}
export interface GetUserV1AdminUsersUserIdGetRequest {
    userId: string;
}
export interface GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest {
    userId: string;
    roleName: string;
    roleGrantRequest?: RoleGrantRequest;
}
export interface ListAuditLogsAdminAuditGetRequest {
    page?: number;
    size?: number;
    entityType?: string | null;
    entityId?: string | null;
    action?: string | null;
    ownerUserId?: string | null;
    actorUserId?: string | null;
    since?: Date | null;
    until?: Date | null;
}
export interface ListAuditLogsAdminAuditGet0Request {
    page?: number;
    size?: number;
    entityType?: string | null;
    entityId?: string | null;
    action?: string | null;
    ownerUserId?: string | null;
    actorUserId?: string | null;
    since?: Date | null;
    until?: Date | null;
}
export interface ListAuditLogsV1AdminAuditGetRequest {
    page?: number;
    size?: number;
    entityType?: string | null;
    entityId?: string | null;
    action?: string | null;
    ownerUserId?: string | null;
    actorUserId?: string | null;
    since?: Date | null;
    until?: Date | null;
}
export interface ListOrganizationsV1AdminOrgsGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
    isDefault?: boolean | null;
}
export interface ListRolesV1AdminRolesGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
}
export interface ListUsersV1AdminUsersGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
    isActive?: boolean | null;
    role?: string | null;
    organizationId?: string | null;
}
export interface RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest {
    organizationId: string;
    userId: string;
}
export interface RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest {
    userId: string;
    roleName: string;
    confirm?: boolean;
}
export interface UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest {
    organizationId: string;
    adminOrganizationUpdate: AdminOrganizationUpdate;
}
export interface UpdateRoleV1AdminRolesRoleIdPatchRequest {
    roleId: string;
    adminRoleUpdate: AdminRoleUpdate;
}
export interface UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest {
    userId: string;
    adminUserRoleOverridesUpdate: AdminUserRoleOverridesUpdate;
}
export interface UpdateUserV1AdminUsersUserIdPatchRequest {
    userId: string;
    adminUserUpdate: AdminUserUpdate;
}
/**
 *
 */
export declare class AdminApi extends runtime.BaseAPI {
    /**
     * Add a user to an organization
     */
    addOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRaw(requestParameters: AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Add a user to an organization
     */
    addOrganizationMemberV1AdminOrgsOrganizationIdMembersPost(requestParameters: AddOrganizationMemberV1AdminOrgsOrganizationIdMembersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Clear user role overrides
     */
    clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRaw(requestParameters: ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Clear user role overrides
     */
    clearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDelete(requestParameters: ClearUserRoleOverridesV1AdminUsersUserIdRoleOverridesDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Create an organization
     */
    createOrganizationV1AdminOrgsPostRaw(requestParameters: CreateOrganizationV1AdminOrgsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Create an organization
     */
    createOrganizationV1AdminOrgsPost(requestParameters: CreateOrganizationV1AdminOrgsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Create a role
     */
    createRoleV1AdminRolesPostRaw(requestParameters: CreateRoleV1AdminRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>>;
    /**
     * Create a role
     */
    createRoleV1AdminRolesPost(requestParameters: CreateRoleV1AdminRolesPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail>;
    /**
     * Delete an organization
     */
    deleteOrganizationV1AdminOrgsOrganizationIdDeleteRaw(requestParameters: DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete an organization
     */
    deleteOrganizationV1AdminOrgsOrganizationIdDelete(requestParameters: DeleteOrganizationV1AdminOrgsOrganizationIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDeleteRaw(requestParameters: DeleteRoleV1AdminRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Delete a role
     */
    deleteRoleV1AdminRolesRoleIdDelete(requestParameters: DeleteRoleV1AdminRolesRoleIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Get organization details
     */
    getOrganizationV1AdminOrgsOrganizationIdGetRaw(requestParameters: GetOrganizationV1AdminOrgsOrganizationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Get organization details
     */
    getOrganizationV1AdminOrgsOrganizationIdGet(requestParameters: GetOrganizationV1AdminOrgsOrganizationIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGetRaw(requestParameters: GetRoleV1AdminRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>>;
    /**
     * Get role details
     */
    getRoleV1AdminRolesRoleIdGet(requestParameters: GetRoleV1AdminRolesRoleIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail>;
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGetRaw(requestParameters: GetUserV1AdminUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Get a user
     */
    getUserV1AdminUsersUserIdGet(requestParameters: GetUserV1AdminUsersUserIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePostRaw(requestParameters: GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Grant a role to a user
     */
    grantUserRoleV1AdminUsersUserIdRolesRoleNamePost(requestParameters: GrantUserRoleV1AdminUsersUserIdRolesRoleNamePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGetRaw(requestParameters: ListAuditLogsAdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>>;
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGet(requestParameters?: ListAuditLogsAdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage>;
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGet_1Raw(requestParameters: ListAuditLogsAdminAuditGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>>;
    /**
     * List audit log entries
     */
    listAuditLogsAdminAuditGet_1(requestParameters?: ListAuditLogsAdminAuditGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage>;
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGetRaw(requestParameters: ListAuditLogsV1AdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuditLogsPage>>;
    /**
     * List audit log entries
     */
    listAuditLogsV1AdminAuditGet(requestParameters?: ListAuditLogsV1AdminAuditGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuditLogsPage>;
    /**
     * List organizations
     */
    listOrganizationsV1AdminOrgsGetRaw(requestParameters: ListOrganizationsV1AdminOrgsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationsPage>>;
    /**
     * List organizations
     */
    listOrganizationsV1AdminOrgsGet(requestParameters?: ListOrganizationsV1AdminOrgsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationsPage>;
    /**
     * List roles
     */
    listRolesV1AdminRolesGetRaw(requestParameters: ListRolesV1AdminRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRolesPage>>;
    /**
     * List roles
     */
    listRolesV1AdminRolesGet(requestParameters?: ListRolesV1AdminRolesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRolesPage>;
    /**
     * List users
     */
    listUsersV1AdminUsersGetRaw(requestParameters: ListUsersV1AdminUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUsersPage>>;
    /**
     * List users
     */
    listUsersV1AdminUsersGet(requestParameters?: ListUsersV1AdminUsersGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUsersPage>;
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsAdminPostgresEnableRlsPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Postgres Enable Rls
     */
    postgresEnableRlsAdminPostgresEnableRlsPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Postgres Prepare
     */
    postgresPrepareAdminPostgresPreparePostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{
        [key: string]: any;
    }>>;
    /**
     * Postgres Prepare
     */
    postgresPrepareAdminPostgresPreparePost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{
        [key: string]: any;
    }>;
    /**
     * Remove a user from an organization
     */
    removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRaw(requestParameters: RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Remove a user from an organization
     */
    removeOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDelete(requestParameters: RemoveOrganizationMemberV1AdminOrgsOrganizationIdMembersUserIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRaw(requestParameters: RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>>;
    /**
     * Revoke a role from a user
     */
    revokeUserRoleV1AdminUsersUserIdRolesRoleNameDelete(requestParameters: RevokeUserRoleV1AdminUsersUserIdRolesRoleNameDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void>;
    /**
     * Update an organization
     */
    updateOrganizationV1AdminOrgsOrganizationIdPatchRaw(requestParameters: UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminOrganizationDetail>>;
    /**
     * Update an organization
     */
    updateOrganizationV1AdminOrgsOrganizationIdPatch(requestParameters: UpdateOrganizationV1AdminOrgsOrganizationIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminOrganizationDetail>;
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatchRaw(requestParameters: UpdateRoleV1AdminRolesRoleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminRoleDetail>>;
    /**
     * Update a role
     */
    updateRoleV1AdminRolesRoleIdPatch(requestParameters: UpdateRoleV1AdminRolesRoleIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminRoleDetail>;
    /**
     * Update user role overrides
     */
    updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRaw(requestParameters: UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Update user role overrides
     */
    updateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatch(requestParameters: UpdateUserRoleOverridesV1AdminUsersUserIdRoleOverridesPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatchRaw(requestParameters: UpdateUserV1AdminUsersUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AdminUserOut>>;
    /**
     * Update a user
     */
    updateUserV1AdminUsersUserIdPatch(requestParameters: UpdateUserV1AdminUsersUserIdPatchRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AdminUserOut>;
}
