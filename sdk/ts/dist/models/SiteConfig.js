"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SiteConfigToJSONTyped = exports.SiteConfigToJSON = exports.SiteConfigFromJSONTyped = exports.SiteConfigFromJSON = exports.instanceOfSiteConfig = void 0;
/**
 * Check if a given object implements the SiteConfig interface.
 */
function instanceOfSiteConfig(value) {
    if (!('name' in value) || value['name'] === undefined)
        return false;
    if (!('siteUrl' in value) || value['siteUrl'] === undefined)
        return false;
    if (!('usernameSelector' in value) || value['usernameSelector'] === undefined)
        return false;
    if (!('passwordSelector' in value) || value['passwordSelector'] === undefined)
        return false;
    if (!('loginButtonSelector' in value) || value['loginButtonSelector'] === undefined)
        return false;
    return true;
}
exports.instanceOfSiteConfig = instanceOfSiteConfig;
function SiteConfigFromJSON(json) {
    return SiteConfigFromJSONTyped(json, false);
}
exports.SiteConfigFromJSON = SiteConfigFromJSON;
function SiteConfigFromJSONTyped(json, ignoreDiscriminator) {
    if (json == null) {
        return json;
    }
    return {
        'id': json['id'] == null ? undefined : json['id'],
        'name': json['name'],
        'siteUrl': json['site_url'],
        'usernameSelector': json['username_selector'],
        'passwordSelector': json['password_selector'],
        'loginButtonSelector': json['login_button_selector'],
        'postLoginSelector': json['post_login_selector'] == null ? undefined : json['post_login_selector'],
        'cookiesToStore': json['cookies_to_store'] == null ? undefined : json['cookies_to_store'],
        'ownerUserId': json['owner_user_id'] == null ? undefined : json['owner_user_id'],
    };
}
exports.SiteConfigFromJSONTyped = SiteConfigFromJSONTyped;
function SiteConfigToJSON(json) {
    return SiteConfigToJSONTyped(json, false);
}
exports.SiteConfigToJSON = SiteConfigToJSON;
function SiteConfigToJSONTyped(value, ignoreDiscriminator = false) {
    if (value == null) {
        return value;
    }
    return {
        'id': value['id'],
        'name': value['name'],
        'site_url': value['siteUrl'],
        'username_selector': value['usernameSelector'],
        'password_selector': value['passwordSelector'],
        'login_button_selector': value['loginButtonSelector'],
        'post_login_selector': value['postLoginSelector'],
        'cookies_to_store': value['cookiesToStore'],
        'owner_user_id': value['ownerUserId'],
    };
}
exports.SiteConfigToJSONTyped = SiteConfigToJSONTyped;
