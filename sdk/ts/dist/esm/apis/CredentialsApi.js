/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CredentialFromJSON, CredentialToJSON, InstapaperLoginRequestToJSON, } from '../models';
/**
 *
 */
export class CredentialsApi extends runtime.BaseAPI {
    /**
     * Create Credential
     */
    createCredentialCredentialsPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credential === null || requestParameters.credential === undefined) {
                throw new runtime.RequiredError('credential', 'Required parameter requestParameters.credential was null or undefined when calling createCredentialCredentialsPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/credentials/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: CredentialToJSON(requestParameters.credential),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Create Credential
     */
    createCredentialCredentialsPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createCredentialCredentialsPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create Instapaper Credential From Login
     */
    createInstapaperCredentialFromLoginCredentialsInstapaperLoginPostRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.instapaperLoginRequest === null || requestParameters.instapaperLoginRequest === undefined) {
                throw new runtime.RequiredError('instapaperLoginRequest', 'Required parameter requestParameters.instapaperLoginRequest was null or undefined when calling createInstapaperCredentialFromLoginCredentialsInstapaperLoginPost.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/credentials/instapaper/login`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: InstapaperLoginRequestToJSON(requestParameters.instapaperLoginRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Create Instapaper Credential From Login
     */
    createInstapaperCredentialFromLoginCredentialsInstapaperLoginPost(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.createInstapaperCredentialFromLoginCredentialsInstapaperLoginPostRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Delete Credential
     */
    deleteCredentialCredentialsCredIdDeleteRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credId === null || requestParameters.credId === undefined) {
                throw new runtime.RequiredError('credId', 'Required parameter requestParameters.credId was null or undefined when calling deleteCredentialCredentialsCredIdDelete.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/credentials/{cred_id}`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Delete Credential
     */
    deleteCredentialCredentialsCredIdDelete(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.deleteCredentialCredentialsCredIdDeleteRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get Credential
     */
    getCredentialCredentialsCredIdGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credId === null || requestParameters.credId === undefined) {
                throw new runtime.RequiredError('credId', 'Required parameter requestParameters.credId was null or undefined when calling getCredentialCredentialsCredIdGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/credentials/{cred_id}`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Get Credential
     */
    getCredentialCredentialsCredIdGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.getCredentialCredentialsCredIdGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * List Credentials
     */
    listCredentialsCredentialsGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.includeGlobal !== undefined) {
                queryParameters['include_global'] = requestParameters.includeGlobal;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/credentials/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            if (this.isJsonMime(response.headers.get('content-type'))) {
                return new runtime.JSONApiResponse(response);
            }
            else {
                return new runtime.TextApiResponse(response);
            }
        });
    }
    /**
     * List Credentials
     */
    listCredentialsCredentialsGet(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.listCredentialsCredentialsGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Update Credential
     */
    updateCredentialCredentialsCredIdPutRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.credId === null || requestParameters.credId === undefined) {
                throw new runtime.RequiredError('credId', 'Required parameter requestParameters.credId was null or undefined when calling updateCredentialCredentialsCredIdPut.');
            }
            if (requestParameters.credential === null || requestParameters.credential === undefined) {
                throw new runtime.RequiredError('credential', 'Required parameter requestParameters.credential was null or undefined when calling updateCredentialCredentialsCredIdPut.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (requestParameters.xCsrfToken !== undefined && requestParameters.xCsrfToken !== null) {
                headerParameters['x-csrf-token'] = String(requestParameters.xCsrfToken);
            }
            if (this.configuration && this.configuration.accessToken) {
                const token = this.configuration.accessToken;
                const tokenString = yield token("HTTPBearer", []);
                if (tokenString) {
                    headerParameters["Authorization"] = `Bearer ${tokenString}`;
                }
            }
            const response = yield this.request({
                path: `/credentials/{cred_id}`.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters.credId))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: CredentialToJSON(requestParameters.credential),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
        });
    }
    /**
     * Update Credential
     */
    updateCredentialCredentialsCredIdPut(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.updateCredentialCredentialsCredIdPutRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
