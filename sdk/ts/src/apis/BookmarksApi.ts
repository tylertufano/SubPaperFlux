/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  BookmarkFolderUpdate,
  BookmarkOut,
  BookmarkTagSummary,
  BookmarkTagsUpdate,
  BookmarksPage,
  BulkBookmarkTagUpdate,
  FolderCreate,
  FolderOut,
  FolderUpdate,
  HTTPValidationError,
  TagCreate,
  TagOut,
  TagUpdate,
} from '../models/index';
import {
    BookmarkFolderUpdateFromJSON,
    BookmarkFolderUpdateToJSON,
    BookmarkOutFromJSON,
    BookmarkOutToJSON,
    BookmarkTagSummaryFromJSON,
    BookmarkTagSummaryToJSON,
    BookmarkTagsUpdateFromJSON,
    BookmarkTagsUpdateToJSON,
    BookmarksPageFromJSON,
    BookmarksPageToJSON,
    BulkBookmarkTagUpdateFromJSON,
    BulkBookmarkTagUpdateToJSON,
    FolderCreateFromJSON,
    FolderCreateToJSON,
    FolderOutFromJSON,
    FolderOutToJSON,
    FolderUpdateFromJSON,
    FolderUpdateToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
    TagCreateFromJSON,
    TagCreateToJSON,
    TagOutFromJSON,
    TagOutToJSON,
    TagUpdateFromJSON,
    TagUpdateToJSON,
} from '../models/index';

export interface BulkDeleteBookmarksBookmarksBulkDeletePostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkPublishBookmarksBookmarksBulkPublishPostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkPublishBookmarksV1BookmarksBulkPublishPostRequest {
    requestBody: { [key: string]: any; };
    xCsrfToken?: string | null;
}

export interface BulkUpdateBookmarkTagsBookmarksBulkTagsPostRequest {
    bulkBookmarkTagUpdate: BulkBookmarkTagUpdate;
    xCsrfToken?: string | null;
}

export interface BulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRequest {
    bulkBookmarkTagUpdate: BulkBookmarkTagUpdate;
    xCsrfToken?: string | null;
}

export interface CountBookmarksBookmarksCountGetRequest {
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    search?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
    size?: number;
}

export interface CountBookmarksV1BookmarksCountGetRequest {
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    search?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
    size?: number;
}

export interface CreateFolderBookmarksFoldersPostRequest {
    folderCreate: FolderCreate;
    xCsrfToken?: string | null;
}

export interface CreateFolderV1BookmarksFoldersPostRequest {
    folderCreate: FolderCreate;
    xCsrfToken?: string | null;
}

export interface CreateTagBookmarksTagsPostRequest {
    tagCreate: TagCreate;
    xCsrfToken?: string | null;
}

export interface CreateTagV1BookmarksTagsPostRequest {
    tagCreate: TagCreate;
    xCsrfToken?: string | null;
}

export interface DeleteBookmarkBookmarksBookmarkIdDeleteRequest {
    bookmarkId: string;
    deleteRemote?: boolean;
    xCsrfToken?: string | null;
}

export interface DeleteBookmarkFolderBookmarksBookmarkIdFolderDeleteRequest {
    bookmarkId: string;
    xCsrfToken?: string | null;
}

export interface DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest {
    bookmarkId: string;
    xCsrfToken?: string | null;
}

export interface DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest {
    bookmarkId: string;
    deleteRemote?: boolean;
    xCsrfToken?: string | null;
}

export interface DeleteFolderBookmarksFoldersFolderIdDeleteRequest {
    folderId: string;
    xCsrfToken?: string | null;
}

export interface DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest {
    folderId: string;
    xCsrfToken?: string | null;
}

export interface DeleteTagBookmarksTagsTagIdDeleteRequest {
    tagId: string;
    xCsrfToken?: string | null;
}

export interface DeleteTagV1BookmarksTagsTagIdDeleteRequest {
    tagId: string;
    xCsrfToken?: string | null;
}

export interface ExportBookmarksBookmarksExportGetRequest {
    format?: string;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ExportBookmarksV1BookmarksExportGetRequest {
    format?: string;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface GetBookmarkBookmarksBookmarkIdGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkFolderBookmarksBookmarkIdFolderGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkTagsBookmarksBookmarkIdTagsGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest {
    bookmarkId: string;
}

export interface GetBookmarkV1BookmarksBookmarkIdGetRequest {
    bookmarkId: string;
}

export interface HeadBookmarksBookmarksHeadRequest {
    search?: string | null;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface HeadBookmarksBookmarksHead0Request {
    search?: string | null;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface HeadBookmarksV1BookmarksHeadRequest {
    search?: string | null;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface HeadBookmarksV1BookmarksHead0Request {
    search?: string | null;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksBookmarksGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksBookmarksGet0Request {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksV1BookmarksGetRequest {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface ListBookmarksV1BookmarksGet0Request {
    page?: number;
    size?: number;
    search?: string | null;
    fuzzy?: boolean;
    feedId?: string | null;
    tagId?: string | null;
    folderId?: string | null;
    since?: string | null;
    until?: string | null;
    sortBy?: string | null;
    sortDir?: string | null;
    titleQuery?: string | null;
    urlQuery?: string | null;
    regex?: string | null;
    regexTarget?: string | null;
    regexFlags?: string | null;
}

export interface PreviewBookmarkBookmarksBookmarkIdPreviewGetRequest {
    bookmarkId: string;
}

export interface PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest {
    bookmarkId: string;
}

export interface UpdateBookmarkFolderBookmarksBookmarkIdFolderPutRequest {
    bookmarkId: string;
    bookmarkFolderUpdate: BookmarkFolderUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest {
    bookmarkId: string;
    bookmarkFolderUpdate: BookmarkFolderUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateBookmarkTagsBookmarksBookmarkIdTagsPutRequest {
    bookmarkId: string;
    bookmarkTagsUpdate: BookmarkTagsUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest {
    bookmarkId: string;
    bookmarkTagsUpdate: BookmarkTagsUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateFolderBookmarksFoldersFolderIdPutRequest {
    folderId: string;
    folderUpdate: FolderUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateFolderV1BookmarksFoldersFolderIdPutRequest {
    folderId: string;
    folderUpdate: FolderUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateTagBookmarksTagsTagIdPutRequest {
    tagId: string;
    tagUpdate: TagUpdate;
    xCsrfToken?: string | null;
}

export interface UpdateTagV1BookmarksTagsTagIdPutRequest {
    tagId: string;
    tagUpdate: TagUpdate;
    xCsrfToken?: string | null;
}

/**
 * 
 */
export class BookmarksApi extends runtime.BaseAPI {

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksBookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksBookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksBookmarksBulkDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/bulk-delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksBookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksBookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteBookmarksBookmarksBulkDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkDeleteBookmarksV1BookmarksBulkDeletePost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/bulk-delete`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Bulk Delete Bookmarks
     */
    async bulkDeleteBookmarksV1BookmarksBulkDeletePost(requestParameters: BulkDeleteBookmarksV1BookmarksBulkDeletePostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.bulkDeleteBookmarksV1BookmarksBulkDeletePostRaw(requestParameters, initOverrides);
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksBookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksBookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksBookmarksBulkPublishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/bulk-publish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksBookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksBookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkPublishBookmarksBookmarksBulkPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        if (requestParameters['requestBody'] == null) {
            throw new runtime.RequiredError(
                'requestBody',
                'Required parameter "requestBody" was null or undefined when calling bulkPublishBookmarksV1BookmarksBulkPublishPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/bulk-publish`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: requestParameters['requestBody'],
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Bulk Publish Bookmarks
     */
    async bulkPublishBookmarksV1BookmarksBulkPublishPost(requestParameters: BulkPublishBookmarksV1BookmarksBulkPublishPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.bulkPublishBookmarksV1BookmarksBulkPublishPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksBookmarksCountGetRaw(requestParameters: CountBookmarksBookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksBookmarksCountGet(requestParameters: CountBookmarksBookmarksCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.countBookmarksBookmarksCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGetRaw(requestParameters: CountBookmarksV1BookmarksCountGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: any; }>> {
        const queryParameters: any = {};

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/count`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     * Count Bookmarks
     */
    async countBookmarksV1BookmarksCountGet(requestParameters: CountBookmarksV1BookmarksCountGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: any; }> {
        const response = await this.countBookmarksV1BookmarksCountGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Folder
     */
    async createFolderBookmarksFoldersPostRaw(requestParameters: CreateFolderBookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['folderCreate'] == null) {
            throw new runtime.RequiredError(
                'folderCreate',
                'Required parameter "folderCreate" was null or undefined when calling createFolderBookmarksFoldersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/folders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderCreateToJSON(requestParameters['folderCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Create Folder
     */
    async createFolderBookmarksFoldersPost(requestParameters: CreateFolderBookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.createFolderBookmarksFoldersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPostRaw(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['folderCreate'] == null) {
            throw new runtime.RequiredError(
                'folderCreate',
                'Required parameter "folderCreate" was null or undefined when calling createFolderV1BookmarksFoldersPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: FolderCreateToJSON(requestParameters['folderCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Create Folder
     */
    async createFolderV1BookmarksFoldersPost(requestParameters: CreateFolderV1BookmarksFoldersPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.createFolderV1BookmarksFoldersPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Tag
     */
    async createTagBookmarksTagsPostRaw(requestParameters: CreateTagBookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters['tagCreate'] == null) {
            throw new runtime.RequiredError(
                'tagCreate',
                'Required parameter "tagCreate" was null or undefined when calling createTagBookmarksTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCreateToJSON(requestParameters['tagCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Create Tag
     */
    async createTagBookmarksTagsPost(requestParameters: CreateTagBookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.createTagBookmarksTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPostRaw(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters['tagCreate'] == null) {
            throw new runtime.RequiredError(
                'tagCreate',
                'Required parameter "tagCreate" was null or undefined when calling createTagV1BookmarksTagsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: TagCreateToJSON(requestParameters['tagCreate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Create Tag
     */
    async createTagV1BookmarksTagsPost(requestParameters: CreateTagV1BookmarksTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.createTagV1BookmarksTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkBookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkBookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkBookmarksBookmarkIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteRemote'] != null) {
            queryParameters['delete_remote'] = requestParameters['deleteRemote'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkBookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkBookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkBookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderBookmarksBookmarkIdFolderDeleteRaw(requestParameters: DeleteBookmarkFolderBookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkFolderBookmarksBookmarkIdFolderDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderBookmarksBookmarkIdFolderDelete(requestParameters: DeleteBookmarkFolderBookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkFolderBookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters: DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark Folder
     */
    async deleteBookmarkFolderV1BookmarksBookmarkIdFolderDelete(requestParameters: DeleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkFolderV1BookmarksBookmarkIdFolderDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling deleteBookmarkV1BookmarksBookmarkIdDelete().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['deleteRemote'] != null) {
            queryParameters['delete_remote'] = requestParameters['deleteRemote'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Bookmark
     */
    async deleteBookmarkV1BookmarksBookmarkIdDelete(requestParameters: DeleteBookmarkV1BookmarksBookmarkIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteBookmarkV1BookmarksBookmarkIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Folder
     */
    async deleteFolderBookmarksFoldersFolderIdDeleteRaw(requestParameters: DeleteFolderBookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['folderId'] == null) {
            throw new runtime.RequiredError(
                'folderId',
                'Required parameter "folderId" was null or undefined when calling deleteFolderBookmarksFoldersFolderIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/folders/{folder_id}`;
        urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Folder
     */
    async deleteFolderBookmarksFoldersFolderIdDelete(requestParameters: DeleteFolderBookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFolderBookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['folderId'] == null) {
            throw new runtime.RequiredError(
                'folderId',
                'Required parameter "folderId" was null or undefined when calling deleteFolderV1BookmarksFoldersFolderIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders/{folder_id}`;
        urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Folder
     */
    async deleteFolderV1BookmarksFoldersFolderIdDelete(requestParameters: DeleteFolderV1BookmarksFoldersFolderIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteFolderV1BookmarksFoldersFolderIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Tag
     */
    async deleteTagBookmarksTagsTagIdDeleteRaw(requestParameters: DeleteTagBookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling deleteTagBookmarksTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/tags/{tag_id}`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Tag
     */
    async deleteTagBookmarksTagsTagIdDelete(requestParameters: DeleteTagBookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagBookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling deleteTagV1BookmarksTagsTagIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags/{tag_id}`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Tag
     */
    async deleteTagV1BookmarksTagsTagIdDelete(requestParameters: DeleteTagV1BookmarksTagsTagIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteTagV1BookmarksTagsTagIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksBookmarksExportGetRaw(requestParameters: ExportBookmarksBookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksBookmarksExportGet(requestParameters: ExportBookmarksBookmarksExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportBookmarksBookmarksExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGetRaw(requestParameters: ExportBookmarksV1BookmarksExportGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['format'] != null) {
            queryParameters['format'] = requestParameters['format'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/export`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Export Bookmarks
     */
    async exportBookmarksV1BookmarksExportGet(requestParameters: ExportBookmarksV1BookmarksExportGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.exportBookmarksV1BookmarksExportGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark
     */
    async getBookmarkBookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkBookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkBookmarksBookmarkIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark
     */
    async getBookmarkBookmarksBookmarkIdGet(requestParameters: GetBookmarkBookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut> {
        const response = await this.getBookmarkBookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderBookmarksBookmarkIdFolderGetRaw(requestParameters: GetBookmarkFolderBookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkFolderBookmarksBookmarkIdFolderGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderBookmarksBookmarkIdFolderGet(requestParameters: GetBookmarkFolderBookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.getBookmarkFolderBookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters: GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkFolderV1BookmarksBookmarkIdFolderGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark Folder
     */
    async getBookmarkFolderV1BookmarksBookmarkIdFolderGet(requestParameters: GetBookmarkFolderV1BookmarksBookmarkIdFolderGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.getBookmarkFolderV1BookmarksBookmarkIdFolderGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsBookmarksBookmarkIdTagsGetRaw(requestParameters: GetBookmarkTagsBookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkTagsBookmarksBookmarkIdTagsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}/tags`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsBookmarksBookmarkIdTagsGet(requestParameters: GetBookmarkTagsBookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.getBookmarkTagsBookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters: GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkTagsV1BookmarksBookmarkIdTagsGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * Get Bookmark Tags
     */
    async getBookmarkTagsV1BookmarksBookmarkIdTagsGet(requestParameters: GetBookmarkTagsV1BookmarksBookmarkIdTagsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.getBookmarkTagsV1BookmarksBookmarkIdTagsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarkOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling getBookmarkV1BookmarksBookmarkIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarkOutFromJSON(jsonValue));
    }

    /**
     * Get Bookmark
     */
    async getBookmarkV1BookmarksBookmarkIdGet(requestParameters: GetBookmarkV1BookmarksBookmarkIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarkOut> {
        const response = await this.getBookmarkV1BookmarksBookmarkIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHeadRaw(requestParameters: HeadBookmarksBookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHead(requestParameters: HeadBookmarksBookmarksHeadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksBookmarksHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHead_1Raw(requestParameters: HeadBookmarksBookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksBookmarksHead_1(requestParameters: HeadBookmarksBookmarksHead0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksBookmarksHead_1Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHeadRaw(requestParameters: HeadBookmarksV1BookmarksHeadRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead(requestParameters: HeadBookmarksV1BookmarksHeadRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHeadRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_2Raw(requestParameters: HeadBookmarksV1BookmarksHead0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<any>> {
        const queryParameters: any = {};

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'HEAD',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<any>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Head Bookmarks
     */
    async headBookmarksV1BookmarksHead_2(requestParameters: HeadBookmarksV1BookmarksHead0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<any> {
        const response = await this.headBookmarksV1BookmarksHead_2Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGetRaw(requestParameters: ListBookmarksBookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGet(requestParameters: ListBookmarksBookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksBookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGet_3Raw(requestParameters: ListBookmarksBookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksBookmarksGet_3(requestParameters: ListBookmarksBookmarksGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksBookmarksGet_3Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGetRaw(requestParameters: ListBookmarksV1BookmarksGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet(requestParameters: ListBookmarksV1BookmarksGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_4Raw(requestParameters: ListBookmarksV1BookmarksGet0Request, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<BookmarksPage>> {
        const queryParameters: any = {};

        if (requestParameters['page'] != null) {
            queryParameters['page'] = requestParameters['page'];
        }

        if (requestParameters['size'] != null) {
            queryParameters['size'] = requestParameters['size'];
        }

        if (requestParameters['search'] != null) {
            queryParameters['search'] = requestParameters['search'];
        }

        if (requestParameters['fuzzy'] != null) {
            queryParameters['fuzzy'] = requestParameters['fuzzy'];
        }

        if (requestParameters['feedId'] != null) {
            queryParameters['feed_id'] = requestParameters['feedId'];
        }

        if (requestParameters['tagId'] != null) {
            queryParameters['tag_id'] = requestParameters['tagId'];
        }

        if (requestParameters['folderId'] != null) {
            queryParameters['folder_id'] = requestParameters['folderId'];
        }

        if (requestParameters['since'] != null) {
            queryParameters['since'] = requestParameters['since'];
        }

        if (requestParameters['until'] != null) {
            queryParameters['until'] = requestParameters['until'];
        }

        if (requestParameters['sortBy'] != null) {
            queryParameters['sort_by'] = requestParameters['sortBy'];
        }

        if (requestParameters['sortDir'] != null) {
            queryParameters['sort_dir'] = requestParameters['sortDir'];
        }

        if (requestParameters['titleQuery'] != null) {
            queryParameters['title_query'] = requestParameters['titleQuery'];
        }

        if (requestParameters['urlQuery'] != null) {
            queryParameters['url_query'] = requestParameters['urlQuery'];
        }

        if (requestParameters['regex'] != null) {
            queryParameters['regex'] = requestParameters['regex'];
        }

        if (requestParameters['regexTarget'] != null) {
            queryParameters['regex_target'] = requestParameters['regexTarget'];
        }

        if (requestParameters['regexFlags'] != null) {
            queryParameters['regex_flags'] = requestParameters['regexFlags'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => BookmarksPageFromJSON(jsonValue));
    }

    /**
     * List Bookmarks
     */
    async listBookmarksV1BookmarksGet_4(requestParameters: ListBookmarksV1BookmarksGet0Request = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<BookmarksPage> {
        const response = await this.listBookmarksV1BookmarksGet_4Raw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Folders
     */
    async listFoldersBookmarksFoldersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FolderOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/folders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FolderOutFromJSON));
    }

    /**
     * List Folders
     */
    async listFoldersBookmarksFoldersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FolderOut>> {
        const response = await this.listFoldersBookmarksFoldersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<FolderOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(FolderOutFromJSON));
    }

    /**
     * List Folders
     */
    async listFoldersV1BookmarksFoldersGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<FolderOut>> {
        const response = await this.listFoldersV1BookmarksFoldersGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Tags
     */
    async listTagsBookmarksTagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * List Tags
     */
    async listTagsBookmarksTagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.listTagsBookmarksTagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGetRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * List Tags
     */
    async listTagsV1BookmarksTagsGet(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.listTagsV1BookmarksTagsGetRaw(initOverrides);
        return await response.value();
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkBookmarksBookmarkIdPreviewGetRaw(requestParameters: PreviewBookmarkBookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling previewBookmarkBookmarksBookmarkIdPreviewGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}/preview`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkBookmarksBookmarkIdPreviewGet(requestParameters: PreviewBookmarkBookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.previewBookmarkBookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<string>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling previewBookmarkV1BookmarksBookmarkIdPreviewGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/preview`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<string>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     * Preview Bookmark
     */
    async previewBookmarkV1BookmarksBookmarkIdPreviewGet(requestParameters: PreviewBookmarkV1BookmarksBookmarkIdPreviewGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<string> {
        const response = await this.previewBookmarkV1BookmarksBookmarkIdPreviewGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderBookmarksBookmarkIdFolderPutRaw(requestParameters: UpdateBookmarkFolderBookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkFolderBookmarksBookmarkIdFolderPut().'
            );
        }

        if (requestParameters['bookmarkFolderUpdate'] == null) {
            throw new runtime.RequiredError(
                'bookmarkFolderUpdate',
                'Required parameter "bookmarkFolderUpdate" was null or undefined when calling updateBookmarkFolderBookmarksBookmarkIdFolderPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkFolderUpdateToJSON(requestParameters['bookmarkFolderUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderBookmarksBookmarkIdFolderPut(requestParameters: UpdateBookmarkFolderBookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateBookmarkFolderBookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters: UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().'
            );
        }

        if (requestParameters['bookmarkFolderUpdate'] == null) {
            throw new runtime.RequiredError(
                'bookmarkFolderUpdate',
                'Required parameter "bookmarkFolderUpdate" was null or undefined when calling updateBookmarkFolderV1BookmarksBookmarkIdFolderPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/folder`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkFolderUpdateToJSON(requestParameters['bookmarkFolderUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Bookmark Folder
     */
    async updateBookmarkFolderV1BookmarksBookmarkIdFolderPut(requestParameters: UpdateBookmarkFolderV1BookmarksBookmarkIdFolderPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateBookmarkFolderV1BookmarksBookmarkIdFolderPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsBookmarksBookmarkIdTagsPutRaw(requestParameters: UpdateBookmarkTagsBookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkTagsBookmarksBookmarkIdTagsPut().'
            );
        }

        if (requestParameters['bookmarkTagsUpdate'] == null) {
            throw new runtime.RequiredError(
                'bookmarkTagsUpdate',
                'Required parameter "bookmarkTagsUpdate" was null or undefined when calling updateBookmarkTagsBookmarksBookmarkIdTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/{bookmark_id}/tags`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkTagsUpdateToJSON(requestParameters['bookmarkTagsUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsBookmarksBookmarkIdTagsPut(requestParameters: UpdateBookmarkTagsBookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.updateBookmarkTagsBookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters: UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TagOut>>> {
        if (requestParameters['bookmarkId'] == null) {
            throw new runtime.RequiredError(
                'bookmarkId',
                'Required parameter "bookmarkId" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().'
            );
        }

        if (requestParameters['bookmarkTagsUpdate'] == null) {
            throw new runtime.RequiredError(
                'bookmarkTagsUpdate',
                'Required parameter "bookmarkTagsUpdate" was null or undefined when calling updateBookmarkTagsV1BookmarksBookmarkIdTagsPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/{bookmark_id}/tags`;
        urlPath = urlPath.replace(`{${"bookmark_id"}}`, encodeURIComponent(String(requestParameters['bookmarkId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: BookmarkTagsUpdateToJSON(requestParameters['bookmarkTagsUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TagOutFromJSON));
    }

    /**
     * Update Bookmark Tags
     */
    async updateBookmarkTagsV1BookmarksBookmarkIdTagsPut(requestParameters: UpdateBookmarkTagsV1BookmarksBookmarkIdTagsPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TagOut>> {
        const response = await this.updateBookmarkTagsV1BookmarksBookmarkIdTagsPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk Update Bookmark Tags
     */
    async bulkUpdateBookmarkTagsBookmarksBulkTagsPostRaw(requestParameters: BulkUpdateBookmarkTagsBookmarksBulkTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookmarkTagSummary>>> {
        if (requestParameters['bulkBookmarkTagUpdate'] == null) {
            throw new runtime.RequiredError(
                'bulkBookmarkTagUpdate',
                'Required parameter "bulkBookmarkTagUpdate" was null or undefined when calling bulkUpdateBookmarkTagsBookmarksBulkTagsPost().' 
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        const response = await this.request({
            path: `/bookmarks/bulk-tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkBookmarkTagUpdateToJSON(requestParameters['bulkBookmarkTagUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookmarkTagSummaryFromJSON));
    }

    /**
     * Bulk Update Bookmark Tags
     */
    async bulkUpdateBookmarkTagsBookmarksBulkTagsPost(requestParameters: BulkUpdateBookmarkTagsBookmarksBulkTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookmarkTagSummary>> {
        const response = await this.bulkUpdateBookmarkTagsBookmarksBulkTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Bulk Update Bookmark Tags
     */
    async bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters: BulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<BookmarkTagSummary>>> {
        if (requestParameters['bulkBookmarkTagUpdate'] == null) {
            throw new runtime.RequiredError(
                'bulkBookmarkTagUpdate',
                'Required parameter "bulkBookmarkTagUpdate" was null or undefined when calling bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost().' 
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        const response = await this.request({
            path: `/v1/bookmarks/bulk-tags`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: BulkBookmarkTagUpdateToJSON(requestParameters['bulkBookmarkTagUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(BookmarkTagSummaryFromJSON));
    }

    /**
     * Bulk Update Bookmark Tags
     */
    async bulkUpdateBookmarkTagsV1BookmarksBulkTagsPost(requestParameters: BulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<BookmarkTagSummary>> {
        const response = await this.bulkUpdateBookmarkTagsV1BookmarksBulkTagsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Folder
     */
    async updateFolderBookmarksFoldersFolderIdPutRaw(requestParameters: UpdateFolderBookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['folderId'] == null) {
            throw new runtime.RequiredError(
                'folderId',
                'Required parameter "folderId" was null or undefined when calling updateFolderBookmarksFoldersFolderIdPut().'
            );
        }

        if (requestParameters['folderUpdate'] == null) {
            throw new runtime.RequiredError(
                'folderUpdate',
                'Required parameter "folderUpdate" was null or undefined when calling updateFolderBookmarksFoldersFolderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/folders/{folder_id}`;
        urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderUpdateToJSON(requestParameters['folderUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Folder
     */
    async updateFolderBookmarksFoldersFolderIdPut(requestParameters: UpdateFolderBookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateFolderBookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<FolderOut>> {
        if (requestParameters['folderId'] == null) {
            throw new runtime.RequiredError(
                'folderId',
                'Required parameter "folderId" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().'
            );
        }

        if (requestParameters['folderUpdate'] == null) {
            throw new runtime.RequiredError(
                'folderUpdate',
                'Required parameter "folderUpdate" was null or undefined when calling updateFolderV1BookmarksFoldersFolderIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/folders/{folder_id}`;
        urlPath = urlPath.replace(`{${"folder_id"}}`, encodeURIComponent(String(requestParameters['folderId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: FolderUpdateToJSON(requestParameters['folderUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => FolderOutFromJSON(jsonValue));
    }

    /**
     * Update Folder
     */
    async updateFolderV1BookmarksFoldersFolderIdPut(requestParameters: UpdateFolderV1BookmarksFoldersFolderIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<FolderOut> {
        const response = await this.updateFolderV1BookmarksFoldersFolderIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Tag
     */
    async updateTagBookmarksTagsTagIdPutRaw(requestParameters: UpdateTagBookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling updateTagBookmarksTagsTagIdPut().'
            );
        }

        if (requestParameters['tagUpdate'] == null) {
            throw new runtime.RequiredError(
                'tagUpdate',
                'Required parameter "tagUpdate" was null or undefined when calling updateTagBookmarksTagsTagIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/bookmarks/tags/{tag_id}`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagUpdateToJSON(requestParameters['tagUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Update Tag
     */
    async updateTagBookmarksTagsTagIdPut(requestParameters: UpdateTagBookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.updateTagBookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPutRaw(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TagOut>> {
        if (requestParameters['tagId'] == null) {
            throw new runtime.RequiredError(
                'tagId',
                'Required parameter "tagId" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().'
            );
        }

        if (requestParameters['tagUpdate'] == null) {
            throw new runtime.RequiredError(
                'tagUpdate',
                'Required parameter "tagUpdate" was null or undefined when calling updateTagV1BookmarksTagsTagIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/v1/bookmarks/tags/{tag_id}`;
        urlPath = urlPath.replace(`{${"tag_id"}}`, encodeURIComponent(String(requestParameters['tagId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: TagUpdateToJSON(requestParameters['tagUpdate']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TagOutFromJSON(jsonValue));
    }

    /**
     * Update Tag
     */
    async updateTagV1BookmarksTagsTagIdPut(requestParameters: UpdateTagV1BookmarksTagsTagIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TagOut> {
        const response = await this.updateTagV1BookmarksTagsTagIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
