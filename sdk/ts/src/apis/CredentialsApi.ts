/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Credential,
  HTTPValidationError,
} from '../models/index';
import {
    CredentialFromJSON,
    CredentialToJSON,
    HTTPValidationErrorFromJSON,
    HTTPValidationErrorToJSON,
} from '../models/index';

export interface CreateCredentialCredentialsPostRequest {
    credential: Credential;
    xCsrfToken?: string | null;
}

export interface DeleteCredentialCredentialsCredIdDeleteRequest {
    credId: string;
    xCsrfToken?: string | null;
}

export interface GetCredentialCredentialsCredIdGetRequest {
    credId: string;
}

export interface ListCredentialsCredentialsGetRequest {
    includeGlobal?: boolean;
}

export interface UpdateCredentialCredentialsCredIdPutRequest {
    credId: string;
    credential: Credential;
    xCsrfToken?: string | null;
}

/**
 * 
 */
export class CredentialsApi extends runtime.BaseAPI {

    /**
     * Create Credential
     */
    async createCredentialCredentialsPostRaw(requestParameters: CreateCredentialCredentialsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>> {
        if (requestParameters['credential'] == null) {
            throw new runtime.RequiredError(
                'credential',
                'Required parameter "credential" was null or undefined when calling createCredentialCredentialsPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/credentials/`;

        const response = await this.request({
            path: urlPath,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CredentialToJSON(requestParameters['credential']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
    }

    /**
     * Create Credential
     */
    async createCredentialCredentialsPost(requestParameters: CreateCredentialCredentialsPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential> {
        const response = await this.createCredentialCredentialsPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Delete Credential
     */
    async deleteCredentialCredentialsCredIdDeleteRaw(requestParameters: DeleteCredentialCredentialsCredIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['credId'] == null) {
            throw new runtime.RequiredError(
                'credId',
                'Required parameter "credId" was null or undefined when calling deleteCredentialCredentialsCredIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/credentials/{cred_id}`;
        urlPath = urlPath.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters['credId'])));

        const response = await this.request({
            path: urlPath,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Delete Credential
     */
    async deleteCredentialCredentialsCredIdDelete(requestParameters: DeleteCredentialCredentialsCredIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.deleteCredentialCredentialsCredIdDeleteRaw(requestParameters, initOverrides);
    }

    /**
     * Get Credential
     */
    async getCredentialCredentialsCredIdGetRaw(requestParameters: GetCredentialCredentialsCredIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>> {
        if (requestParameters['credId'] == null) {
            throw new runtime.RequiredError(
                'credId',
                'Required parameter "credId" was null or undefined when calling getCredentialCredentialsCredIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/credentials/{cred_id}`;
        urlPath = urlPath.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters['credId'])));

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
    }

    /**
     * Get Credential
     */
    async getCredentialCredentialsCredIdGet(requestParameters: GetCredentialCredentialsCredIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential> {
        const response = await this.getCredentialCredentialsCredIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * List Credentials
     */
    async listCredentialsCredentialsGetRaw(requestParameters: ListCredentialsCredentialsGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Credential>>> {
        const queryParameters: any = {};

        if (requestParameters['includeGlobal'] != null) {
            queryParameters['include_global'] = requestParameters['includeGlobal'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/credentials/`;

        const response = await this.request({
            path: urlPath,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CredentialFromJSON));
    }

    /**
     * List Credentials
     */
    async listCredentialsCredentialsGet(requestParameters: ListCredentialsCredentialsGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Credential>> {
        const response = await this.listCredentialsCredentialsGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update Credential
     */
    async updateCredentialCredentialsCredIdPutRaw(requestParameters: UpdateCredentialCredentialsCredIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Credential>> {
        if (requestParameters['credId'] == null) {
            throw new runtime.RequiredError(
                'credId',
                'Required parameter "credId" was null or undefined when calling updateCredentialCredentialsCredIdPut().'
            );
        }

        if (requestParameters['credential'] == null) {
            throw new runtime.RequiredError(
                'credential',
                'Required parameter "credential" was null or undefined when calling updateCredentialCredentialsCredIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (requestParameters['xCsrfToken'] != null) {
            headerParameters['x-csrf-token'] = String(requestParameters['xCsrfToken']);
        }

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("HTTPBearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }

        let urlPath = `/credentials/{cred_id}`;
        urlPath = urlPath.replace(`{${"cred_id"}}`, encodeURIComponent(String(requestParameters['credId'])));

        const response = await this.request({
            path: urlPath,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CredentialToJSON(requestParameters['credential']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CredentialFromJSON(jsonValue));
    }

    /**
     * Update Credential
     */
    async updateCredentialCredentialsCredIdPut(requestParameters: UpdateCredentialCredentialsCredIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Credential> {
        const response = await this.updateCredentialCredentialsCredIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
