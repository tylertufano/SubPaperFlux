/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface SiteConfig
 */
export interface SiteConfig {
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    id?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    siteUrl: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    usernameSelector: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    passwordSelector: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    loginButtonSelector: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    postLoginSelector?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    cookiesToStore?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfig
     */
    ownerUserId?: any | null;
}

/**
 * Check if a given object implements the SiteConfig interface.
 */
export function instanceOfSiteConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "siteUrl" in value;
    isInstance = isInstance && "usernameSelector" in value;
    isInstance = isInstance && "passwordSelector" in value;
    isInstance = isInstance && "loginButtonSelector" in value;

    return isInstance;
}

export function SiteConfigFromJSON(json: any): SiteConfig {
    return SiteConfigFromJSONTyped(json, false);
}

export function SiteConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteConfig {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': json['name'],
        'siteUrl': json['site_url'],
        'usernameSelector': json['username_selector'],
        'passwordSelector': json['password_selector'],
        'loginButtonSelector': json['login_button_selector'],
        'postLoginSelector': !exists(json, 'post_login_selector') ? undefined : json['post_login_selector'],
        'cookiesToStore': !exists(json, 'cookies_to_store') ? undefined : json['cookies_to_store'],
        'ownerUserId': !exists(json, 'owner_user_id') ? undefined : json['owner_user_id'],
    };
}

export function SiteConfigToJSON(value?: SiteConfig | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'site_url': value.siteUrl,
        'username_selector': value.usernameSelector,
        'password_selector': value.passwordSelector,
        'login_button_selector': value.loginButtonSelector,
        'post_login_selector': value.postLoginSelector,
        'cookies_to_store': value.cookiesToStore,
        'owner_user_id': value.ownerUserId,
    };
}

