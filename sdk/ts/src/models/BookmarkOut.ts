/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface BookmarkOut
 */
export interface BookmarkOut {
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    instapaperBookmarkId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    title?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    url?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    contentLocation?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    feedId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    publishedAt?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BookmarkOut
     */
    rssEntry?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof BookmarkOut
     */
    rawHtmlContent?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BookmarkOut
     */
    publicationStatuses?: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof BookmarkOut
     */
    publicationFlags?: { [key: string]: any; };
}

/**
 * Check if a given object implements the BookmarkOut interface.
 */
export function instanceOfBookmarkOut(value: object): value is BookmarkOut {
    if (!('id' in value) || value['id'] === undefined) return false;
    return true;
}

export function BookmarkOutFromJSON(json: any): BookmarkOut {
    return BookmarkOutFromJSONTyped(json, false);
}

export function BookmarkOutFromJSONTyped(json: any, ignoreDiscriminator: boolean): BookmarkOut {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'instapaperBookmarkId': json['instapaper_bookmark_id'] == null ? undefined : json['instapaper_bookmark_id'],
        'title': json['title'] == null ? undefined : json['title'],
        'url': json['url'] == null ? undefined : json['url'],
        'contentLocation': json['content_location'] == null ? undefined : json['content_location'],
        'feedId': json['feed_id'] == null ? undefined : json['feed_id'],
        'publishedAt': json['published_at'] == null ? undefined : json['published_at'],
        'rssEntry': json['rss_entry'] == null ? undefined : json['rss_entry'],
        'rawHtmlContent': json['raw_html_content'] == null ? undefined : json['raw_html_content'],
        'publicationStatuses': json['publication_statuses'] == null ? undefined : json['publication_statuses'],
        'publicationFlags': json['publication_flags'] == null ? undefined : json['publication_flags'],
    };
}

export function BookmarkOutToJSON(json: any): BookmarkOut {
    return BookmarkOutToJSONTyped(json, false);
}

export function BookmarkOutToJSONTyped(value?: BookmarkOut | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'instapaper_bookmark_id': value['instapaperBookmarkId'],
        'title': value['title'],
        'url': value['url'],
        'content_location': value['contentLocation'],
        'feed_id': value['feedId'],
        'published_at': value['publishedAt'],
        'rss_entry': value['rssEntry'],
        'raw_html_content': value['rawHtmlContent'],
        'publication_statuses': value['publicationStatuses'],
        'publication_flags': value['publicationFlags'],
    };
}

