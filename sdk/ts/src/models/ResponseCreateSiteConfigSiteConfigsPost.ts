/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import type { SiteConfigApi } from './SiteConfigApi';
import type { SiteConfigSelenium } from './SiteConfigSelenium';
import { SiteConfigApiFromJSONTyped, SiteConfigApiToJSON } from './SiteConfigApi';
import { SiteConfigSeleniumFromJSONTyped, SiteConfigSeleniumToJSON } from './SiteConfigSelenium';

/**
 * @type ResponseCreateSiteConfigSiteConfigsPost
 * 
 * @export
 */
export type ResponseCreateSiteConfigSiteConfigsPost = { loginType: 'api' } & SiteConfigApi | { loginType: 'selenium' } & SiteConfigSelenium;

export function ResponseCreateSiteConfigSiteConfigsPostFromJSON(json: any): ResponseCreateSiteConfigSiteConfigsPost {
    return ResponseCreateSiteConfigSiteConfigsPostFromJSONTyped(json, false);
}

export function ResponseCreateSiteConfigSiteConfigsPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseCreateSiteConfigSiteConfigsPost {
    if (json == null) {
        return json;
    }
    switch (json['login_type']) {
        case 'api':
            return Object.assign({}, SiteConfigApiFromJSONTyped(json, true), { loginType: 'api' } as const);
        case 'selenium':
            return Object.assign({}, SiteConfigSeleniumFromJSONTyped(json, true), { loginType: 'selenium' } as const);
        default:
            return json;
    }
}

export function ResponseCreateSiteConfigSiteConfigsPostToJSON(json: any): any {
    return ResponseCreateSiteConfigSiteConfigsPostToJSONTyped(json, false);
}

export function ResponseCreateSiteConfigSiteConfigsPostToJSONTyped(value?: ResponseCreateSiteConfigSiteConfigsPost | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }
    switch (value['loginType']) {
        case 'api':
            return Object.assign({}, SiteConfigApiToJSON(value as SiteConfigApi), { loginType: 'api' } as const);
        case 'selenium':
            return Object.assign({}, SiteConfigSeleniumToJSON(value as SiteConfigSelenium), { loginType: 'selenium' } as const);
        default:
            return value;
    }
}

