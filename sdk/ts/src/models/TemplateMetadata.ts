/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface TemplateMetadata
 */
export interface TemplateMetadata {
    /**
     * Stable template identifier
     * @type {string}
     * @memberof TemplateMetadata
     */
    id: string;
    /**
     * Source filename within the templates directory
     * @type {string}
     * @memberof TemplateMetadata
     */
    filename: string;
    /**
     * Display title for the template
     * @type {string}
     * @memberof TemplateMetadata
     */
    title: string;
    /**
     * Short description of the template contents
     * @type {string}
     * @memberof TemplateMetadata
     */
    description: string;
    /**
     * Primary file format (derived from the extension)
     * @type {string}
     * @memberof TemplateMetadata
     */
    format: string;
    /**
     * File size in bytes
     * @type {number}
     * @memberof TemplateMetadata
     */
    sizeBytes: number;
    /**
     * List of category identifiers that apply to the template
     * @type {Array<string>}
     * @memberof TemplateMetadata
     */
    categories?: Array<string>;
    /**
     * Relative URL to download the template asset
     * @type {string}
     * @memberof TemplateMetadata
     */
    downloadUrl: string;
}

/**
 * Check if a given object implements the TemplateMetadata interface.
 */
export function instanceOfTemplateMetadata(value: object): value is TemplateMetadata {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('filename' in value) || value['filename'] === undefined) return false;
    if (!('title' in value) || value['title'] === undefined) return false;
    if (!('description' in value) || value['description'] === undefined) return false;
    if (!('format' in value) || value['format'] === undefined) return false;
    if (!('sizeBytes' in value) || value['sizeBytes'] === undefined) return false;
    if (!('downloadUrl' in value) || value['downloadUrl'] === undefined) return false;
    return true;
}

export function TemplateMetadataFromJSON(json: any): TemplateMetadata {
    return TemplateMetadataFromJSONTyped(json, false);
}

export function TemplateMetadataFromJSONTyped(json: any, ignoreDiscriminator: boolean): TemplateMetadata {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'filename': json['filename'],
        'title': json['title'],
        'description': json['description'],
        'format': json['format'],
        'sizeBytes': json['size_bytes'],
        'categories': json['categories'] == null ? undefined : json['categories'],
        'downloadUrl': json['download_url'],
    };
}

export function TemplateMetadataToJSON(json: any): TemplateMetadata {
    return TemplateMetadataToJSONTyped(json, false);
}

export function TemplateMetadataToJSONTyped(value?: TemplateMetadata | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'filename': value['filename'],
        'title': value['title'],
        'description': value['description'],
        'format': value['format'],
        'size_bytes': value['sizeBytes'],
        'categories': value['categories'],
        'download_url': value['downloadUrl'],
    };
}

