/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { SeleniumConfig } from './SeleniumConfig';
import {
    SeleniumConfigFromJSON,
    SeleniumConfigFromJSONTyped,
    SeleniumConfigToJSON,
    SeleniumConfigToJSONTyped,
} from './SeleniumConfig';

/**
 * 
 * @export
 * @interface SiteConfigSelenium
 */
export interface SiteConfigSelenium {
    /**
     * 
     * @type {string}
     * @memberof SiteConfigSelenium
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigSelenium
     */
    siteUrl: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigSelenium
     */
    ownerUserId?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigSelenium
     */
    successTextClass?: string;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigSelenium
     */
    expectedSuccessText?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof SiteConfigSelenium
     */
    requiredCookies?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigSelenium
     */
    id?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SiteConfigSelenium
     */
    loginType?: SiteConfigSeleniumLoginTypeEnum;
    /**
     * 
     * @type {SeleniumConfig}
     * @memberof SiteConfigSelenium
     */
    seleniumConfig: SeleniumConfig;
}


/**
 * @export
 */
export const SiteConfigSeleniumLoginTypeEnum = {
    Selenium: 'selenium'
} as const;
export type SiteConfigSeleniumLoginTypeEnum = typeof SiteConfigSeleniumLoginTypeEnum[keyof typeof SiteConfigSeleniumLoginTypeEnum];


/**
 * Check if a given object implements the SiteConfigSelenium interface.
 */
export function instanceOfSiteConfigSelenium(value: object): value is SiteConfigSelenium {
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('siteUrl' in value) || value['siteUrl'] === undefined) return false;
    if (!('seleniumConfig' in value) || value['seleniumConfig'] === undefined) return false;
    return true;
}

export function SiteConfigSeleniumFromJSON(json: any): SiteConfigSelenium {
    return SiteConfigSeleniumFromJSONTyped(json, false);
}

export function SiteConfigSeleniumFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteConfigSelenium {
    if (json == null) {
        return json;
    }
    return {
        
        'name': json['name'],
        'siteUrl': json['site_url'],
        'ownerUserId': json['owner_user_id'] == null ? undefined : json['owner_user_id'],
        'successTextClass': json['success_text_class'] == null ? undefined : json['success_text_class'],
        'expectedSuccessText': json['expected_success_text'] == null ? undefined : json['expected_success_text'],
        'requiredCookies': json['required_cookies'] == null ? undefined : json['required_cookies'],
        'id': json['id'] == null ? undefined : json['id'],
        'loginType': json['login_type'] == null ? undefined : json['login_type'],
        'seleniumConfig': SeleniumConfigFromJSON(json['selenium_config']),
    };
}

export function SiteConfigSeleniumToJSON(json: any): SiteConfigSelenium {
    return SiteConfigSeleniumToJSONTyped(json, false);
}

export function SiteConfigSeleniumToJSONTyped(value?: SiteConfigSelenium | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'name': value['name'],
        'site_url': value['siteUrl'],
        'owner_user_id': value['ownerUserId'],
        'success_text_class': value['successTextClass'],
        'expected_success_text': value['expectedSuccessText'],
        'required_cookies': value['requiredCookies'],
        'id': value['id'],
        'login_type': value['loginType'],
        'selenium_config': SeleniumConfigToJSON(value['seleniumConfig']),
    };
}

