/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface Feed
 */
export interface Feed {
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    id?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    url: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    pollFrequency?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    initialLookbackPeriod?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    isPaywalled?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    rssRequiresAuth?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    siteConfigId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    ownerUserId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    siteLoginCredentialId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    folderId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof Feed
     */
    tagIds?: any | null;
}

/**
 * Check if a given object implements the Feed interface.
 */
export function instanceOfFeed(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "url" in value;

    return isInstance;
}

export function FeedFromJSON(json: any): Feed {
    return FeedFromJSONTyped(json, false);
}

export function FeedFromJSONTyped(json: any, ignoreDiscriminator: boolean): Feed {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'url': json['url'],
        'pollFrequency': !exists(json, 'poll_frequency') ? undefined : json['poll_frequency'],
        'initialLookbackPeriod': !exists(json, 'initial_lookback_period') ? undefined : json['initial_lookback_period'],
        'isPaywalled': !exists(json, 'is_paywalled') ? undefined : json['is_paywalled'],
        'rssRequiresAuth': !exists(json, 'rss_requires_auth') ? undefined : json['rss_requires_auth'],
        'siteConfigId': !exists(json, 'site_config_id') ? undefined : json['site_config_id'],
        'ownerUserId': !exists(json, 'owner_user_id') ? undefined : json['owner_user_id'],
        'siteLoginCredentialId': !exists(json, 'site_login_credential_id') ? undefined : json['site_login_credential_id'],
        'folderId': !exists(json, 'folder_id') ? undefined : json['folder_id'],
        'tagIds': !exists(json, 'tag_ids') ? undefined : json['tag_ids'],
    };
}

export function FeedToJSON(value?: Feed | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'url': value.url,
        'poll_frequency': value.pollFrequency,
        'initial_lookback_period': value.initialLookbackPeriod,
        'is_paywalled': value.isPaywalled,
        'rss_requires_auth': value.rssRequiresAuth,
        'site_config_id': value.siteConfigId,
        'owner_user_id': value.ownerUserId,
        'site_login_credential_id': value.siteLoginCredentialId,
        'folder_id': value.folderId,
        'tag_ids': value.tagIds,
    };
}

