/* tslint:disable */
/* eslint-disable */
/**
 * SubPaperFlux API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApiConfig } from './ApiConfig';
import {
    ApiConfigFromJSON,
    ApiConfigFromJSONTyped,
    ApiConfigToJSON,
} from './ApiConfig';

/**
 * 
 * @export
 * @interface SiteConfigApi
 */
export interface SiteConfigApi {
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    name: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    siteUrl: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    ownerUserId?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    successTextClass?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    expectedSuccessText?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    requiredCookies?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    id?: any | null;
    /**
     * 
     * @type {any}
     * @memberof SiteConfigApi
     */
    loginType?: any | null;
    /**
     * 
     * @type {ApiConfig}
     * @memberof SiteConfigApi
     */
    apiConfig: ApiConfig;
}

/**
 * Check if a given object implements the SiteConfigApi interface.
 */
export function instanceOfSiteConfigApi(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "siteUrl" in value;
    isInstance = isInstance && "apiConfig" in value;

    return isInstance;
}

export function SiteConfigApiFromJSON(json: any): SiteConfigApi {
    return SiteConfigApiFromJSONTyped(json, false);
}

export function SiteConfigApiFromJSONTyped(json: any, ignoreDiscriminator: boolean): SiteConfigApi {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'siteUrl': json['site_url'],
        'ownerUserId': !exists(json, 'owner_user_id') ? undefined : json['owner_user_id'],
        'successTextClass': !exists(json, 'success_text_class') ? undefined : json['success_text_class'],
        'expectedSuccessText': !exists(json, 'expected_success_text') ? undefined : json['expected_success_text'],
        'requiredCookies': !exists(json, 'required_cookies') ? undefined : json['required_cookies'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'loginType': !exists(json, 'login_type') ? undefined : json['login_type'],
        'apiConfig': ApiConfigFromJSON(json['api_config']),
    };
}

export function SiteConfigApiToJSON(value?: SiteConfigApi | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'site_url': value.siteUrl,
        'owner_user_id': value.ownerUserId,
        'success_text_class': value.successTextClass,
        'expected_success_text': value.expectedSuccessText,
        'required_cookies': value.requiredCookies,
        'id': value.id,
        'login_type': value.loginType,
        'api_config': ApiConfigToJSON(value.apiConfig),
    };
}

